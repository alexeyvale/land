COMMENT		: COMMENT_L|COMMENT_ML
COMMENT_L	: '//' ~[\n\r]*
COMMENT_ML	: '{' .*? '}'
STRING_SKIP	: '\'\'' | '\\\\'
STRING		: '\'' (STRING_SKIP|.)*? '\''
MODIFIER	: 'internal'|'private'|'protected'|'public'
ROUTINE_TYPE	: 'procedure'|'function'|'constructor'|'destructor'
ID			: '&'?[_a-zA-Z][_0-9a-zA-Z]*

//round_bracketed = %left '(' %right ')'
//code_bracketed	= %left ('try'|'case'|'begin'|'record'|'class') %right 'end'

file			=	(Any|outer_declaration)+
outer_declaration	=	const|var|type|outer_routine
inner_declaration	=	const|var|type
const			=	'const' const_atom+
type			=	'type' type_atom+
var				=	'var' var_atom+
const_atom		=	ID '=' Any ';'
var_atom		=	(ID (',' ID)* (':' Any)? (':=' Any)? ';')
type_atom		=	ID '=' (record_or_class | Any) ';'
outer_routine	=	routine_header ';' Any (outer_declaration* (block ';'))?!
inner_routine	=	routine_header ';' Any (inner_declaration* (block ';'))?!
routine_header	=	ROUTINE_TYPE %priority(2) name %priority(2) routine_arguments? (':' name)?
routine_arguments		=	'(' routine_arguments_atom (';' routine_arguments_atom)*  ')'
routine_arguments_atom	=	('var'|'const'|'params')? ID (',' ID)* ':' Any
record_or_class	=	('record'|'class') Any (MODIFIER|inner_routine|Any)+ 'end'

block		=	('begin'|'case'|'try') (block|Any)+ 'end'
name_atom	=	ID
name_tail_element	=	(('.'|'::') name_atom)
name		=	name_atom (name_tail_element | '<' Any '>')*

%%

%parsing ignoreundefined
%parsing start file
%parsing ignorecase
%parsing skip COMMENT

%nodes leaf name

%mapping land var_atom const_atom type_atom outer_routine inner_routine