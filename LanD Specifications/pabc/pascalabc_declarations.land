COMMENT		: COMMENT_L|COMMENT_ML
COMMENT_L	: '//' ~[\n\r]*
COMMENT_ML	: '{' .*? '}'
STRING_SKIP	: '\'\'' | '\\\\'
STRING		: '\'' (STRING_SKIP|.)*? '\''

ACCESS_MODIFIER		: 'internal'|'private'|'protected'|'public'
ROUTINE_TYPE		: 'procedure'|'function'|'constructor'|'destructor'
ONLY_HEADER_ROUTINE_MODIFIER	: 'external'|'forward'
OTHER_ROUTINE_MODIFIER			: 'override'|'abstract'|'overload'|'reintroduce'|'virtual'|'where'|'extensionmethod'

ID					: '&'?[_a-zA-Z\u0430-\u044F\u0410-\u042F][_0-9a-zA-Z\u0430-\u044F\u0410-\u042F]*
CLASS_MEMBER_USAGE	: '.' '&'?[_a-zA-Z\u0430-\u044F\u0410-\u042F][_0-9a-zA-Z\u0430-\u044F\u0410-\u042F]*

square_bracketed = %left '[' %right ']'
round_bracketed = %left '(' %right ')'

file			=	(interface_declarations|usual_declaration)* ((block | 'end') '.' )?

interface_declarations	=	'interface' in_interface_declaration* 'implementation'
usual_declaration		=	const|type|var|usual_routine ';'|attribute|Any
in_interface_declaration	=	const|type|var|interface_routine ';'|attribute|Any
in_class_declaration	=	const|type|var //Может ли здесь быть атрибут?

const			=	'const' (const_atom ';'|attribute|Any)+!
type			=	'type' (type_atom ';'|attribute|Any)+!
var				=	'var' (var_atom ';'|attribute|Any)+!
const_atom		=	name (':' Any)? '=' Any
var_atom		=	names_list (':' Any class?)? (':=' Any)?
type_atom		=	name '=' Any (class => class_type |)

//BlockFileOf<T>=class where T: record;
class			=	('record'|'class'|'typeclass'|'instance'|'interface') Any (section? (ACCESS_MODIFIER section?)* 'end')?!
section			=	class_member (';' (class_member|after_class_member))*
class_member	=	(attribute)* ('class'|'static')? 
					(
						%ghost var_atom 						=> field	|
						'property' name Any ':' (block|Any)+	=> property	|
						routine_header (routine_init)?			=> in_class_routine
					) | Any
after_class_member	=	in_class_declaration* block => in_class_routine_tail 
	|  (OTHER_ROUTINE_MODIFIER|ONLY_HEADER_ROUTINE_MODIFIER) Any (=> modifier_headed_part | routine_init => in_class_routine_tail)

usual_routine			=	routine_header (routine_init|usual_routine_tail)
usual_routine_tail		=	';' (usual_declaration* block 
	| OTHER_ROUTINE_MODIFIER Any (routine_init | usual_routine_tail) 
	| ONLY_HEADER_ROUTINE_MODIFIER Any)
interface_routine		=	routine_header ((OTHER_ROUTINE_MODIFIER|ONLY_HEADER_ROUTINE_MODIFIER) Any)*
routine_header			=	ROUTINE_TYPE %priority(2) name? Any ('(' Any ')')? (':' Any)?
routine_init			=	':=' (Any|block)

name_atom			=	'^'? ID
name_tail_element	=	'::' name_atom | CLASS_MEMBER_USAGE
name		=	(('array'|'sequence') Any 'of')? name_atom (name_tail_element | '<' Any '>' | '[' Any ']')*
names_list	=	name (',' name)*

block		=	('begin'|'case'|'try'|'match') (block|Any)+ 'end'
attribute	=	'[' Any ']'


%%

%parsing recovery
%parsing ignoreundefined
%parsing start file
%parsing ignorecase
%parsing skip COMMENT

%nodes leaf name
%nodes ghost usual_declaration in_interface_declaration in_class_declaration class

%mapping land routine_header in_class_routine interface_routine usual_routine block class_type field property