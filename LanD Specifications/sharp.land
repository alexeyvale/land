DIRECTIVE	: '#' ~[\n\r]*
DIRECTIVE_ELSE	: '#else' (DIRECTIVE_ELSE|.)*? '#endif'
COMMENT		: COMMENT_L|COMMENT_ML
COMMENT_L	: '//' ~[\n\r]*
COMMENT_ML	: '/*' .*? '*/'
STRING		: STRING_STD|STRING_ESC
STRING_SKIP	: '\\"' | '\\\\'
STRING_STD	: '"' (STRING_SKIP|.)*? '"'
STRING_ESC	: '@'('"' ~["]* '"')+
CHAR		: '\'' ('\\\''|'\\\\'|.)*? '\''
ID			: '@'?[_a-zA-Z][_0-9a-zA-Z]*
 
namespace_content	=	opening_directive* (attribute|namespace|class_enum)*
opening_directive	=	('using'|'extern') Any ';'
namespace			=	'namespace' name '{' namespace_content '}'
class_enum			=	name? class_enum_tail
class_enum_tail		=	('class'|'struct'|'interface') name Any '{' class_content_elem* '}' ';'?
					|	'enum' name Any '{' Any '}' ';'?	
					|	'delegate' name before_body? ';'			
class_content_elem	=	attribute | class_enum_tail | name_w_extern class_member_tail
class_member_tail	=	class_enum_tail 
					|	('operator' Any arguments)? before_body? (block initializer? | initializer | ';')
initializer			=	('='|'=>') (Any|block)* ';'
before_body			=	Any ':' (arguments|Any)*
name				=	(ID|arguments) name_tail_element*
name_tail_element	=	ID|arguments|'.'|'?'|'<' name_tail_element* '>'|'[' Any ']'|','|'::'
name_w_extern		=	(ID|arguments|'extern') name_w_extern_tail_element*
name_w_extern_tail_element	=	ID|arguments|'extern'|'.'|'?'|'<' name_tail_element* '>'|'[' Any ']'|','|'::'
attribute			=	'[' attribute_content ']'
attribute_content	=	(Any|attribute)*
block				=	'{' block_content '}'
block_content		=	(Any|block)*
arguments			=	'(' arguments_content ')'
arguments_content	=	(Any|arguments)*

%%

%parsing start namespace_content
%parsing skip COMMENT STRING DIRECTIVE DIRECTIVE_ELSE

%nodes ghost class_enum_tail class_member_tail name_w_extern_tail_element name_tail_element
%nodes land namespace class_enum class_content_elem
%nodes leaf name
