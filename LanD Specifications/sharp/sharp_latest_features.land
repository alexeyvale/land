DIRECTIVE	: '#' ~[\n\r]*

COMMENT		: COMMENT_L|COMMENT_ML
COMMENT_L	: '//' ~[\n\r]*
COMMENT_ML	: '/*' .*? '*/'

STRING		: STRING_STD|STRING_VERB|STRING_INT
STRING_STD	: '"' ('\\"'|'\\\\'|.)*? '"'
STRING_VERB	: '@'('"' (~["]|'""')* '"')+
STRING_INT	: '$"' ('\\"'|'\\\\'|'{{'|STRING_INT_CODE|.)*? ["\n\r]
STRING_INT_CODE : '{' (STRING|CHAR|STRING_INT_CODE|.)*? '}'

CHAR		: '\'' ('\\\''|'\\\\'|.)*? '\''
MODIFIER	: 'fixed'|'public'|'private'|'protected'|'internal'|'static'|'virtual'|'const'|'override'|'new'|'sealed'|'partial'|'unsafe'|'readonly'|'abstract'|'volatile'|'async'
ID			: '@'?[_a-zA-Z\u0430-\u044F\u0410-\u042F][_0-9a-zA-Z\u0430-\u044F\u0410-\u042F]* | '$'ID'$'
 
CURVE_BRACKETED : %left '{' %right '}'
ROUND_BRACKETED : %left '(' %right ')'
SQUARE_BRACKETED : %left '[' %right ']'

 
namespace_content	=	opening_directive*! (namespace|entity)*
opening_directive	=	('using'|'extern') Any ';'
namespace			=	'namespace' name '{' namespace_content '}'

entity =
		(MODIFIER|'extern')*
		(
		 	'enum' name Any '{' Any '}' ';'? 								=> enum	|
			('class'|'struct'|'interface') name Any '{' entity* '}' ';'?	=> class_struct_interface	|
			// 'delegate' (Any|block) ';'										=> delegate |
			// 'event' ... // если разрешить Any после name в строке ниже,
			// чтобы подбирались буферы в unsafe-структурах, как методы будут подбираться индексаторы
			%priority(2) type name Any
			(
		  		arguments Any (init_expression? ';' | block)	=> method	|
		  		init_value? (',' name init_value?)* ';'			=> field	|
		  		(block (init_value ';')? | init_expression ';')	=> property
		  	)
		) | AnyInclude('operator')

init_expression		=	'=>' (Any | %ghost type)+
init_value			=	'=' (Any | %ghost type)+

name_atom	=	ID type_parameters?
name		=	name_atom (('.'|'::') name_atom)*
names_list	=	name (',' name)*

tuple		=	'(' type name? (',' type name?)* ')'
type_atom	=	('ref'? 'unsigned'? ID | tuple) type_parameters? '?'? '*'*
type		=	type_atom ((('.'|'::') type_atom) | ('[' ','* ']'))*!
type_parameters	=	'<' (AnyAvoid(';')|type_parameters)* '>'

arguments	=	'(' Any ')'
attribute	=	'[' Any ']'
block		=	'{' Any '}'

%%

%parsing {
	recovery
	fragment STRING_INT_CODE
	start namespace_content
	skip COMMENT STRING DIRECTIVE
}

%nodes {
	ghost names_list
	leaf name type
}

%mapping {
	land namespace enum class_struct_interface method field property
	priority(5) name
}