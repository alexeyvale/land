DIRECTIVE	: '#' ~[\n\r]*

COMMENT		: COMMENT_L|COMMENT_ML
COMMENT_L	: '//' ~[\n\r]*
COMMENT_ML	: '/*' .*? '*/'

STRING		: STRING_STD|STRING_VERB|STRING_INT
STRING_STD	: '"' ('\\"'|'\\\\'|.)*? '"'
STRING_VERB	: '@'('"' (~["]|'""')* '"')+
STRING_INT	: '$"' ('\\"'|'\\\\'|'{{'|STRING_INT_CODE|.)*? '"' | '$@' ('"' ('""'|'{{'|STRING_INT_CODE|.)*? '"')+
STRING_INT_CODE : '{' (STRING|CHAR|.)*? '}'

CHAR		: '\'' ('\\\''|'\\\\'|.)*? '\''
MODIFIER	: 'ref'|'public'|'private'|'protected'|'internal'|'static'|'new'|'sealed'|'unsafe'|'abstract'|'readonly'|'partial'
ID			: '@'?[_a-zA-Z\u0430-\u044F\u0410-\u042F][_0-9a-zA-Z\u0430-\u044F\u0410-\u042F]*
GENERAL_ATTRIBUTE_START	:	'[' [ \t\r\f\n]*? ('assembly'|'module')
 
CURVE_BRACKETED : %left '{' %right '}'
ROUND_BRACKETED : %left '(' %right ')'
SQUARE_BRACKETED : %left ('['|GENERAL_ATTRIBUTE_START) %right ']'

 
namespace_content	=	(namespace|entity|general_attribute)*
namespace			=	'namespace' name '{' namespace_content '}'

entity =
		entity_attribute* MODIFIER*
		(
			('class'|'struct'|'interface') name Any '{' entity* '}' ';'?	=> class_struct_interface
		) | Any ('{' Any '}' | ';')+

name	=	ID (('.'|'::') ID)*

entity_attribute	=	'[' Any ']'
general_attribute	=	GENERAL_ATTRIBUTE_START Any ']'

%%

%parsing {
	recovery entity
	fragment STRING_INT_CODE
	start namespace_content
	skip COMMENT STRING DIRECTIVE
}

%nodes {
	leaf name
}

%markup {
	land namespace class_struct_interface
	priority(5) name
	exactmatch MODIFIER
}