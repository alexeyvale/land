DIRECTIVE	: '#' ~[\n\r]*
DIRECTIVE_ELSE	: '#else' (DIRECTIVE_ELSE|.)*? '#endif'

COMMENT		: COMMENT_L|COMMENT_ML
COMMENT_L	: '//' ~[\n\r]*
COMMENT_ML	: '/*' .*? '*/'

STRING		: STRING_STD|STRING_VERB|STRING_INT
STRING_STD	: '"' ('\\"'|'\\\\'|.)*? '"'
STRING_VERB	: '@'('"' ~["]* '"')+
STRING_INT	: '$"' ('\\"'|'\\\\'|'{{'|STRING_INT_CODE|.)*? ["\n\r]
STRING_INT_CODE : '{' (STRING|CHAR|STRING_INT_CODE|.)*? '}'

CHAR		: '\'' ('\\\''|'\\\\'|.)*? '\''
ID			: '@'?[_a-zA-Z][_0-9a-zA-Z]*
 
 
curve_bracketed	= %left '{' %right '}'
round_bracketed	= %left '(' %right ')'
square_bracketed = %left '[' %right ']'


namespace_content	=	opening_directive*! (namespace|entity)*
opening_directive	=	('using'|'extern') Any ';'
namespace			=	'namespace' name '{' namespace_content '}'

entity				=	name? 
						(
							'enum' name Any '{' Any '}' ';'?!								=> enum |
							('class'|'interface'|'struct') name Any '{' entity* '}' ';'?!	=> class_struct_interface |
							'operator' Any arguments class_member_tail						=> operator |
							class_member_tail												=> field_property_method
						) | Any
							
class_member_tail	=	block init_value? | init_expression | ';'

init_expression		=	'=>' Any ';'
init_value			=	'=' Any ';'

name				=	(ID|arguments|'extern') name_tail_element*
name_tail_element	=	ID|arguments|'extern'|'.'|'?'|'<' name_tail_element* '>'|'[' Any ']'|','|'::'

arguments	=	'(' Any ')'
block		=	'{' Any '}'

%%

%parsing ignoreundefined
%parsing fragment STRING_INT_CODE
%parsing skip COMMENT STRING DIRECTIVE DIRECTIVE_ELSE
%parsing start namespace_content

%nodes ghost name_tail_element

%mapping land enum operator namespace entity
