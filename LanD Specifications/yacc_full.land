kwToken : '%token'
codeStart : '{'
codeEnd : '}'
ident: 'test'
error: 'test'
kwPCPC: 'test'
kwType: 'test'
kwLeft: 'test'
kwRight: 'test'
kwNonassoc: 'test'
kwStart: 'test'
kwUnion: 'test'
kwLocations: 'test'
kwDefines: 'test'
kwCsTokenFile: 'test'
kwPartial: 'test'
kwShareTokens: 'test'
kwImportTokens: 'test'
kwNamespace: 'test'
kwUsing: 'test'
kwOutput: 'test'
kwScanbasetype: 'test'
kwParsertype: 'test'
kwVisibility: 'test'
kwTokentype: 'test'
kwYYSTYPE: 'test'
kwYYLTYPE: 'test'
filePath: 'test'
kwPrec: 'test'
verbatim: 'test'
litstring: 'test'
number: 'test'
litchar: 'test'
anchoredSymbol: 'test'
kwLbrace: '%{'
kwRbrace: '%}'


Program
    = DefinitionSectionOpt Divider RulesSection EpilogOpt
    | error
    
Divider
    = kwPCPC
    
EpilogOpt
    = kwPCPC CodeBlock
    |
    ;
    
CodeBlock
    = codeStart codeEnd
    |
    | codeStart error
    
DefinitionSectionOpt
    = Definitions
    | /* empty */
    | error

Definitions
    = Definitions Definition
    | Definition
    | error Definition
     
Definition
    = kwLbrace CodeBlock kwRbrace
    | Declaration
    
Declaration
    = kwToken KindOpt TokenList						
    | kwType Kind NtSymbolList
    | kwLeft KindOpt TokenList
    | kwRight KindOpt TokenList
    | kwNonassoc KindOpt TokenList
    | kwStart NtSymbol
    | kwUnion TypeNameOpt UnionTypeConstructor
    | kwLocations
    | kwDefines
	| kwCsTokenFile
    | kwPartial	
	| kwShareTokens 
	| kwImportTokens '=' filePath
	| kwImportTokens '=' litstring			
    | kwImportTokens '=' verbatim
    | kwNamespace DottedName
    | kwUsing DottedName SemiOpt
    | kwOutput '=' filePath
    | kwOutput '=' litstring				
    | kwOutput '=' verbatim
    | kwScanbasetype ident					
    | kwParsertype ident
    | kwVisibility ident				
    | kwTokentype ident
    | kwYYSTYPE TypeConstructor
    | kwYYLTYPE TypeConstructor
    
TypeNameOpt
    = ident	
    |
    
DottedName
    = DottedName '.' ident
    | ident
    
KindOpt
    = Kind 
    | /* empty */
    
Kind
    = '<' ident '>'
    | '<' error '>'
    
TokenList
    = TokenDecl
    | TokenList CommaOpt TokenDecl
    | TokenList BadSeparator
    
TokenDecl
    = ident number
    | ident litstring number
    | ident
    | ident litstring
    | litchar
    
NtSymbolList
    = NtSymbol
    | NtSymbolList CommaOpt NtSymbol          
    | NtSymbolList BadSeparator

NtSymbol
    = ident					  
    | anchoredSymbol
    
TypeConstructor
    = DottedName '[' ']'
    | DottedName '<' TypeArguments '>'
    | DottedName
    
TypeArguments
    = TypeConstructor
    | TypeArguments ',' TypeConstructor
    
UnionTypeConstructor
    = '{' DeclList '}'
    
DeclList
    = OneDecl
    | DeclList OneDecl
    | error
    
OneDecl
    = TypeConstructorSeq ident ';'
    
TypeConstructorSeq
    = TypeConstructor
    | TypeConstructorSeq TypeConstructor
    
CommaOpt
    = ','
    | /* empty */
    
SemiOpt
    = ';'
    | /* empty */
    
BadSeparator
    = ';' | ':' | '<' | '>' | '(' | ')' | '[' | ']' | '{' | '}' 

  /* ================== Rules Section Productions ================== */

RulesSection
    = RulesSection ARule
    | ARule
    | error
    
ARule
    = RuleProlog RightHandSide AlternativesOpt ';'
    
RuleProlog
    = %land anchoredSymbol ':'
    
AlternativesOpt
    = /* skip */
    | AlternativesOpt '|' RightHandSide

RightHandSide
    = /* skip */	
    | RHStermList 
    
RHStermList
    = Symbols 
    | PrecOptAndAction SymbolsOpt 
    | RHStermList PrecOptAndAction SymbolsOpt 
 
SymbolsOpt
    = /* skip */ 
    | Symbols 
    
Symbols
    = SymOrLit
    | Symbols SymOrLit 

SymOrLit
    = ident
    | litchar
    | litstring  
    
PrecOptAndAction
    = Action
    | kwPrec ident Action
    | kwPrec ident
        
Action
    = '{' CodeBlock '}'
    | '{' CodeBlock error 

%%

%parsing start Program
%mapping land ARule RightHandSide

