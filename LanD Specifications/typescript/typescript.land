COMMENT		: COMMENT_L|COMMENT_ML
COMMENT_L	: '//' ~[\n\r]*
COMMENT_ML	: '/*' .*? '*/'

STRING		: STRING_STD|STRING_INT
STRING_STD	: '"' ('\\"'|'\\\\'|.)*? '"'|'\'' ('\\\''|'\\\\'|.)*? '\''
STRING_INT	: '`' ('\\"'|'\\\\'|'{{'|STRING_INT_CODE|.)*? '`'
STRING_INT_CODE : '${' (STRING|CHAR|.)*? '}'

CHAR		: '\'' ('\\\''|'\\\\'|.)*? '\''
MODIFIER	: 'public'|'private'|'export'|'static'
ID			: '$'?[_a-zA-Z\u0430-\u044F\u0410-\u042F][_0-9a-zA-Z\u0430-\u044F\u0410-\u042F]*
 
CURVE_BRACKETED : %left '{' %right '}'
ROUND_BRACKETED : %left '(' %right ')'
SQUARE_BRACKETED : %left '[' %right ']'


file_content = (Any | module)*
module = 'module' name '{' (class | Any)* '}'
class = MODIFIER* ('class'|'interface') name Any '{' (field | method | class | Any)* '}'
field = MODIFIER* name ':' type init_value? ';'
method = MODIFIER* name arguments (':' type)? block

name_atom	=	ID type_parameters?
name		=	name_atom (('.'|'::') name_atom)*
names_list	=	name (',' name)*

type_atom		=	ID type_parameters? '?'? '*'*
type			=	type_atom ((('.'|'::') type_atom) | ('[' Any ']'))*!
type_parameters	=	'<' (AnyAvoid(';') | type_parameters)* '>'

init_value			=	'=' init_part+
init_part			=	Any | type

entity_attribute	=	'[' Any ']'
arguments			=	'(' Any ')'
block				=	'{' Any '}'

%%

%parsing {
	recovery
	fragment STRING_INT_CODE
	start file_content
	skip COMMENT STRING
}

%nodes {
	ghost names_list
	leaf name type
}

%markup {
	land method field class
	priority(5) name
	priority(0.5) arguments
	priority(0.1) init_value
	exactmatch MODIFIER
}