SEMICOLON:	';'
PLUS:	'+'
MINUS:	'-'
STAR:	'*'
DIV:	'/'
PERCENT:	'%'
AMP:	'&'
BITWISE_OR:	'|'
CARET:	'^'
BANG:	'!'
TILDE:	'~'
ASSIGNMENT:	'='
LT:	'<'
GT:	'>'
INTERR:	'?'
DOUBLE_COLON:	'::'
OP_COALESCING:	'??'
OP_INC:	'++'
OP_DEC:	'--'
OP_AND:	'&&'
OP_OR:	'||'
OP_PTR:	'->'
ABSTRACT:	'abstract'
ADD:	'add'
ALIAS:	'alias'
ARGLIST:	'__arglist'
AS:	'as'
ASCENDING:	'ascending'
ASYNC:	'async'
AWAIT:	'await'
BASE:	'base'
BOOL:	'bool'
BREAK:	'break'
BY:	'by'
BYTE:	'byte'
CASE:	'case'
CATCH:	'catch'
CHAR:	'char'
CHECKED:	'checked'
CLASS:	'class'
CONST:	'const'
CONTINUE:	'continue'
DECIMAL:	'decimal'
DEFAULT:	'default'
DELEGATE:	'delegate'
DESCENDING:	'descending'
DO:	'do'
DOUBLE:	'double'
DYNAMIC:	'dynamic'
ELSE:	'else'
ENUM:	'enum'
EQUALS:	'equals'
EVENT:	'event'
EXPLICIT:	'explicit'
EXTERN:	'extern'
FALSE:	'false'
FINALLY:	'finally'
FIXED:	'fixed'
FLOAT:	'float'
FOR:	'for'
FROM:	'from'
GET:	'get'
GOTO:	'goto'
GROUP:	'group'
IF:	'if'
IMPLICIT:	'implicit'
IN:	'in'
INT:	'int'
INTERFACE:	'interface'
INTERNAL:	'internal'
INTO:	'into'
IS:	'is'
JOIN:	'join'
LET:	'let'
LOCK:	'lock'
LONG:	'long'
NAMEOF:	'nameof'
NAMESPACE:	'namespace'
NEW:	'new'
NULL:	'null'
OBJECT:	'object'
ON:	'on'
ORDERBY:	'orderby'
OUT:	'out'
OVERRIDE:	'override'
PARAMS:	'params'
PARTIAL:	'partial'
PRIVATE:	'private'
PROTECTED:	'protected'
PUBLIC:	'public'
READONLY:	'readonly'
REF:	'ref'
REMOVE:	'remove'
RETURN:	'return'
SBYTE:	'sbyte'
SET:	'set'
SELECT:	'select'
SEALED:	'sealed'
SHORT:	'short'
SIZEOF:	'sizeof'
STACKALLOC:	'stackalloc'
STATIC:	'static'
STRING:	'string'
STRUCT:	'struct'
SWITCH:	'switch'
THIS:	'this'
THROW:	'throw'
TRUE:	'true'
TRY:	'try'
TYPEOF:	'typeof'
UINT:	'uint'
ULONG:	'ulong'
UNCHECKED:	'unchecked'
UNSAFE:	'unsafe'
USHORT:	'ushort'
USING:	'using'
VAR:	'var'
VIRTUAL:	'virtual'
VOID:	'void'
VOLATILE:	'volatile'
WHEN:	'when'
WHERE:	'where'
WHILE:	'while'
YIELD:	'yield'
IDENTIFIER:	'@'? IdentifierOrKeyword
LITERAL_ACCESS:	[0-9]+ IntegerTypeSuffix? '.' '@'? IdentifierOrKeyword
INTEGER_LITERAL:	[0-9]+ IntegerTypeSuffix?
HEX_INTEGER_LITERAL:	'0' [xX] HexDigit+ IntegerTypeSuffix?
REAL_LITERAL:	[0-9]* '.' [0-9]+ ExponentPart? [FfDdMm]? | [0-9]+ ([FfDdMm] | ExponentPart [FfDdMm]?)
CHARACTER_LITERAL:	'\'' (~['\\\r\n\u0085\u2028\u2029] | CommonCharacter) '\''
REGULAR_STRING:	'"'  (~["\\\r\n\u0085\u2028\u2029] | CommonCharacter)* '"'
VERBATIUM_STRING:	'@"' (~'"' | '""')* '"'
INTERPOLATED_REGULAR_STRING_START:	'$"'
INTERPOLATED_VERBATIUM_STRING_START:	'$@"'
OPEN_BRACE:	'{'
CLOSE_BRACE:	'}'
OPEN_BRACKET:	'['
CLOSE_BRACKET:	']'
OPEN_PARENS:	'('
CLOSE_PARENS:	')'
DOT:	'.'
COMMA:	','
COLON:	':'
SINGLE_LINE_DOC_COMMENT:	'///' InputCharacter*
DELIMITED_DOC_COMMENT:	'/**' .*? '*/'
SINGLE_LINE_COMMENT:	'//'  InputCharacter*
DELIMITED_COMMENT:	'/*'  .*? '*/'
DOUBLE_CURLY_INSIDE:	'{{'
REGULAR_CHAR_INSIDE:	SimpleEscapeSequence
VERBATIUM_DOUBLE_QUOTE_INSIDE:	'""'
DOUBLE_QUOTE_INSIDE:	'"'
REGULAR_STRING_INSIDE:	~('{' | '\\' | '"')+
VERBATIUM_INSIDE_STRING:	~('{' | '"')+

compilation_unit	=	Any(USING) using_directives* 
	| global_attribute_section* namespace_member_declarations* EOF 
namespace_or_type_name	=	(identifier type_argument_list* | qualified_alias_member) (DOT identifier type_argument_list*)* 
type	=	base_type (INTERR | rank_specifier | STAR)* 
base_type	=	simple_type 
	| class_type 
	| VOID STAR 
simple_type	=	numeric_type 
	| BOOL 
numeric_type	=	integral_type 
	| floating_point_type 
	| DECIMAL 
integral_type	=	SBYTE 
	| BYTE 
	| SHORT 
	| USHORT 
	| INT 
	| UINT 
	| LONG 
	| ULONG 
	| CHAR 
floating_point_type	=	FLOAT 
	| DOUBLE 
class_type	=	namespace_or_type_name 
	| OBJECT 
	| DYNAMIC 
	| STRING 
type_argument_list	=	LT type (COMMA type)* GT 
argument_list	=	argument (COMMA argument)* 
argument	=	(Any COLON)* Any(PLUS, MINUS, BANG, TILDE, OP_INC, OP_DEC, OPEN_PARENS, AWAIT, AMP, STAR, ASYNC, FROM, LITERAL_ACCESS, THIS, BASE, NEW, TYPEOF, CHECKED, UNCHECKED, DEFAULT, DELEGATE, SIZEOF, NAMEOF, IDENTIFIER, ADD, ALIAS, ARGLIST, ASCENDING, BY, DESCENDING, DYNAMIC, EQUALS, GET, GROUP, INTO, JOIN, LET, ON, ORDERBY, PARTIAL, REMOVE, SELECT, SET, VAR, WHEN, WHERE, YIELD, INTEGER_LITERAL, HEX_INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, NULL, BOOL, BYTE, CHAR, DECIMAL, DOUBLE, FLOAT, INT, LONG, OBJECT, SBYTE, SHORT, STRING, UINT, ULONG, USHORT, TRUE, FALSE, REGULAR_STRING, VERBATIUM_STRING, INTERPOLATED_REGULAR_STRING_START, INTERPOLATED_VERBATIUM_STRING_START) expression 
expression	=	assignment 
	| non_assignment_expression 
non_assignment_expression	=	lambda_expression 
	| query_expression 
	| conditional_expression 
assignment	=	unary_expression Any(PLUS, MINUS, BANG, TILDE, OP_INC, OP_DEC, OPEN_PARENS, AWAIT, AMP, STAR, ASYNC, FROM, LITERAL_ACCESS, THIS, BASE, NEW, TYPEOF, CHECKED, UNCHECKED, DEFAULT, DELEGATE, SIZEOF, NAMEOF, IDENTIFIER, ADD, ALIAS, ARGLIST, ASCENDING, BY, DESCENDING, DYNAMIC, EQUALS, GET, GROUP, INTO, JOIN, LET, ON, ORDERBY, PARTIAL, REMOVE, SELECT, SET, VAR, WHEN, WHERE, YIELD, INTEGER_LITERAL, HEX_INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, NULL, BOOL, BYTE, CHAR, DECIMAL, DOUBLE, FLOAT, INT, LONG, OBJECT, SBYTE, SHORT, STRING, UINT, ULONG, USHORT, TRUE, FALSE, REGULAR_STRING, VERBATIUM_STRING, INTERPOLATED_REGULAR_STRING_START, INTERPOLATED_VERBATIUM_STRING_START) expression 
conditional_expression	=	null_coalescing_expression (INTERR expression COLON expression)* 
null_coalescing_expression	=	conditional_or_expression (OP_COALESCING null_coalescing_expression)* 
conditional_or_expression	=	conditional_and_expression (OP_OR conditional_and_expression)* 
conditional_and_expression	=	inclusive_or_expression (OP_AND inclusive_or_expression)* 
inclusive_or_expression	=	exclusive_or_expression (BITWISE_OR exclusive_or_expression)* 
exclusive_or_expression	=	and_expression (CARET and_expression)* 
and_expression	=	equality_expression (AMP equality_expression)* 
equality_expression	=	relational_expression (Any relational_expression)* 
relational_expression	=	shift_expression (Any shift_expression | IS isType | AS type)* 
shift_expression	=	additive_expression (Any additive_expression)* 
additive_expression	=	multiplicative_expression ((PLUS | MINUS) multiplicative_expression)* 
multiplicative_expression	=	unary_expression ((STAR | DIV | PERCENT) unary_expression)* 
unary_expression	=	primary_expression 
	| PLUS unary_expression 
	| MINUS unary_expression 
	| BANG unary_expression 
	| TILDE unary_expression 
	| OP_INC unary_expression 
	| OP_DEC unary_expression 
	| Any CLOSE_PARENS unary_expression 
	| AWAIT unary_expression 
	| AMP unary_expression 
	| STAR unary_expression 
primary_expression	=	primary_expression_start bracket_expression* ((member_access | method_invocation | OP_INC | OP_DEC | OP_PTR identifier) bracket_expression*)* 
primary_expression_start	=	literal 
	| identifier type_argument_list* 
	| OPEN_PARENS expression CLOSE_PARENS 
	| predefined_type 
	| qualified_alias_member 
	| LITERAL_ACCESS 
	| THIS 
	| BASE (DOT identifier type_argument_list* | OPEN_BRACKET expression_list CLOSE_BRACKET) 
	| NEW (type (object_creation_expression | object_or_collection_initializer | OPEN_BRACKET expression_list CLOSE_BRACKET rank_specifier* array_initializer* | Any array_initializer) | anonymous_object_initializer | Any array_initializer) 
	| Any CLOSE_PARENS 
	| CHECKED OPEN_PARENS expression CLOSE_PARENS 
	| UNCHECKED OPEN_PARENS expression CLOSE_PARENS 
	| Any CLOSE_PARENS 
	| Any block 
	| Any CLOSE_PARENS 
	| Any CLOSE_PARENS 
member_access	=	Any identifier type_argument_list* 
bracket_expression	=	Any(IDENTIFIER, ADD, ALIAS, ARGLIST, ASCENDING, ASYNC, AWAIT, BY, DESCENDING, DYNAMIC, EQUALS, FROM, GET, GROUP, INTO, JOIN, LET, NAMEOF, ON, ORDERBY, PARTIAL, REMOVE, SELECT, SET, VAR, WHEN, WHERE, YIELD, PLUS, MINUS, BANG, TILDE, OP_INC, OP_DEC, OPEN_PARENS, AMP, STAR, LITERAL_ACCESS, THIS, BASE, NEW, TYPEOF, CHECKED, UNCHECKED, DEFAULT, DELEGATE, SIZEOF, INTEGER_LITERAL, HEX_INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, NULL, BOOL, BYTE, CHAR, DECIMAL, DOUBLE, FLOAT, INT, LONG, OBJECT, SBYTE, SHORT, STRING, UINT, ULONG, USHORT, TRUE, FALSE, REGULAR_STRING, VERBATIUM_STRING, INTERPOLATED_REGULAR_STRING_START, INTERPOLATED_VERBATIUM_STRING_START) indexer_argument (COMMA indexer_argument)* CLOSE_BRACKET 
indexer_argument	=	(Any COLON)* expression 
predefined_type	=	BOOL 
	| BYTE 
	| CHAR 
	| DECIMAL 
	| DOUBLE 
	| FLOAT 
	| INT 
	| LONG 
	| OBJECT 
	| SBYTE 
	| SHORT 
	| STRING 
	| UINT 
	| ULONG 
	| USHORT 
expression_list	=	expression (COMMA expression)* 
object_or_collection_initializer	=	object_initializer 
	| collection_initializer 
object_initializer	=	OPEN_BRACE (member_initializer_list Any)* CLOSE_BRACE 
member_initializer_list	=	member_initializer (COMMA member_initializer)* 
member_initializer	=	(Any | OPEN_BRACKET expression CLOSE_BRACKET) ASSIGNMENT initializer_value 
initializer_value	=	expression 
	| object_or_collection_initializer 
collection_initializer	=	OPEN_BRACE element_initializer (COMMA element_initializer)* Any CLOSE_BRACE 
element_initializer	=	non_assignment_expression 
	| OPEN_BRACE expression_list CLOSE_BRACE 
anonymous_object_initializer	=	OPEN_BRACE (member_declarator_list Any)* CLOSE_BRACE 
member_declarator_list	=	member_declarator (COMMA member_declarator)* 
member_declarator	=	primary_expression 
	| Any ASSIGNMENT expression 
isType	=	base_type (rank_specifier | STAR)* INTERR* 
lambda_expression	=	Any(ASSIGNMENT) Any(OPEN_BRACE, PLUS, MINUS, BANG, TILDE, OP_INC, OP_DEC, OPEN_PARENS, AWAIT, AMP, STAR, ASYNC, FROM, LITERAL_ACCESS, THIS, BASE, NEW, TYPEOF, CHECKED, UNCHECKED, DEFAULT, DELEGATE, SIZEOF, NAMEOF, IDENTIFIER, ADD, ALIAS, ARGLIST, ASCENDING, BY, DESCENDING, DYNAMIC, EQUALS, GET, GROUP, INTO, JOIN, LET, ON, ORDERBY, PARTIAL, REMOVE, SELECT, SET, VAR, WHEN, WHERE, YIELD, INTEGER_LITERAL, HEX_INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, NULL, BOOL, BYTE, CHAR, DECIMAL, DOUBLE, FLOAT, INT, LONG, OBJECT, SBYTE, SHORT, STRING, UINT, ULONG, USHORT, TRUE, FALSE, REGULAR_STRING, VERBATIUM_STRING, INTERPOLATED_REGULAR_STRING_START, INTERPOLATED_VERBATIUM_STRING_START) anonymous_function_body 
anonymous_function_body	=	expression 
	| block 
query_expression	=	from_clause query_body 
from_clause	=	Any IN expression 
query_body	=	query_body_clause* select_or_group_clause query_continuation* 
query_body_clause	=	from_clause 
	| let_clause 
	| where_clause 
	| combined_join_clause 
	| orderby_clause 
let_clause	=	Any ASSIGNMENT expression 
where_clause	=	WHERE expression 
combined_join_clause	=	Any IN expression ON expression EQUALS expression (INTO identifier)* 
orderby_clause	=	ORDERBY ordering (COMMA ordering)* 
ordering	=	expression Any(COMMA, FROM, LET, WHERE, JOIN, ORDERBY, SELECT, GROUP) 
select_or_group_clause	=	SELECT expression 
	| GROUP expression BY expression 
query_continuation	=	INTO identifier query_body 
statement	=	labeled_Statement 
	| (local_variable_declaration | local_constant_declaration) SEMICOLON 
	| embedded_statement 
labeled_Statement	=	Any COLON statement 
embedded_statement	=	block 
	| simple_embedded_statement 
simple_embedded_statement	=	SEMICOLON 
	| expression SEMICOLON 
	| IF OPEN_PARENS expression CLOSE_PARENS if_body (ELSE if_body)* 
	| SWITCH OPEN_PARENS expression Any switch_section* CLOSE_BRACE 
	| WHILE OPEN_PARENS expression CLOSE_PARENS embedded_statement 
	| DO embedded_statement WHILE OPEN_PARENS expression CLOSE_PARENS SEMICOLON 
	| FOR OPEN_PARENS for_initializer* SEMICOLON expression* SEMICOLON for_iterator* CLOSE_PARENS embedded_statement 
	| Any IN expression CLOSE_PARENS embedded_statement 
	| BREAK SEMICOLON 
	| CONTINUE SEMICOLON 
	| GOTO (Any | CASE expression | DEFAULT) SEMICOLON 
	| RETURN expression* SEMICOLON 
	| THROW expression* SEMICOLON 
	| TRY block (catch_clauses finally_clause* | finally_clause) 
	| CHECKED block 
	| UNCHECKED block 
	| LOCK OPEN_PARENS expression CLOSE_PARENS embedded_statement 
	| USING OPEN_PARENS resource_acquisition CLOSE_PARENS embedded_statement 
	| YIELD (RETURN expression | BREAK) SEMICOLON 
	| UNSAFE block 
	| Any(BOOL, OBJECT, DYNAMIC, STRING, VOID, DECIMAL, IDENTIFIER, ADD, ALIAS, ARGLIST, ASCENDING, ASYNC, AWAIT, BY, DESCENDING, EQUALS, FROM, GET, GROUP, INTO, JOIN, LET, NAMEOF, ON, ORDERBY, PARTIAL, REMOVE, SELECT, SET, VAR, WHEN, WHERE, YIELD, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE) pointer_type fixed_pointer_declarators CLOSE_PARENS embedded_statement 
block	=	OPEN_BRACE statement_list* CLOSE_BRACE 
local_variable_declaration	=	local_variable_type local_variable_declarator (COMMA local_variable_declarator)* 
local_variable_type	=	VAR 
	| type 
local_variable_declarator	=	Any (ASSIGNMENT local_variable_initializer)* 
local_variable_initializer	=	expression 
	| array_initializer 
	| local_variable_initializer_unsafe 
local_constant_declaration	=	CONST type constant_declarators 
if_body	=	block 
	| simple_embedded_statement 
switch_section	=	switch_label+ statement_list 
switch_label	=	CASE expression COLON 
	| DEFAULT COLON 
statement_list	=	statement+ 
for_initializer	=	local_variable_declaration 
	| expression (COMMA expression)* 
for_iterator	=	expression (COMMA expression)* 
catch_clauses	=	specific_catch_clause (specific_catch_clause)* general_catch_clause* 
	| general_catch_clause 
specific_catch_clause	=	Any CLOSE_PARENS exception_filter* block 
general_catch_clause	=	CATCH exception_filter* block 
exception_filter	=	WHEN OPEN_PARENS expression CLOSE_PARENS 
finally_clause	=	FINALLY block 
resource_acquisition	=	local_variable_declaration 
	| expression 
namespace_declaration	=	Any namespace_body Any(NAMESPACE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, OPEN_BRACKET, NEW, PUBLIC, PROTECTED, INTERNAL, PRIVATE, READONLY, VOLATILE, VIRTUAL, SEALED, OVERRIDE, ABSTRACT, STATIC, UNSAFE, EXTERN, PARTIAL, ASYNC, CLOSE_BRACE) 
namespace_body	=	OPEN_BRACE extern_alias_directives* using_directives* namespace_member_declarations* CLOSE_BRACE 
extern_alias_directives	=	extern_alias_directive+ 
extern_alias_directive	=	Any SEMICOLON 
using_directives	=	using_directive+ 
using_directive	=	Any SEMICOLON 
	| Any SEMICOLON 
	| Any SEMICOLON 
namespace_member_declarations	=	namespace_member_declaration+ 
namespace_member_declaration	=	namespace_declaration 
	| type_declaration 
type_declaration	=	attributes* Any(CLASS, STRUCT, INTERFACE, ENUM, DELEGATE) (class_definition | struct_definition | interface_definition | enum_definition | delegate_definition) 
qualified_alias_member	=	Any DOUBLE_COLON identifier type_argument_list* 
type_parameter_list	=	LT type_parameter (COMMA type_parameter)* GT 
type_parameter	=	attributes* Any 
class_body	=	OPEN_BRACE class_member_declarations* CLOSE_BRACE 
class_member_declarations	=	class_member_declaration+ 
class_member_declaration	=	attributes* all_member_modifiers* (common_member_declaration | destructor_definition) 
all_member_modifiers	=	all_member_modifier+ 
all_member_modifier	=	NEW 
	| PUBLIC 
	| PROTECTED 
	| INTERNAL 
	| PRIVATE 
	| READONLY 
	| VOLATILE 
	| VIRTUAL 
	| SEALED 
	| OVERRIDE 
	| ABSTRACT 
	| STATIC 
	| UNSAFE 
	| EXTERN 
	| PARTIAL 
	| ASYNC 
common_member_declaration	=	constant_declaration 
	| typed_member_declaration 
	| event_declaration 
	| conversion_operator_declarator (body | Any expression SEMICOLON) 
	| constructor_declaration 
	| VOID method_declaration 
	| class_definition 
	| struct_definition 
	| interface_definition 
	| enum_definition 
	| delegate_definition 
typed_member_declaration	=	type (Any indexer_declaration | method_declaration | property_declaration | indexer_declaration | operator_declaration | field_declaration) 
constant_declarators	=	constant_declarator (COMMA constant_declarator)* 
constant_declarator	=	Any ASSIGNMENT expression 
variable_declarators	=	variable_declarator (COMMA variable_declarator)* 
variable_declarator	=	Any (ASSIGNMENT variable_initializer)* 
variable_initializer	=	expression 
	| array_initializer 
return_type	=	type 
	| VOID 
method_body	=	block 
	| SEMICOLON 
formal_parameter_list	=	parameter_array 
	| fixed_parameters (COMMA parameter_array)* 
fixed_parameters	=	fixed_parameter (COMMA fixed_parameter)* 
fixed_parameter	=	attributes* Any(VOID, BOOL, OBJECT, DYNAMIC, STRING, DECIMAL, IDENTIFIER, ADD, ALIAS, ARGLIST, ASCENDING, ASYNC, AWAIT, BY, DESCENDING, EQUALS, FROM, GET, GROUP, INTO, JOIN, LET, NAMEOF, ON, ORDERBY, PARTIAL, REMOVE, SELECT, SET, VAR, WHEN, WHERE, YIELD, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE) arg_declaration 
	| ARGLIST 
parameter_array	=	attributes* PARAMS array_type Any(CLOSE_BRACKET, CLOSE_PARENS) 
accessor_declarations	=	attributes* Any (GET accessor_body set_accessor_declaration* | SET accessor_body get_accessor_declaration*) 
get_accessor_declaration	=	attributes* Any accessor_body 
set_accessor_declaration	=	attributes* Any accessor_body 
accessor_body	=	block 
	| SEMICOLON 
event_accessor_declarations	=	attributes* (ADD block remove_accessor_declaration | REMOVE block add_accessor_declaration) 
add_accessor_declaration	=	attributes* ADD block 
remove_accessor_declaration	=	attributes* REMOVE block 
conversion_operator_declarator	=	Any OPEN_PARENS arg_declaration CLOSE_PARENS 
constructor_initializer	=	Any OPEN_PARENS argument_list* CLOSE_PARENS 
body	=	block 
	| SEMICOLON 
struct_body	=	OPEN_BRACE struct_member_declaration* CLOSE_BRACE 
struct_member_declaration	=	attributes* all_member_modifiers* (common_member_declaration | FIXED type fixed_size_buffer_declarator+ SEMICOLON) 
array_type	=	base_type Any(IDENTIFIER, ADD, ALIAS, ARGLIST, ASCENDING, ASYNC, AWAIT, BY, DESCENDING, DYNAMIC, EQUALS, FROM, GET, GROUP, INTO, JOIN, LET, NAMEOF, ON, ORDERBY, PARTIAL, REMOVE, SELECT, SET, VAR, WHEN, WHERE, YIELD) 
rank_specifier	=	Any CLOSE_BRACKET 
array_initializer	=	OPEN_BRACE (variable_initializer (COMMA variable_initializer)* Any)* CLOSE_BRACE 
variant_type_parameter_list	=	LT variant_type_parameter (COMMA variant_type_parameter)* GT 
variant_type_parameter	=	attributes* Any 
interface_body	=	OPEN_BRACE interface_member_declaration* CLOSE_BRACE 
interface_member_declaration	=	attributes* Any(UNSAFE, VOID, EVENT, BOOL, OBJECT, DYNAMIC, STRING, DECIMAL, IDENTIFIER, ADD, ALIAS, ARGLIST, ASCENDING, ASYNC, AWAIT, BY, DESCENDING, EQUALS, FROM, GET, GROUP, INTO, JOIN, LET, NAMEOF, ON, ORDERBY, PARTIAL, REMOVE, SELECT, SET, VAR, WHEN, WHERE, YIELD, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE) (Any type (Any type_parameter_list* OPEN_PARENS formal_parameter_list* Any SEMICOLON | Any OPEN_BRACE interface_accessors CLOSE_BRACE | THIS OPEN_BRACKET formal_parameter_list Any interface_accessors CLOSE_BRACE) | Any type_parameter_list* OPEN_PARENS formal_parameter_list* Any SEMICOLON | Any SEMICOLON) 
interface_accessors	=	attributes* (Any (attributes* Any)* | Any (attributes* Any)*) 
enum_body	=	OPEN_BRACE (enum_member_declaration (COMMA enum_member_declaration)* Any)* CLOSE_BRACE 
enum_member_declaration	=	attributes* Any(ASSIGNMENT, COMMA, CLOSE_BRACE) (ASSIGNMENT expression)* 
global_attribute_section	=	Any COLON attribute_list Any(OPEN_BRACKET, NAMESPACE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, NEW, PUBLIC, PROTECTED, INTERNAL, PRIVATE, READONLY, VOLATILE, VIRTUAL, SEALED, OVERRIDE, ABSTRACT, STATIC, UNSAFE, EXTERN, PARTIAL, ASYNC) 
attributes	=	attribute_section+ 
attribute_section	=	OPEN_BRACKET (Any COLON)* attribute_list Any(OPEN_BRACKET, NEW, PUBLIC, PROTECTED, INTERNAL, PRIVATE, READONLY, VOLATILE, VIRTUAL, SEALED, OVERRIDE, ABSTRACT, STATIC, UNSAFE, EXTERN, PARTIAL, ASYNC, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, IDENTIFIER, ADD, ALIAS, ARGLIST, ASCENDING, AWAIT, BY, DESCENDING, DYNAMIC, EQUALS, FROM, GET, GROUP, INTO, JOIN, LET, NAMEOF, ON, ORDERBY, REMOVE, SELECT, SET, VAR, WHEN, WHERE, YIELD, VOID, TILDE, CONST, EVENT, IMPLICIT, EXPLICIT, BOOL, OBJECT, STRING, DECIMAL, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, REF, OUT, THIS, PARAMS, FIXED, IN) 
attribute_list	=	attribute (COMMA attribute)* 
attribute	=	namespace_or_type_name (OPEN_PARENS (attribute_argument (COMMA attribute_argument)*)* CLOSE_PARENS)* 
attribute_argument	=	(Any COLON)* expression 
pointer_type	=	(Any | class_type) Any(IDENTIFIER, ADD, ALIAS, ARGLIST, ASCENDING, ASYNC, AWAIT, BY, DESCENDING, DYNAMIC, EQUALS, FROM, GET, GROUP, INTO, JOIN, LET, NAMEOF, ON, ORDERBY, PARTIAL, REMOVE, SELECT, SET, VAR, WHEN, WHERE, YIELD) 
	| Any(IDENTIFIER, ADD, ALIAS, ARGLIST, ASCENDING, ASYNC, AWAIT, BY, DESCENDING, DYNAMIC, EQUALS, FROM, GET, GROUP, INTO, JOIN, LET, NAMEOF, ON, ORDERBY, PARTIAL, REMOVE, SELECT, SET, VAR, WHEN, WHERE, YIELD) 
fixed_pointer_declarators	=	fixed_pointer_declarator (COMMA fixed_pointer_declarator)* 
fixed_pointer_declarator	=	Any ASSIGNMENT fixed_pointer_initializer 
fixed_pointer_initializer	=	AMP* expression 
	| local_variable_initializer_unsafe 
fixed_size_buffer_declarator	=	Any OPEN_BRACKET expression CLOSE_BRACKET 
local_variable_initializer_unsafe	=	STACKALLOC type OPEN_BRACKET expression CLOSE_BRACKET 
literal	=	boolean_literal 
	| string_literal 
	| INTEGER_LITERAL 
	| HEX_INTEGER_LITERAL 
	| REAL_LITERAL 
	| CHARACTER_LITERAL 
	| NULL 
boolean_literal	=	TRUE 
	| FALSE 
string_literal	=	interpolated_regular_string 
	| interpolated_verbatium_string 
	| REGULAR_STRING 
	| VERBATIUM_STRING 
interpolated_regular_string	=	INTERPOLATED_REGULAR_STRING_START interpolated_regular_string_part* DOUBLE_QUOTE_INSIDE 
interpolated_verbatium_string	=	INTERPOLATED_VERBATIUM_STRING_START interpolated_verbatium_string_part* DOUBLE_QUOTE_INSIDE 
interpolated_regular_string_part	=	interpolated_string_expression 
	| DOUBLE_CURLY_INSIDE 
	| REGULAR_CHAR_INSIDE 
	| REGULAR_STRING_INSIDE 
interpolated_verbatium_string_part	=	interpolated_string_expression 
	| DOUBLE_CURLY_INSIDE 
	| VERBATIUM_DOUBLE_QUOTE_INSIDE 
	| VERBATIUM_INSIDE_STRING 
interpolated_string_expression	=	expression (COMMA expression)* Any(DOUBLE_CURLY_INSIDE, REGULAR_CHAR_INSIDE, REGULAR_STRING_INSIDE, PLUS, MINUS, BANG, TILDE, OP_INC, OP_DEC, OPEN_PARENS, AWAIT, AMP, STAR, ASYNC, FROM, LITERAL_ACCESS, THIS, BASE, NEW, TYPEOF, CHECKED, UNCHECKED, DEFAULT, DELEGATE, SIZEOF, NAMEOF, IDENTIFIER, ADD, ALIAS, ARGLIST, ASCENDING, BY, DESCENDING, DYNAMIC, EQUALS, GET, GROUP, INTO, JOIN, LET, ON, ORDERBY, PARTIAL, REMOVE, SELECT, SET, VAR, WHEN, WHERE, YIELD, INTEGER_LITERAL, HEX_INTEGER_LITERAL, REAL_LITERAL, CHARACTER_LITERAL, NULL, BOOL, BYTE, CHAR, DECIMAL, DOUBLE, FLOAT, INT, LONG, OBJECT, SBYTE, SHORT, STRING, UINT, ULONG, USHORT, TRUE, FALSE, REGULAR_STRING, VERBATIUM_STRING, INTERPOLATED_REGULAR_STRING_START, INTERPOLATED_VERBATIUM_STRING_START, VERBATIUM_DOUBLE_QUOTE_INSIDE, VERBATIUM_INSIDE_STRING, DOUBLE_QUOTE_INSIDE) 
class_definition	=	CLASS identifier type_parameter_list* Any class_body Any(NAMESPACE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, OPEN_BRACKET, NEW, PUBLIC, PROTECTED, INTERNAL, PRIVATE, READONLY, VOLATILE, VIRTUAL, SEALED, OVERRIDE, ABSTRACT, STATIC, UNSAFE, EXTERN, PARTIAL, ASYNC, VOID, TILDE, CONST, EVENT, IMPLICIT, EXPLICIT, IDENTIFIER, ADD, ALIAS, ARGLIST, ASCENDING, AWAIT, BY, DESCENDING, DYNAMIC, EQUALS, FROM, GET, GROUP, INTO, JOIN, LET, NAMEOF, ON, ORDERBY, REMOVE, SELECT, SET, VAR, WHEN, WHERE, YIELD, BOOL, OBJECT, STRING, DECIMAL, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, FIXED, CLOSE_BRACE) 
struct_definition	=	STRUCT identifier type_parameter_list* Any struct_body Any(NAMESPACE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, OPEN_BRACKET, NEW, PUBLIC, PROTECTED, INTERNAL, PRIVATE, READONLY, VOLATILE, VIRTUAL, SEALED, OVERRIDE, ABSTRACT, STATIC, UNSAFE, EXTERN, PARTIAL, ASYNC, VOID, TILDE, CONST, EVENT, IMPLICIT, EXPLICIT, IDENTIFIER, ADD, ALIAS, ARGLIST, ASCENDING, AWAIT, BY, DESCENDING, DYNAMIC, EQUALS, FROM, GET, GROUP, INTO, JOIN, LET, NAMEOF, ON, ORDERBY, REMOVE, SELECT, SET, VAR, WHEN, WHERE, YIELD, BOOL, OBJECT, STRING, DECIMAL, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, FIXED, CLOSE_BRACE) 
interface_definition	=	INTERFACE identifier variant_type_parameter_list* Any interface_body Any(NAMESPACE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, OPEN_BRACKET, NEW, PUBLIC, PROTECTED, INTERNAL, PRIVATE, READONLY, VOLATILE, VIRTUAL, SEALED, OVERRIDE, ABSTRACT, STATIC, UNSAFE, EXTERN, PARTIAL, ASYNC, VOID, TILDE, CONST, EVENT, IMPLICIT, EXPLICIT, IDENTIFIER, ADD, ALIAS, ARGLIST, ASCENDING, AWAIT, BY, DESCENDING, DYNAMIC, EQUALS, FROM, GET, GROUP, INTO, JOIN, LET, NAMEOF, ON, ORDERBY, REMOVE, SELECT, SET, VAR, WHEN, WHERE, YIELD, BOOL, OBJECT, STRING, DECIMAL, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, FIXED, CLOSE_BRACE) 
enum_definition	=	Any enum_body Any(NAMESPACE, CLASS, STRUCT, INTERFACE, ENUM, DELEGATE, OPEN_BRACKET, NEW, PUBLIC, PROTECTED, INTERNAL, PRIVATE, READONLY, VOLATILE, VIRTUAL, SEALED, OVERRIDE, ABSTRACT, STATIC, UNSAFE, EXTERN, PARTIAL, ASYNC, VOID, TILDE, CONST, EVENT, IMPLICIT, EXPLICIT, IDENTIFIER, ADD, ALIAS, ARGLIST, ASCENDING, AWAIT, BY, DESCENDING, DYNAMIC, EQUALS, FROM, GET, GROUP, INTO, JOIN, LET, NAMEOF, ON, ORDERBY, REMOVE, SELECT, SET, VAR, WHEN, WHERE, YIELD, BOOL, OBJECT, STRING, DECIMAL, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE, FIXED, CLOSE_BRACE) 
delegate_definition	=	DELEGATE return_type Any variant_type_parameter_list* OPEN_PARENS formal_parameter_list* Any SEMICOLON 
event_declaration	=	EVENT type (variable_declarators SEMICOLON | Any OPEN_BRACE event_accessor_declarations CLOSE_BRACE) 
field_declaration	=	variable_declarators SEMICOLON 
property_declaration	=	Any(OPEN_BRACE, ASSIGNMENT) (OPEN_BRACE accessor_declarations CLOSE_BRACE (ASSIGNMENT variable_initializer SEMICOLON)* | Any expression SEMICOLON) 
constant_declaration	=	CONST type constant_declarators SEMICOLON 
indexer_declaration	=	THIS OPEN_BRACKET formal_parameter_list CLOSE_BRACKET (OPEN_BRACE accessor_declarations CLOSE_BRACE | Any expression SEMICOLON) 
destructor_definition	=	Any body 
constructor_declaration	=	Any OPEN_PARENS formal_parameter_list* CLOSE_PARENS constructor_initializer* body 
method_declaration	=	method_member_name type_parameter_list* OPEN_PARENS formal_parameter_list* Any(OPEN_BRACE, SEMICOLON, ASSIGNMENT) (method_body | Any expression SEMICOLON) 
method_member_name	=	Any (type_argument_list* DOT Any)* 
operator_declaration	=	Any(VOID, BOOL, OBJECT, DYNAMIC, STRING, DECIMAL, IDENTIFIER, ADD, ALIAS, ARGLIST, ASCENDING, ASYNC, AWAIT, BY, DESCENDING, EQUALS, FROM, GET, GROUP, INTO, JOIN, LET, NAMEOF, ON, ORDERBY, PARTIAL, REMOVE, SELECT, SET, VAR, WHEN, WHERE, YIELD, SBYTE, BYTE, SHORT, USHORT, INT, UINT, LONG, ULONG, CHAR, FLOAT, DOUBLE) arg_declaration (COMMA arg_declaration)* CLOSE_PARENS (body | Any expression SEMICOLON) 
arg_declaration	=	type Any(ASSIGNMENT, COMMA, CLOSE_PARENS, CLOSE_BRACKET) (ASSIGNMENT expression)* 
method_invocation	=	OPEN_PARENS argument_list* CLOSE_PARENS 
object_creation_expression	=	OPEN_PARENS argument_list* CLOSE_PARENS object_or_collection_initializer* 
identifier	=	IDENTIFIER 
	| ADD 
	| ALIAS 
	| ARGLIST 
	| ASCENDING 
	| ASYNC 
	| AWAIT 
	| BY 
	| DESCENDING 
	| DYNAMIC 
	| EQUALS 
	| FROM 
	| GET 
	| GROUP 
	| INTO 
	| JOIN 
	| LET 
	| NAMEOF 
	| ON 
	| ORDERBY 
	| PARTIAL 
	| REMOVE 
	| SELECT 
	| SET 
	| VAR 
	| WHEN 
	| WHERE 
	| YIELD 

%%
%parsing start Any%parsing skip SINGLE_LINE_DOC_COMMENT DELIMITED_DOC_COMMENT SINGLE_LINE_COMMENT DELIMITED_COMMENT
%mapping land class_definition struct_definition using_directive
