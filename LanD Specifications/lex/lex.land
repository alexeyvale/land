COMMENT		: COMMENT_L|COMMENT_ML
COMMENT_L	: '//' ~[\n\r]*
COMMENT_ML	: '/*' .*? '*/'
STRING_ESC	: '@'('"' ~["]* '"')+

ID	: [a-zA-Z0-9_]+

REGEX_REPETITION : '{'[0-9]+(','[0-9]*)?'}'
REGEX_CLASS : '{'ID'}'
REGEX_PREDEFINED_CHAR_CLASS	: '['':'ID':'']'
REGEX_CHAR_CLASS : '['(~[[\]\r\n]|REGEX_PREDEFINED_CHAR_CLASS)+']'
REGEX_ESCAPE_CHAR : '\\'~[\r\n]
REGEX_LITERAL_STR : '"'(~["]|'\\"')*'"'
REGEX_SET_OP : '{-}'|'{+}'|'{*}'
REGEX_ITEM :  REGEX_REPETITION|REGEX_CLASS|REGEX_PREDEFINED_CHAR_CLASS|REGEX_CHAR_CLASS|REGEX_ESCAPE_CHAR|REGEX_LITERAL_STR|REGEX_SET_OP|'<<EOF>>'

LINE_END	: '\r'?'\n'
SPACE		: [\r\t ]

CURVE_BRACKETED : %left '{' %right '}'

file	=	declarations '%%' rules '%%' Any

declarations		=	(state_declaration|category_declaration|code_or_empty|other_declaration)*
state_declaration	=	('%x'|'%s') id_list LINE_END
other_declaration	=	'%' Any LINE_END
category_declaration	=	ID regex_from_declaration LINE_END
regex_from_declaration	=	Any

rules			=	(group | rule | code_or_empty)*
states			=	'<' (id_list|'*') '>'
id_list			=	ID (','? ID)*
group			=	states? '{' (group|rule)* '}'
rule			=	states? regex_list_from_rule context_code 
regex_from_rule	=	(REGEX_ITEM | Any)+
regex_list_from_rule	=	regex_from_rule ((SPACE|LINE_END)+ ('|' regex_from_rule)?)*

context_code	=	'{' AnyInclude('\'{\'', '\'}\'') '}' | Any LINE_END
code_or_empty	=	'%{' Any '%}' | SPACE+ (Any LINE_END | LINE_END)

%%

%parsing {
	start file
	skip COMMENT LINE_END SPACE
	fragment REGEX_REPETITION REGEX_CLASS REGEX_PREDEFINED_CHAR_CLASS REGEX_CHAR_CLASS REGEX_ESCAPE_CHAR REGEX_LITERAL_STR REGEX_SET_OP
}

%nodes {
	leaf regex_from_declaration regex_from_rule states
	ghost regex_list_from_rule
	void LINE_END SPACE code_or_empty
}

%markup {
	land group rule
	priority(0) '<' '>' ','
}
