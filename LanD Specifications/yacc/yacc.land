COMMENT		: COMMENT_L|COMMENT_ML
COMMENT_L	: '//' ~[\n\r]*
COMMENT_ML	: '/*' .*? '*/'
STRING		: STRING_STD|STRING_ESC
STRING_SKIP	: '\\"' | '\\\\'
STRING_STD	: '"' (STRING_SKIP|.)*? '"'
STRING_ESC	: '@'('"' ~["]* '"')+
LITERAL		: '\'' ('\\\''|'\\\\'|.)*? '\''
DECLARATION_CODE : '%{' (STRING|COMMENT|.)*? '%}'

RULE_HEADER : %linestart ID
ID : [_a-zA-Z][_0-9a-zA-Z]*
DECLARATION_NAME : '%'ID

grammar 		=	declaration* '%%' (rule | Any)* grammar_ending
grammar_ending	=	('%%' Any)?
declaration		=	symbol_declaration | other_declaration | Any
symbol_declaration = ('%token' | '%left' | '%nonassoc' | '%right' | '%type') ('<' ID '>')? (ID|LITERAL)+
other_declaration = DECLARATION_NAME Any
rule			=	RULE_HEADER ':' alternative ('|' alternative)* ';'
alternative		=	alternative_element*
alternative_element	=	ID | block | LITERAL | '%prec'
block			=	'{' (AnyAvoid(RULE_HEADER)|block)+ '}'

%%

%parsing {
	ignoreundefined
	start grammar
	skip COMMENT STRING DECLARATION_CODE
	recovery
}

%nodes ghost declaration
%nodes leaf alternative_element

%mapping land symbol_declaration rule alternative alternative_element
%mapping priority(0) ':' ';'