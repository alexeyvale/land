DIRECTIVE	: '#' ~[\n\r]*

COMMENT		: COMMENT_L|COMMENT_ML
COMMENT_L	: '//' ~[\n\r]*
COMMENT_ML	: '/*' .*? '*/'

STRING		: STRING_STD
STRING_STD	: '"' ('\\"'|'\\\\'|.)*? '"'
STRING_INT_CODE : '{' (STRING|CHAR|STRING_INT_CODE|.)*? '}'

CHAR		: '\'' ('\\\''|'\\\\'|.)*? '\''
MODIFIER	: 'transient'|'strictfp'|'native'|'public'|'private'|'protected'|'static'|'const'|'new'|'final'|'synchronized'|'abstract'|'volatile'|'default'
ID			: [_$a-zA-Z][_$0-9a-zA-Z]*
 
CURVE_BRACKETED : %left '{' %right '}'
ROUND_BRACKETED : %left '(' %right ')'
SQUARE_BRACKETED : %left '[' %right ']'

 
file_content	=	entity*

entity	=	
	(annotation|MODIFIER)*
	(
	 	'enum' name Any '{' Any '}' ';'?					=> enum				|
		('class'|'interface') name Any '{' entity* '}' ';'?	=> class_interface	|
		type_parameter? %priority(2) type name
		(
	  		arguments Any (';' | block)									=> method	|
	  		('['']')* init_value? (',' name ('['']')* init_value?)* ';'	=> field
	  	)
	) | AnyInclude('@interface', 'import', 'package') (block | ';')+
	
init_value	=	'=' init_part+
init_part	=	Any | type

name_atom	=	(ID | MODIFIER) type_parameter?
name		=	name_atom (('.'|'::') name_atom)*
names_list	=	name (',' name)*

type_atom	=	('unsigned'? ID) type_parameter? '*'*
type		=	type_atom ((('.'|'::') type_atom) | '['']')*!
type_parameter	=	'<' (AnyAvoid(';') | type_parameter)* '>'

arguments	=	'(' Any ')'
annotation	=	'@' name Any
block		=	'{' Any '}'

%%

%parsing {
	recovery entity init_part
	fragment STRING_INT_CODE
	start file_content
	skip COMMENT STRING DIRECTIVE
}

%nodes {
	ghost names_list
	leaf name type type_parameter
}

%mapping {
	land enum class_interface method field
	priority(3) name
}
 