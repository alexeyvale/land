DIRECTIVE	: '#' ~[\n\r]*

COMMENT		: COMMENT_L|COMMENT_ML
COMMENT_L	: '//' ~[\n\r]*
COMMENT_ML	: '/*' .*? '*/'

STRING		: STRING_STD
STRING_STD	: '"' ('\\"'|'\\\\'|.)*? '"'
STRING_INT_CODE : '{' (STRING|CHAR|STRING_INT_CODE|.)*? '}'

CHAR		: '\'' ('\\\''|'\\\\'|.)*? '\''
KEYWORD	: 'transient'|'strictfp'|'native'|'public'|'private'|'protected'|'static'|'const'|'new'|'final'|'synchronized'|'abstract'|'volatile'|'default'
ID			: [_$a-zA-Z][_$0-9a-zA-Z]*

ANY_TRIGGER_TOKEN	: '@interface'
 
CURVE_BRACKETED : %left '{' %right '}'
ROUND_BRACKETED : %left '(' %right ')'
SQUARE_BRACKETED : %left '[' %right ']'

 
file_content	=	entity*

entity	=	enum | class_interface | method | field | water_entity

enum			=	common_beginning 'enum' name Any block ';'?
class_interface	=	common_beginning ('class'|'interface') name Any '{' entity* '}' ';'?
method			=	common_beginning type_parameter? type name arguments Any (';' | block)	
field			=	common_beginning type_parameter? type name ('['']')* init_value? (',' name ('['']')* init_value?)* ';'
water_entity	=	AnyInclude('@interface', 'import', 'package') (block | ';')+

common_beginning	=	(annotation|KEYWORD)*
init_value			=	'=' init_part+
init_part			=	Any | type

name_atom	=	(ID | KEYWORD) type_parameter?
name		=	name_atom (('.'|'::') name_atom)*
names_list	=	name (',' name)*

type_atom	=	('unsigned'? ID) type_parameter? '*'*
type		=	type_atom ((('.'|'::') type_atom) | '['']')*!
type_parameter	=	'<' (AnyAvoid(';') | name)* '>'

arguments	=	'(' Any ')'
annotation	=	'@' name arguments?
block		=	'{' Any '}'

%%

%parsing {
	recovery entity init_part
	fragment STRING_INT_CODE
	start file_content
	skip COMMENT STRING DIRECTIVE
}

%nodes {
	ghost names_list common_beginning entity
	leaf name type type_parameter
}

%customblock {
	start("/// land start")
	end("/// land end")
	basetoken COMMENT
}

%mapping {
	land enum class_interface method field
	priority(3) name
}
 