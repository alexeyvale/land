COMMENT		: '//' ~[\n\r]* | '/*' .*? '*/'
STRING		: '"' ('\\"'|'\\\\'|.)*? '"'
CHAR		: '\'' ('\\\''|'\\\\'|.)*? '\''

MODIFIER	: 'transient'|'strictfp'|'native'|'public'|'private'|'protected'|'static'|'final'|'synchronized'|'abstract'|'volatile'|'default'
ID			: [_$a-zA-Z][_$0-9a-zA-Z]*
 
CURVE_BRACKETED : %left '{' %right '}'
ROUND_BRACKETED : %left '(' %right ')'
SQUARE_BRACKETED : %left '[' %right ']'

 
file_content	=	entity*
entity	=	enum | class_interface | method | field_declaration | water_entity

enum			=	common_beginning 'enum' name Any block ';'?
class_interface	=	common_beginning ('class'|'interface') name Any '{' entity* '}' ';'?
method			=	common_beginning type name arguments Any (';' | block)	
field_declaration	=	common_beginning type field (',' field)* ';'
field			=	name init_value?
water_entity	=	AnyInclude('@interface', 'import', 'package') (block | ';')+

common_beginning	=	(annotation|MODIFIER)*
init_value			=	'=' init_part+
init_part			=	Any | type_parameter

name	=	name_type
type	=	name_type
name_type_atom	=	type_parameter? ID type_parameter?
name_type	=	name_type_atom ((('.'|'::') name_type_atom) | '['']')*
type_parameter	=	'<' (AnyAvoid(';') | type_parameter)* '>'

arguments	=	'(' Any ')'
annotation	=	'@' name arguments?
block		=	'{' Any '}'

%%

%parsing {
	recovery entity init_part
	start file_content
	skip COMMENT STRING
}

%nodes {
	ghost common_beginning entity
	leaf name type type_parameter
}

%customblock {
	start("/// land start")
	end("/// land end")
	basetoken COMMENT
}

%markup {
	land enum class_interface method field
	priority(3) name
}
 