// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-QMIGNCH
// DateTime: 08.03.2020 19:28:46
// UserName: Алексей
// Input file <./Land.y - 08.03.2020 19:28:45>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using System.Linq;
using Land.Core;

namespace Land.Core.Specification.Parsing
{
public enum Tokens {error=2,EOF=3,OR=4,ARGS_LROUND_BRACKET=5,LROUND_BRACKET=6,
    RROUND_BRACKET=7,LCURVE_BRACKET=8,RCURVE_BRACKET=9,COLON=10,COMMA=11,PROC=12,
    EQUALS=13,MINUS=14,PLUS=15,EXCLAMATION=16,DOT=17,ARROW=18,
    LEFT=19,RIGHT=20,INSIDE=21,LINESTART=22,REGEX=23,NAMED=24,
    STRING=25,ID=26,ENTITY_NAME=27,OPTION_NAME=28,CATEGORY_NAME=29,POSITION=30,
    RNUM=31,OPTIONAL=32,ZERO_OR_MORE=33,ONE_OR_MORE=34,PAIR_SECTION_TYPE=35,IS_LIST_NODE=36,
    PREC_NONEMPTY=37};

public struct ValueType
{ 
	public int intVal; 
	public double doubleVal;
	public Quantifier quantVal;
	public bool boolVal;
	public string strVal;
	public Entry entryVal;
	public Alternative altVal;
	public ArgumentGroup argGroupVal;
	public dynamic dynamicVal;
	public OptionDeclaration optDeclVal;
	public PairSectionType pairSectionTypeVal;
	
	public List<dynamic> dynamicList;
	public List<OptionDeclaration> optionsList;
	public List<string> strList;	
	public List<Alternative> altList;
	
	public HashSet<string> strSet;
	
	public Dictionary<PairSectionType, HashSet<string>> pairSectionsDict;
	public Dictionary<string, Dictionary<string, List<dynamic>>> optionGroupsDict; 
	public Dictionary<string, List<dynamic>> optionsDict;
	public Tuple<string, List<dynamic>> optionTuple;
	
	// Информация о количестве повторений
	public Nullable<Quantifier> optQuantVal;
	public Nullable<double> optDoubleVal;
}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,Land.Core.SegmentLocation> {
  private Land.Core.SegmentLocation __yylloc = new Land.Core.SegmentLocation();
  public override Land.Core.SegmentLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public Land.Core.SegmentLocation yylloc;
  public ScanObj( int t, ValueType val, Land.Core.SegmentLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, Land.Core.SegmentLocation>
{
  // Verbatim content from ./Land.y - 08.03.2020 19:28:45
    public Parser(AbstractScanner<ValueType, SegmentLocation> scanner) : base(scanner) { }
    
    public Grammar ConstructedGrammar;
    public List<Message> Log = new List<Message>();
    
    private HashSet<string> Aliases = new HashSet<string>();
  // End verbatim content from ./Land.y - 08.03.2020 19:28:45

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[68];
  private static State[] states = new State[98];
  private static string[] nonTerms = new string[] {
      "lp_description", "quantifier", "entry_core", "group", "optional_alias", 
      "grammar_entity", "entry", "grammar_entities_list", "body", "prec_nonempty", 
      "opt_linestart", "argument_group", "argument", "alternative", "option", 
      "pair_sections", "opt_args", "args", "context_opt_args", "entry_args", 
      "context_option_groups", "context_options", "option_or_block", "options", 
      "context_option", "pair_section_element_group", "pair_section_element", 
      "$accept", "structure", "options_section", "element", "terminal", "nonterminal", 
      "pair", "category_block", };

  static Parser() {
    states[0] = new State(new int[]{27,37},new int[]{-1,1,-29,3,-31,97,-32,36,-33,95,-34,96});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{12,4,27,37},new int[]{-31,35,-32,36,-33,95,-34,96});
    states[4] = new State(new int[]{29,8,3,-46},new int[]{-30,5,-35,6});
    states[5] = new State(-2);
    states[6] = new State(new int[]{29,8,3,-46},new int[]{-30,7,-35,6});
    states[7] = new State(-47);
    states[8] = new State(new int[]{28,11,8,31},new int[]{-23,9,-15,10});
    states[9] = new State(-48);
    states[10] = new State(-49);
    states[11] = new State(new int[]{6,17,26,-55,23,-55,29,-55,3,-55,9,-55,28,-55},new int[]{-17,12});
    states[12] = new State(-65,new int[]{-8,13});
    states[13] = new State(new int[]{26,15,23,16,29,-53,3,-53,9,-53,28,-53},new int[]{-6,14});
    states[14] = new State(-64);
    states[15] = new State(-66);
    states[16] = new State(-67);
    states[17] = new State(new int[]{31,22,23,23,25,24,26,25},new int[]{-18,18,-13,29,-12,30});
    states[18] = new State(new int[]{7,19,11,20});
    states[19] = new State(-54);
    states[20] = new State(new int[]{31,22,23,23,25,24,26,25},new int[]{-13,21,-12,30});
    states[21] = new State(-56);
    states[22] = new State(-58);
    states[23] = new State(-59);
    states[24] = new State(-60);
    states[25] = new State(new int[]{6,26,7,-61,11,-61});
    states[26] = new State(new int[]{31,22,23,23,25,24,26,25},new int[]{-18,27,-13,29,-12,30});
    states[27] = new State(new int[]{7,28,11,20});
    states[28] = new State(-63);
    states[29] = new State(-57);
    states[30] = new State(-62);
    states[31] = new State(-51,new int[]{-24,32});
    states[32] = new State(new int[]{9,33,28,11},new int[]{-15,34});
    states[33] = new State(-50);
    states[34] = new State(-52);
    states[35] = new State(-3);
    states[36] = new State(-5);
    states[37] = new State(new int[]{10,38,13,55});
    states[38] = new State(new int[]{22,52,35,53,23,-10},new int[]{-11,39,-16,41});
    states[39] = new State(new int[]{23,40});
    states[40] = new State(-8);
    states[41] = new State(new int[]{35,42,12,-11,27,-11});
    states[42] = new State(new int[]{26,44,23,45,6,46},new int[]{-27,43});
    states[43] = new State(-13);
    states[44] = new State(-14);
    states[45] = new State(-15);
    states[46] = new State(new int[]{26,44,23,45,6,46},new int[]{-26,47,-27,51});
    states[47] = new State(new int[]{7,48,4,49});
    states[48] = new State(-16);
    states[49] = new State(new int[]{26,44,23,45,6,46},new int[]{-27,50});
    states[50] = new State(-18);
    states[51] = new State(-17);
    states[52] = new State(-9);
    states[53] = new State(new int[]{26,44,23,45,6,46},new int[]{-27,54});
    states[54] = new State(-12);
    states[55] = new State(-23,new int[]{-9,56,-14,93});
    states[56] = new State(new int[]{4,57,12,-19,27,-19});
    states[57] = new State(-23,new int[]{-14,58});
    states[58] = new State(new int[]{18,61,4,-25,12,-25,27,-25,7,-25,29,-30,23,-30,26,-30,6,-30},new int[]{-5,59,-7,60,-21,63});
    states[59] = new State(-20);
    states[60] = new State(-22);
    states[61] = new State(new int[]{26,62});
    states[62] = new State(-24);
    states[63] = new State(new int[]{29,75,23,87,26,88,6,90},new int[]{-3,64,-4,89});
    states[64] = new State(new int[]{5,72,32,-28,33,-28,34,-28,37,-28,18,-28,29,-28,23,-28,26,-28,6,-28,4,-28,12,-28,27,-28,7,-28},new int[]{-20,65});
    states[65] = new State(new int[]{32,69,33,70,34,71,37,-41,18,-41,29,-41,23,-41,26,-41,6,-41,4,-41,12,-41,27,-41,7,-41},new int[]{-2,66});
    states[66] = new State(new int[]{37,68,18,-37,29,-37,23,-37,26,-37,6,-37,4,-37,12,-37,27,-37,7,-37},new int[]{-10,67});
    states[67] = new State(-26);
    states[68] = new State(-36);
    states[69] = new State(-38);
    states[70] = new State(-39);
    states[71] = new State(-40);
    states[72] = new State(new int[]{31,22,23,23,25,24,26,25},new int[]{-18,73,-13,29,-12,30});
    states[73] = new State(new int[]{7,74,11,20});
    states[74] = new State(-27);
    states[75] = new State(new int[]{5,76});
    states[76] = new State(new int[]{26,81},new int[]{-22,77,-25,86});
    states[77] = new State(new int[]{7,78,11,79});
    states[78] = new State(-29);
    states[79] = new State(new int[]{26,81},new int[]{-25,80});
    states[80] = new State(-31);
    states[81] = new State(new int[]{5,83,7,-35,11,-35},new int[]{-19,82});
    states[82] = new State(-33);
    states[83] = new State(new int[]{31,22,23,23,25,24,26,25},new int[]{-18,84,-13,29,-12,30});
    states[84] = new State(new int[]{7,85,11,20});
    states[85] = new State(-34);
    states[86] = new State(-32);
    states[87] = new State(-42);
    states[88] = new State(-43);
    states[89] = new State(-44);
    states[90] = new State(-23,new int[]{-9,91,-14,93});
    states[91] = new State(new int[]{7,92,4,57});
    states[92] = new State(-45);
    states[93] = new State(new int[]{18,61,4,-25,12,-25,27,-25,7,-25,29,-30,23,-30,26,-30,6,-30},new int[]{-5,94,-7,60,-21,63});
    states[94] = new State(-21);
    states[95] = new State(-6);
    states[96] = new State(-7);
    states[97] = new State(-4);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-28, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-29,12,-30});
    rules[3] = new Rule(-29, new int[]{-29,-31});
    rules[4] = new Rule(-29, new int[]{-31});
    rules[5] = new Rule(-31, new int[]{-32});
    rules[6] = new Rule(-31, new int[]{-33});
    rules[7] = new Rule(-31, new int[]{-34});
    rules[8] = new Rule(-32, new int[]{27,10,-11,23});
    rules[9] = new Rule(-11, new int[]{22});
    rules[10] = new Rule(-11, new int[]{});
    rules[11] = new Rule(-34, new int[]{27,10,-16});
    rules[12] = new Rule(-16, new int[]{35,-27});
    rules[13] = new Rule(-16, new int[]{-16,35,-27});
    rules[14] = new Rule(-27, new int[]{26});
    rules[15] = new Rule(-27, new int[]{23});
    rules[16] = new Rule(-27, new int[]{6,-26,7});
    rules[17] = new Rule(-26, new int[]{-27});
    rules[18] = new Rule(-26, new int[]{-26,4,-27});
    rules[19] = new Rule(-33, new int[]{27,13,-9});
    rules[20] = new Rule(-9, new int[]{-9,4,-14,-5});
    rules[21] = new Rule(-9, new int[]{-14,-5});
    rules[22] = new Rule(-14, new int[]{-14,-7});
    rules[23] = new Rule(-14, new int[]{});
    rules[24] = new Rule(-5, new int[]{18,26});
    rules[25] = new Rule(-5, new int[]{});
    rules[26] = new Rule(-7, new int[]{-21,-3,-20,-2,-10});
    rules[27] = new Rule(-20, new int[]{5,-18,7});
    rules[28] = new Rule(-20, new int[]{});
    rules[29] = new Rule(-21, new int[]{-21,29,5,-22,7});
    rules[30] = new Rule(-21, new int[]{});
    rules[31] = new Rule(-22, new int[]{-22,11,-25});
    rules[32] = new Rule(-22, new int[]{-25});
    rules[33] = new Rule(-25, new int[]{26,-19});
    rules[34] = new Rule(-19, new int[]{5,-18,7});
    rules[35] = new Rule(-19, new int[]{});
    rules[36] = new Rule(-10, new int[]{37});
    rules[37] = new Rule(-10, new int[]{});
    rules[38] = new Rule(-2, new int[]{32});
    rules[39] = new Rule(-2, new int[]{33});
    rules[40] = new Rule(-2, new int[]{34});
    rules[41] = new Rule(-2, new int[]{});
    rules[42] = new Rule(-3, new int[]{23});
    rules[43] = new Rule(-3, new int[]{26});
    rules[44] = new Rule(-3, new int[]{-4});
    rules[45] = new Rule(-4, new int[]{6,-9,7});
    rules[46] = new Rule(-30, new int[]{});
    rules[47] = new Rule(-30, new int[]{-35,-30});
    rules[48] = new Rule(-35, new int[]{29,-23});
    rules[49] = new Rule(-23, new int[]{-15});
    rules[50] = new Rule(-23, new int[]{8,-24,9});
    rules[51] = new Rule(-24, new int[]{});
    rules[52] = new Rule(-24, new int[]{-24,-15});
    rules[53] = new Rule(-15, new int[]{28,-17,-8});
    rules[54] = new Rule(-17, new int[]{6,-18,7});
    rules[55] = new Rule(-17, new int[]{});
    rules[56] = new Rule(-18, new int[]{-18,11,-13});
    rules[57] = new Rule(-18, new int[]{-13});
    rules[58] = new Rule(-13, new int[]{31});
    rules[59] = new Rule(-13, new int[]{23});
    rules[60] = new Rule(-13, new int[]{25});
    rules[61] = new Rule(-13, new int[]{26});
    rules[62] = new Rule(-13, new int[]{-12});
    rules[63] = new Rule(-12, new int[]{26,6,-18,7});
    rules[64] = new Rule(-8, new int[]{-8,-6});
    rules[65] = new Rule(-8, new int[]{});
    rules[66] = new Rule(-6, new int[]{26});
    rules[67] = new Rule(-6, new int[]{23});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // lp_description -> structure, PROC, options_section
{ 
			ConstructedGrammar.PostProcessing();
			Log.AddRange(ConstructedGrammar.CheckValidity()); 
		}
        break;
      case 8: // terminal -> ENTITY_NAME, COLON, opt_linestart, REGEX
{ 
			SafeGrammarAction(() => { 
				ConstructedGrammar.DeclareTerminal(ValueStack[ValueStack.Depth-4].strVal, ValueStack[ValueStack.Depth-1].strVal, ValueStack[ValueStack.Depth-2].boolVal);
				ConstructedGrammar.AddLocation(ValueStack[ValueStack.Depth-4].strVal, LocationStack[LocationStack.Depth-4].Start);
			}, LocationStack[LocationStack.Depth-4].Start);
		}
        break;
      case 9: // opt_linestart -> LINESTART
{ CurrentSemanticValue.boolVal = true; }
        break;
      case 10: // opt_linestart -> /* empty */
{ CurrentSemanticValue.boolVal = false; }
        break;
      case 11: // pair -> ENTITY_NAME, COLON, pair_sections
{
			SafeGrammarAction(() => { 
				ConstructedGrammar.DeclarePair(ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].pairSectionsDict);
				ConstructedGrammar.AddLocation(ValueStack[ValueStack.Depth-3].strVal, LocationStack[LocationStack.Depth-3].Start);
			}, LocationStack[LocationStack.Depth-3].Start);
		}
        break;
      case 12: // pair_sections -> PAIR_SECTION_TYPE, pair_section_element
{ 
			CurrentSemanticValue.pairSectionsDict = new Dictionary<PairSectionType, HashSet<string>>();
			CurrentSemanticValue.pairSectionsDict[ValueStack[ValueStack.Depth-2].pairSectionTypeVal] = ValueStack[ValueStack.Depth-1].strSet;
		}
        break;
      case 13: // pair_sections -> pair_sections, PAIR_SECTION_TYPE, pair_section_element
{ 
			CurrentSemanticValue.pairSectionsDict = ValueStack[ValueStack.Depth-3].pairSectionsDict;
			CurrentSemanticValue.pairSectionsDict[ValueStack[ValueStack.Depth-2].pairSectionTypeVal] = ValueStack[ValueStack.Depth-1].strSet;
		}
        break;
      case 14: // pair_section_element -> ID
{ CurrentSemanticValue.strSet = new HashSet<string>() { ValueStack[ValueStack.Depth-1].strVal }; }
        break;
      case 15: // pair_section_element -> REGEX
{ 	
			var generated = ConstructedGrammar.GenerateTerminal(ValueStack[ValueStack.Depth-1].strVal);
			ConstructedGrammar.AddLocation(generated, LocationStack[LocationStack.Depth-1].Start);
			CurrentSemanticValue.strSet = new HashSet<string>() { generated };
		}
        break;
      case 16: // pair_section_element -> LROUND_BRACKET, pair_section_element_group, 
               //                         RROUND_BRACKET
{ CurrentSemanticValue.strSet = ValueStack[ValueStack.Depth-2].strSet; }
        break;
      case 17: // pair_section_element_group -> pair_section_element
{ CurrentSemanticValue.strSet = ValueStack[ValueStack.Depth-1].strSet; }
        break;
      case 18: // pair_section_element_group -> pair_section_element_group, OR, 
               //                               pair_section_element
{ ValueStack[ValueStack.Depth-3].strSet.UnionWith(ValueStack[ValueStack.Depth-1].strSet); CurrentSemanticValue.strSet = ValueStack[ValueStack.Depth-3].strSet; }
        break;
      case 19: // nonterminal -> ENTITY_NAME, EQUALS, body
{ 
			var aliases = this.Aliases;
			this.Aliases = new HashSet<string>(); 
			
			SafeGrammarAction(() => { 
				ConstructedGrammar.DeclareNonterminal(ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].altList);
				ConstructedGrammar.AddLocation(ValueStack[ValueStack.Depth-3].strVal, LocationStack[LocationStack.Depth-3].Start);
				
				if(aliases.Count > 0)
					ConstructedGrammar.AddAliases(ValueStack[ValueStack.Depth-3].strVal, aliases);
			}, LocationStack[LocationStack.Depth-3].Start);
		}
        break;
      case 20: // body -> body, OR, alternative, optional_alias
{ 
			CurrentSemanticValue.altList = ValueStack[ValueStack.Depth-4].altList; 
			ValueStack[ValueStack.Depth-2].altVal.Alias = ValueStack[ValueStack.Depth-1].strVal; 
			CurrentSemanticValue.altList.Add(ValueStack[ValueStack.Depth-2].altVal); 
		}
        break;
      case 21: // body -> alternative, optional_alias
{ 
			CurrentSemanticValue.altList = new List<Alternative>(); 
			ValueStack[ValueStack.Depth-2].altVal.Alias = ValueStack[ValueStack.Depth-1].strVal; 
			CurrentSemanticValue.altList.Add(ValueStack[ValueStack.Depth-2].altVal); 
		}
        break;
      case 22: // alternative -> alternative, entry
{ CurrentSemanticValue.altVal = ValueStack[ValueStack.Depth-2].altVal; CurrentSemanticValue.altVal.Add(ValueStack[ValueStack.Depth-1].entryVal); }
        break;
      case 23: // alternative -> /* empty */
{ CurrentSemanticValue.altVal = new Alternative(); }
        break;
      case 24: // optional_alias -> ARROW, ID
{ CurrentSemanticValue.strVal = ValueStack[ValueStack.Depth-1].strVal; this.Aliases.Add(ValueStack[ValueStack.Depth-1].strVal); }
        break;
      case 25: // optional_alias -> /* empty */
{ CurrentSemanticValue.strVal = null; }
        break;
      case 26: // entry -> context_option_groups, entry_core, entry_args, quantifier, 
               //          prec_nonempty
{ 		
			var opts = new SymbolOptionsManager();
			
			foreach(var group in ValueStack[ValueStack.Depth-5].optionGroupsDict)
			{
				foreach(var option in group.Value)
				{
					opts.Set(group.Key, option.Key, option.Value);
				}
			}
			
			if(ValueStack[ValueStack.Depth-2].optQuantVal.HasValue)
			{
				if(ValueStack[ValueStack.Depth-4].strVal.StartsWith(Grammar.ANY_TOKEN_NAME))
				{
					Log.Add(Message.Warning(
							"Использование квантификаторов с символом '" + Grammar.ANY_TOKEN_NAME + "' избыточно и не влияет на процесс разбора",
							LocationStack[LocationStack.Depth-5].Start,
							"LanD"
						));
				}
				else
				{			
					var generated = ConstructedGrammar.GenerateNonterminal(ValueStack[ValueStack.Depth-4].strVal, ValueStack[ValueStack.Depth-2].optQuantVal.Value, ValueStack[ValueStack.Depth-1].boolVal);
					ConstructedGrammar.AddLocation(generated, CurrentLocationSpan.Start);
					
					CurrentSemanticValue.entryVal = new Entry(generated, opts);
				}
			}
			
			if(CurrentSemanticValue.entryVal == null)
			{
				if(ValueStack[ValueStack.Depth-4].strVal.StartsWith(Grammar.ANY_TOKEN_NAME))
				{
					var args = new SymbolArguments();
					AnyArgument sugarOption;

					if(Enum.TryParse(ValueStack[ValueStack.Depth-4].strVal.Substring(Grammar.ANY_TOKEN_NAME.Length), out sugarOption))
						args.Set(sugarOption, ValueStack[ValueStack.Depth-3].dynamicList.Select(e=>(string)e)); 
					else
					{
						foreach(var opt in ValueStack[ValueStack.Depth-3].dynamicList)
						{
							var errorGroupName = String.Empty;
							
							if(opt is ArgumentGroup)
							{
								var group = (ArgumentGroup)opt;

								if(Enum.TryParse(group.Name, out sugarOption))
									args.Set(sugarOption, group.Arguments.Select(e=>(string)e)); 
								else
									errorGroupName = group.Name;
							}
							else if(opt is String)
							{
								if(Enum.TryParse((string)opt, out sugarOption))
									args.Set(sugarOption, new List<string>()); 
								else
									errorGroupName = (string)opt;
							}
							
							if(!String.IsNullOrEmpty(errorGroupName))
							{
								Log.Add(Message.Error(
									"При описании '" + Grammar.ANY_TOKEN_NAME + "' использовано неизвестное имя группы '" 
										+ errorGroupName + "', группа проигнорирована",
									LocationStack[LocationStack.Depth-5].Start,
									"LanD"
								));
							}
						}
					}				
					
					CurrentSemanticValue.entryVal = new Entry(Grammar.ANY_TOKEN_NAME, opts, args);
				}
				else
				{
					CurrentSemanticValue.entryVal = new Entry(ValueStack[ValueStack.Depth-4].strVal, opts);
				}
			}
		}
        break;
      case 27: // entry_args -> ARGS_LROUND_BRACKET, args, RROUND_BRACKET
{ CurrentSemanticValue.dynamicList = ValueStack[ValueStack.Depth-2].dynamicList; }
        break;
      case 28: // entry_args -> /* empty */
{ CurrentSemanticValue.dynamicList = new List<dynamic>(); }
        break;
      case 29: // context_option_groups -> context_option_groups, CATEGORY_NAME, 
               //                          ARGS_LROUND_BRACKET, context_options, RROUND_BRACKET
{ 
			CurrentSemanticValue.optionGroupsDict = ValueStack[ValueStack.Depth-5].optionGroupsDict; 
			CurrentSemanticValue.optionGroupsDict[ValueStack[ValueStack.Depth-4].strVal] = ValueStack[ValueStack.Depth-2].optionsDict;
		}
        break;
      case 30: // context_option_groups -> /* empty */
{ CurrentSemanticValue.optionGroupsDict = new Dictionary<string, Dictionary<string, List<dynamic>>>(); }
        break;
      case 31: // context_options -> context_options, COMMA, context_option
{
			CurrentSemanticValue.optionsDict = ValueStack[ValueStack.Depth-3].optionsDict;
			CurrentSemanticValue.optionsDict[ValueStack[ValueStack.Depth-1].optionTuple.Item1] = ValueStack[ValueStack.Depth-1].optionTuple.Item2;
		}
        break;
      case 32: // context_options -> context_option
{
			CurrentSemanticValue.optionsDict = new Dictionary<string, List<dynamic>>();
			CurrentSemanticValue.optionsDict[ValueStack[ValueStack.Depth-1].optionTuple.Item1] = ValueStack[ValueStack.Depth-1].optionTuple.Item2;
		}
        break;
      case 33: // context_option -> ID, context_opt_args
{ CurrentSemanticValue.optionTuple = new Tuple<string, List<dynamic>>(ValueStack[ValueStack.Depth-2].strVal, ValueStack[ValueStack.Depth-1].dynamicList); }
        break;
      case 34: // context_opt_args -> ARGS_LROUND_BRACKET, args, RROUND_BRACKET
{ CurrentSemanticValue.dynamicList = ValueStack[ValueStack.Depth-2].dynamicList; }
        break;
      case 35: // context_opt_args -> /* empty */
{ CurrentSemanticValue.dynamicList = new List<dynamic>(); }
        break;
      case 36: // prec_nonempty -> PREC_NONEMPTY
{ CurrentSemanticValue.boolVal = true; }
        break;
      case 37: // prec_nonempty -> /* empty */
{ CurrentSemanticValue.boolVal = false; }
        break;
      case 38: // quantifier -> OPTIONAL
{ CurrentSemanticValue.optQuantVal = ValueStack[ValueStack.Depth-1].quantVal; }
        break;
      case 39: // quantifier -> ZERO_OR_MORE
{ CurrentSemanticValue.optQuantVal = ValueStack[ValueStack.Depth-1].quantVal; }
        break;
      case 40: // quantifier -> ONE_OR_MORE
{ CurrentSemanticValue.optQuantVal = ValueStack[ValueStack.Depth-1].quantVal; }
        break;
      case 41: // quantifier -> /* empty */
{ CurrentSemanticValue.optQuantVal = null; }
        break;
      case 42: // entry_core -> REGEX
{ 
			CurrentSemanticValue.strVal = ConstructedGrammar.GenerateTerminal(ValueStack[ValueStack.Depth-1].strVal);
			ConstructedGrammar.AddLocation(CurrentSemanticValue.strVal, CurrentLocationSpan.Start);
		}
        break;
      case 43: // entry_core -> ID
{ CurrentSemanticValue.strVal = ValueStack[ValueStack.Depth-1].strVal; }
        break;
      case 44: // entry_core -> group
{ CurrentSemanticValue.strVal = ValueStack[ValueStack.Depth-1].strVal; }
        break;
      case 45: // group -> LROUND_BRACKET, body, RROUND_BRACKET
{ 
			CurrentSemanticValue.strVal = ConstructedGrammar.GenerateNonterminal(ValueStack[ValueStack.Depth-2].altList);
			ConstructedGrammar.AddLocation(CurrentSemanticValue.strVal, CurrentLocationSpan.Start);
		}
        break;
      case 48: // category_block -> CATEGORY_NAME, option_or_block
{
			foreach(var option in ValueStack[ValueStack.Depth-1].optionsList)
			{
				SafeGrammarAction(() => {
					ConstructedGrammar.SetOption(ValueStack[ValueStack.Depth-2].strVal, option.Name, option.Symbols, option.Arguments);
				}, LocationStack[LocationStack.Depth-2].Start);
			}
		}
        break;
      case 49: // option_or_block -> option
{ CurrentSemanticValue.optionsList = new List<OptionDeclaration>(){ ValueStack[ValueStack.Depth-1].optDeclVal }; }
        break;
      case 50: // option_or_block -> LCURVE_BRACKET, options, RCURVE_BRACKET
{ CurrentSemanticValue.optionsList = ValueStack[ValueStack.Depth-2].optionsList; }
        break;
      case 51: // options -> /* empty */
{ CurrentSemanticValue.optionsList = new List<OptionDeclaration>(); }
        break;
      case 52: // options -> options, option
{ CurrentSemanticValue.optionsList = ValueStack[ValueStack.Depth-2].optionsList; ValueStack[ValueStack.Depth-2].optionsList.Add(ValueStack[ValueStack.Depth-1].optDeclVal);  }
        break;
      case 53: // option -> OPTION_NAME, opt_args, grammar_entities_list
{
			CurrentSemanticValue.optDeclVal = new OptionDeclaration()
			{
				Name = ValueStack[ValueStack.Depth-3].strVal,
				Arguments = ValueStack[ValueStack.Depth-2].dynamicList,
				Symbols = ValueStack[ValueStack.Depth-1].strList
			};
		}
        break;
      case 54: // opt_args -> LROUND_BRACKET, args, RROUND_BRACKET
{ CurrentSemanticValue.dynamicList = ValueStack[ValueStack.Depth-2].dynamicList; }
        break;
      case 55: // opt_args -> /* empty */
{ CurrentSemanticValue.dynamicList = new List<dynamic>(); }
        break;
      case 56: // args -> args, COMMA, argument
{ 
			CurrentSemanticValue.dynamicList = ValueStack[ValueStack.Depth-3].dynamicList; 
			CurrentSemanticValue.dynamicList.Add(ValueStack[ValueStack.Depth-1].dynamicVal); 
		}
        break;
      case 57: // args -> argument
{ CurrentSemanticValue.dynamicList = new List<dynamic>(){ ValueStack[ValueStack.Depth-1].dynamicVal }; }
        break;
      case 58: // argument -> RNUM
{ CurrentSemanticValue.dynamicVal = ValueStack[ValueStack.Depth-1].doubleVal; }
        break;
      case 59: // argument -> REGEX
{
			var generated = ConstructedGrammar.GenerateTerminal((string)ValueStack[ValueStack.Depth-1].strVal);
			ConstructedGrammar.AddLocation(generated, LocationStack[LocationStack.Depth-1].Start);		
			CurrentSemanticValue.dynamicVal = generated;
		}
        break;
      case 60: // argument -> STRING
{ CurrentSemanticValue.dynamicVal = ValueStack[ValueStack.Depth-1].strVal.Substring(1, ValueStack[ValueStack.Depth-1].strVal.Length - 2); }
        break;
      case 61: // argument -> ID
{ CurrentSemanticValue.dynamicVal = ValueStack[ValueStack.Depth-1].strVal; }
        break;
      case 62: // argument -> argument_group
{ CurrentSemanticValue.dynamicVal = ValueStack[ValueStack.Depth-1].argGroupVal; }
        break;
      case 63: // argument_group -> ID, LROUND_BRACKET, args, RROUND_BRACKET
{ 
			CurrentSemanticValue.argGroupVal = new ArgumentGroup()
			{
				Name = ValueStack[ValueStack.Depth-4].strVal,
				Arguments = ValueStack[ValueStack.Depth-2].dynamicList
			};
		}
        break;
      case 64: // grammar_entities_list -> grammar_entities_list, grammar_entity
{ 
			CurrentSemanticValue.strList = ValueStack[ValueStack.Depth-2].strList;	
			if(!String.IsNullOrEmpty(ValueStack[ValueStack.Depth-1].strVal))
				CurrentSemanticValue.strList.Add(ValueStack[ValueStack.Depth-1].strVal);
		}
        break;
      case 65: // grammar_entities_list -> /* empty */
{ CurrentSemanticValue.strList = new List<string>(); }
        break;
      case 66: // grammar_entity -> ID
{ CurrentSemanticValue.strVal = ValueStack[ValueStack.Depth-1].strVal; }
        break;
      case 67: // grammar_entity -> REGEX
{ 
			CurrentSemanticValue.strVal = ConstructedGrammar.GetTerminal(ValueStack[ValueStack.Depth-1].strVal);
			
			if(String.IsNullOrEmpty(CurrentSemanticValue.strVal))
			{
				Log.Add(Message.Error(
					"Не найден токен, определяемый регулярным выражением " + ValueStack[ValueStack.Depth-1].strVal,
					LocationStack[LocationStack.Depth-1].Start,
					"LanD"
				));
			}
		}
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


private void SafeGrammarAction(Action action, PointLocation loc)
{
	try
	{
		action();
	}
	catch(IncorrectGrammarException ex)
	{
		Log.Add(Message.Error(
			ex.Message,
			loc,
			"LanD"
		));
	}
}
}
}
