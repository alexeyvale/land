COMMENT		: COMMENT_L|COMMENT_ML
COMMENT_L	: '//' ~[\n\r]*
COMMENT_ML	: '/*' .*? '*/'
STRING		: STRING_STD|STRING_ESC
STRING_SKIP	: '\\\"' | '\\\\'
STRING_STD	: '\"' (STRING_SKIP|.)*? '\"'
STRING_ESC	: '@'('\"' ~[\"]* '\"')+
DECLARATION_CODE : '%{' (STRING|COMMENT|.)*? '%}'

ID : [_a-zA-Z][_0-9a-zA-Z]*
DECLARATION_NAME : '%'ID

grammar 		=	declaration* '%%' rule* grammar_ending
grammar_ending	=	('%%' Any)?
declaration		=	DECLARATION_NAME ('<' ID '>')? declaration_body
declaration_body =	ID+ | Any
rule			=	ID ':' alternative ('|' alternative)* ';'
alternative		=	(ID | block | LITERAL)*
block			=	'{' (Any|block)+ '}'


%skip COMMENT STRING DECLARATION_CODE
%start grammar