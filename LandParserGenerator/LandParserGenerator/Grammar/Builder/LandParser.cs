// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-QMIGNCH
// DateTime: 08.07.2018 21:12:41
// UserName: Алексей
// Input file <./Land.y - 08.07.2018 21:12:41>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using System.Linq;
using LandParserGenerator;

namespace LandParserGenerator.Builder
{
public enum Tokens {error=2,EOF=3,OR=4,COLON=5,OPT_LPAR=6,
    ELEM_LPAR=7,LPAR=8,RPAR=9,COMMA=10,PROC=11,EQUALS=12,
    MINUS=13,PLUS=14,EXCLAMATION=15,ADD_CHILD=16,DOT=17,LEFT=18,
    RIGHT=19,REGEX=20,NAMED=21,STRING=22,ID=23,ENTITY_NAME=24,
    OPTION_NAME=25,CATEGORY_NAME=26,POSITION=27,RNUM=28,OPTIONAL=29,ZERO_OR_MORE=30,
    ONE_OR_MORE=31,IS_LIST_NODE=32,PREC_NONEMPTY=33};

public struct ValueType
{ 
	public int intVal; 
	public double doubleVal;
	public Quantifier quantVal;
	public bool boolVal;
	public string strVal;
	public Entry entryVal;
	public ArgumentGroup argGroupVal;
	public dynamic dynamicVal;
	
	public Tuple<string, double> strDoublePair;
	
	public List<dynamic> dynamicList;
	public List<Tuple<string, List<dynamic>>> optionParamsList;
	public List<string> strList;	
	public List<Alternative> altList;
	
	public HashSet<string> strSet;
	
	// Информация о количестве повторений
	public Nullable<Quantifier> optQuantVal;
	public Nullable<double> optDoubleVal;
}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from ./Land.y - 08.07.2018 21:12:41
    public Parser(AbstractScanner<LandParserGenerator.Builder.ValueType, LexLocation> scanner) : base(scanner) { }
    
    public Grammar ConstructedGrammar;
    public List<Message> Errors = new List<Message>();
  // End verbatim content from ./Land.y - 08.07.2018 21:12:41

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[51];
  private static State[] states = new State[73];
  private static string[] nonTerms = new string[] {
      "lp_description", "quantifier", "body_element_core", "body_element_atom", 
      "group", "body_element", "identifiers", "body", "prec_nonempty", "argument_group", 
      "argument", "opt_args", "args", "context_opt_args", "body_element_args", 
      "context_options", "pair_border_group_content", "pair_border", "$accept", 
      "structure", "options", "element", "terminal", "nonterminal", "pair", "option", 
      };

  static Parser() {
    states[0] = new State(new int[]{24,27},new int[]{-1,1,-20,3,-22,72,-23,26,-24,70,-25,71});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{11,4,24,27},new int[]{-22,25,-23,26,-24,70,-25,71});
    states[4] = new State(-37,new int[]{-21,5});
    states[5] = new State(new int[]{26,7,3,-2},new int[]{-26,6});
    states[6] = new State(-38);
    states[7] = new State(new int[]{23,8});
    states[8] = new State(new int[]{8,12,23,-41,26,-41,3,-41},new int[]{-12,9});
    states[9] = new State(-50,new int[]{-7,10});
    states[10] = new State(new int[]{23,11,26,-39,3,-39});
    states[11] = new State(-49);
    states[12] = new State(new int[]{28,17,22,18,23,19},new int[]{-13,13,-11,23,-10,24});
    states[13] = new State(new int[]{9,14,10,15});
    states[14] = new State(-40);
    states[15] = new State(new int[]{28,17,22,18,23,19},new int[]{-11,16,-10,24});
    states[16] = new State(-42);
    states[17] = new State(-44);
    states[18] = new State(-45);
    states[19] = new State(new int[]{7,20,9,-46,10,-46});
    states[20] = new State(new int[]{28,17,22,18,23,19},new int[]{-13,21,-11,23,-10,24});
    states[21] = new State(new int[]{9,22,10,15});
    states[22] = new State(-48);
    states[23] = new State(-43);
    states[24] = new State(-47);
    states[25] = new State(-3);
    states[26] = new State(-5);
    states[27] = new State(new int[]{5,28,12,30});
    states[28] = new State(new int[]{20,29});
    states[29] = new State(-8);
    states[30] = new State(new int[]{18,58,4,-18,25,-18,22,-18,23,-18,8,-18,11,-18,24,-18},new int[]{-8,31});
    states[31] = new State(new int[]{4,33,11,-15,24,-15,25,-23,22,-23,23,-23,8,-23},new int[]{-6,32,-16,34});
    states[32] = new State(-16);
    states[33] = new State(-17);
    states[34] = new State(new int[]{25,46,22,52,23,53,8,55},new int[]{-3,35,-4,51,-5,54});
    states[35] = new State(new int[]{7,43,29,-21,30,-21,31,-21,33,-21,4,-21,25,-21,22,-21,23,-21,8,-21,11,-21,24,-21,9,-21},new int[]{-15,36});
    states[36] = new State(new int[]{29,40,30,41,31,42,33,-31,4,-31,25,-31,22,-31,23,-31,8,-31,11,-31,24,-31,9,-31},new int[]{-2,37});
    states[37] = new State(new int[]{33,39,4,-27,25,-27,22,-27,23,-27,8,-27,11,-27,24,-27,9,-27},new int[]{-9,38});
    states[38] = new State(-19);
    states[39] = new State(-26);
    states[40] = new State(-28);
    states[41] = new State(-29);
    states[42] = new State(-30);
    states[43] = new State(new int[]{28,17,22,18,23,19},new int[]{-13,44,-11,23,-10,24});
    states[44] = new State(new int[]{9,45,10,15});
    states[45] = new State(-20);
    states[46] = new State(new int[]{6,48,25,-25,22,-25,23,-25,8,-25},new int[]{-14,47});
    states[47] = new State(-22);
    states[48] = new State(new int[]{28,17,22,18,23,19},new int[]{-13,49,-11,23,-10,24});
    states[49] = new State(new int[]{9,50,10,15});
    states[50] = new State(-24);
    states[51] = new State(-32);
    states[52] = new State(-34);
    states[53] = new State(-35);
    states[54] = new State(-33);
    states[55] = new State(-18,new int[]{-8,56});
    states[56] = new State(new int[]{9,57,4,33,25,-23,22,-23,23,-23,8,-23},new int[]{-6,32,-16,34});
    states[57] = new State(-36);
    states[58] = new State(new int[]{23,62,22,63,8,64},new int[]{-18,59});
    states[59] = new State(new int[]{19,60});
    states[60] = new State(new int[]{23,62,22,63,8,64},new int[]{-18,61});
    states[61] = new State(-9);
    states[62] = new State(-10);
    states[63] = new State(-11);
    states[64] = new State(new int[]{23,62,22,63,8,64},new int[]{-17,65,-18,69});
    states[65] = new State(new int[]{9,66,4,67});
    states[66] = new State(-12);
    states[67] = new State(new int[]{23,62,22,63,8,64},new int[]{-18,68});
    states[68] = new State(-14);
    states[69] = new State(-13);
    states[70] = new State(-6);
    states[71] = new State(-7);
    states[72] = new State(-4);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-19, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-20,11,-21});
    rules[3] = new Rule(-20, new int[]{-20,-22});
    rules[4] = new Rule(-20, new int[]{-22});
    rules[5] = new Rule(-22, new int[]{-23});
    rules[6] = new Rule(-22, new int[]{-24});
    rules[7] = new Rule(-22, new int[]{-25});
    rules[8] = new Rule(-23, new int[]{24,5,20});
    rules[9] = new Rule(-25, new int[]{24,12,18,-18,19,-18});
    rules[10] = new Rule(-18, new int[]{23});
    rules[11] = new Rule(-18, new int[]{22});
    rules[12] = new Rule(-18, new int[]{8,-17,9});
    rules[13] = new Rule(-17, new int[]{-18});
    rules[14] = new Rule(-17, new int[]{-17,4,-18});
    rules[15] = new Rule(-24, new int[]{24,12,-8});
    rules[16] = new Rule(-8, new int[]{-8,-6});
    rules[17] = new Rule(-8, new int[]{-8,4});
    rules[18] = new Rule(-8, new int[]{});
    rules[19] = new Rule(-6, new int[]{-16,-3,-15,-2,-9});
    rules[20] = new Rule(-15, new int[]{7,-13,9});
    rules[21] = new Rule(-15, new int[]{});
    rules[22] = new Rule(-16, new int[]{-16,25,-14});
    rules[23] = new Rule(-16, new int[]{});
    rules[24] = new Rule(-14, new int[]{6,-13,9});
    rules[25] = new Rule(-14, new int[]{});
    rules[26] = new Rule(-9, new int[]{33});
    rules[27] = new Rule(-9, new int[]{});
    rules[28] = new Rule(-2, new int[]{29});
    rules[29] = new Rule(-2, new int[]{30});
    rules[30] = new Rule(-2, new int[]{31});
    rules[31] = new Rule(-2, new int[]{});
    rules[32] = new Rule(-3, new int[]{-4});
    rules[33] = new Rule(-3, new int[]{-5});
    rules[34] = new Rule(-4, new int[]{22});
    rules[35] = new Rule(-4, new int[]{23});
    rules[36] = new Rule(-5, new int[]{8,-8,9});
    rules[37] = new Rule(-21, new int[]{});
    rules[38] = new Rule(-21, new int[]{-21,-26});
    rules[39] = new Rule(-26, new int[]{26,23,-12,-7});
    rules[40] = new Rule(-12, new int[]{8,-13,9});
    rules[41] = new Rule(-12, new int[]{});
    rules[42] = new Rule(-13, new int[]{-13,10,-11});
    rules[43] = new Rule(-13, new int[]{-11});
    rules[44] = new Rule(-11, new int[]{28});
    rules[45] = new Rule(-11, new int[]{22});
    rules[46] = new Rule(-11, new int[]{23});
    rules[47] = new Rule(-11, new int[]{-10});
    rules[48] = new Rule(-10, new int[]{23,7,-13,9});
    rules[49] = new Rule(-7, new int[]{-7,23});
    rules[50] = new Rule(-7, new int[]{});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // lp_description -> structure, PROC, options
{ 
			ConstructedGrammar.PostProcessing();
			Errors.AddRange(ConstructedGrammar.CheckValidity()); 
		}
        break;
      case 8: // terminal -> ENTITY_NAME, COLON, REGEX
{ 
			SafeGrammarAction(() => { 
				ConstructedGrammar.DeclareTerminal(ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].strVal);
				ConstructedGrammar.AddAnchor(ValueStack[ValueStack.Depth-3].strVal, LocationStack[LocationStack.Depth-3]);
			}, LocationStack[LocationStack.Depth-3]);
		}
        break;
      case 9: // pair -> ENTITY_NAME, EQUALS, LEFT, pair_border, RIGHT, pair_border
{
			SafeGrammarAction(() => { 
				ConstructedGrammar.DeclarePair(ValueStack[ValueStack.Depth-6].strVal, ValueStack[ValueStack.Depth-3].strSet, ValueStack[ValueStack.Depth-1].strSet);
				ConstructedGrammar.AddAnchor(ValueStack[ValueStack.Depth-6].strVal, LocationStack[LocationStack.Depth-6]);
			}, LocationStack[LocationStack.Depth-6]);
		}
        break;
      case 10: // pair_border -> ID
{ CurrentSemanticValue.strSet = new HashSet<string>() { ValueStack[ValueStack.Depth-1].strVal }; }
        break;
      case 11: // pair_border -> STRING
{ 	
			var generated = ConstructedGrammar.GenerateTerminal(ValueStack[ValueStack.Depth-1].strVal);
			ConstructedGrammar.AddAnchor(generated, LocationStack[LocationStack.Depth-1]);
			CurrentSemanticValue.strSet = new HashSet<string>() { generated };
		}
        break;
      case 12: // pair_border -> LPAR, pair_border_group_content, RPAR
{ CurrentSemanticValue.strSet = ValueStack[ValueStack.Depth-2].strSet; }
        break;
      case 13: // pair_border_group_content -> pair_border
{ CurrentSemanticValue.strSet = ValueStack[ValueStack.Depth-1].strSet; }
        break;
      case 14: // pair_border_group_content -> pair_border_group_content, OR, pair_border
{ ValueStack[ValueStack.Depth-3].strSet.UnionWith(ValueStack[ValueStack.Depth-1].strSet); CurrentSemanticValue.strSet = ValueStack[ValueStack.Depth-3].strSet; }
        break;
      case 15: // nonterminal -> ENTITY_NAME, EQUALS, body
{ 
			SafeGrammarAction(() => { 
				ConstructedGrammar.DeclareNonterminal(ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].altList);
				ConstructedGrammar.AddAnchor(ValueStack[ValueStack.Depth-3].strVal, LocationStack[LocationStack.Depth-3]);
			}, LocationStack[LocationStack.Depth-3]);
		}
        break;
      case 16: // body -> body, body_element
{ 
			CurrentSemanticValue.altList = ValueStack[ValueStack.Depth-2].altList; 
			CurrentSemanticValue.altList[CurrentSemanticValue.altList.Count-1].Add(ValueStack[ValueStack.Depth-1].entryVal); 	
		}
        break;
      case 17: // body -> body, OR
{ 
			CurrentSemanticValue.altList = ValueStack[ValueStack.Depth-2].altList;
			CurrentSemanticValue.altList.Add(new Alternative());		
		}
        break;
      case 18: // body -> /* empty */
{ 
			CurrentSemanticValue.altList = new List<Alternative>(); 
			CurrentSemanticValue.altList.Add(new Alternative()); 
		}
        break;
      case 19: // body_element -> context_options, body_element_core, body_element_args, 
               //                 quantifier, prec_nonempty
{ 		
			var opts = new LocalOptions();
			
			foreach(var opt in ValueStack[ValueStack.Depth-5].optionParamsList)
			{
				NodeOption nodeOpt;		
				if(!Enum.TryParse<NodeOption>(opt.Item1.ToUpper(), out nodeOpt))
				{
					MappingOption mapOpt;
					if(!Enum.TryParse<MappingOption>(opt.Item1.ToUpper(), out mapOpt))
					{
						Errors.Add(Message.Error(
							"Неизвестная опция '" + opt.Item1 + "'",
							LocationStack[LocationStack.Depth-5].StartLine, LocationStack[LocationStack.Depth-5].StartColumn,
							"LanD"
						));
					}
					else
						opts.Set(mapOpt, opt.Item2.ToArray());				
				}
				else
					opts.Set(nodeOpt);	
			}
			
			if(ValueStack[ValueStack.Depth-2].optQuantVal.HasValue)
			{
				if(ValueStack[ValueStack.Depth-4].strVal.StartsWith(Grammar.ANY_TOKEN_NAME))
				{
					Errors.Add(Message.Warning(
							"Использование квантификаторов с символом '" + Grammar.ANY_TOKEN_NAME + "' избыточно и не влияет на процесс разбора",
							LocationStack[LocationStack.Depth-5].StartLine, LocationStack[LocationStack.Depth-5].StartColumn,
							"LanD"
						));
				}
				else
				{			
					var generated = ConstructedGrammar.GenerateNonterminal(ValueStack[ValueStack.Depth-4].strVal, ValueStack[ValueStack.Depth-2].optQuantVal.Value, ValueStack[ValueStack.Depth-1].boolVal);
					ConstructedGrammar.AddAnchor(generated, CurrentLocationSpan);
					
					CurrentSemanticValue.entryVal = new Entry(generated, opts);
				}
			}
			
			if(CurrentSemanticValue.entryVal == null)
			{
				if(ValueStack[ValueStack.Depth-4].strVal.StartsWith(Grammar.ANY_TOKEN_NAME))
				{
					AnyOption sugarOption;

					if(Enum.TryParse(ValueStack[ValueStack.Depth-4].strVal.Substring(Grammar.ANY_TOKEN_NAME.Length), out sugarOption))
						opts.AnyOptions[sugarOption] = new HashSet<string>(ValueStack[ValueStack.Depth-3].dynamicList.Select(e=>(string)e)); 
					else
					{
						foreach(var opt in ValueStack[ValueStack.Depth-3].dynamicList)
						{
							var errorGroupName = String.Empty;
							
							if(opt is ArgumentGroup)
							{
								var group = (ArgumentGroup)opt;

								if(Enum.TryParse(group.Name, out sugarOption))
									opts.AnyOptions[sugarOption] = new HashSet<string>(group.Arguments.Select(e=>(string)e)); 
								else
									errorGroupName = group.Name;
							}
							else if(opt is String)
							{
								if(Enum.TryParse((string)opt, out sugarOption))
									opts.AnyOptions[sugarOption] = new HashSet<string>(); 
								else
									errorGroupName = (string)opt;
							}
							
							if(!String.IsNullOrEmpty(errorGroupName))
							{
								Errors.Add(Message.Error(
									"При описании '" + Grammar.ANY_TOKEN_NAME + "' использовано неизвестное имя группы '" 
										+ errorGroupName + "', группа проигнорирована",
									LocationStack[LocationStack.Depth-5].StartLine, LocationStack[LocationStack.Depth-5].StartColumn,
									"LanD"
								));
							}
						}
					}				
					
					CurrentSemanticValue.entryVal = new Entry(Grammar.ANY_TOKEN_NAME, opts);
				}
				else
				{
					CurrentSemanticValue.entryVal = new Entry(ValueStack[ValueStack.Depth-4].strVal, opts);
				}
			}
		}
        break;
      case 20: // body_element_args -> ELEM_LPAR, args, RPAR
{ CurrentSemanticValue.dynamicList = ValueStack[ValueStack.Depth-2].dynamicList; }
        break;
      case 21: // body_element_args -> /* empty */
{ CurrentSemanticValue.dynamicList = new List<dynamic>(); }
        break;
      case 22: // context_options -> context_options, OPTION_NAME, context_opt_args
{ 
			CurrentSemanticValue.optionParamsList = ValueStack[ValueStack.Depth-3].optionParamsList; 
			CurrentSemanticValue.optionParamsList.Add(new Tuple<string, List<dynamic>>(ValueStack[ValueStack.Depth-2].strVal, ValueStack[ValueStack.Depth-1].dynamicList)); 
		}
        break;
      case 23: // context_options -> /* empty */
{ CurrentSemanticValue.optionParamsList = new List<Tuple<string, List<dynamic>>>(); }
        break;
      case 24: // context_opt_args -> OPT_LPAR, args, RPAR
{ CurrentSemanticValue.dynamicList = ValueStack[ValueStack.Depth-2].dynamicList; }
        break;
      case 25: // context_opt_args -> /* empty */
{ CurrentSemanticValue.dynamicList = new List<dynamic>(); }
        break;
      case 26: // prec_nonempty -> PREC_NONEMPTY
{ CurrentSemanticValue.boolVal = true; }
        break;
      case 27: // prec_nonempty -> /* empty */
{ CurrentSemanticValue.boolVal = false; }
        break;
      case 28: // quantifier -> OPTIONAL
{ CurrentSemanticValue.optQuantVal = ValueStack[ValueStack.Depth-1].quantVal; }
        break;
      case 29: // quantifier -> ZERO_OR_MORE
{ CurrentSemanticValue.optQuantVal = ValueStack[ValueStack.Depth-1].quantVal; }
        break;
      case 30: // quantifier -> ONE_OR_MORE
{ CurrentSemanticValue.optQuantVal = ValueStack[ValueStack.Depth-1].quantVal; }
        break;
      case 31: // quantifier -> /* empty */
{ CurrentSemanticValue.optQuantVal = null; }
        break;
      case 32: // body_element_core -> body_element_atom
{ CurrentSemanticValue.strVal = ValueStack[ValueStack.Depth-1].strVal; }
        break;
      case 33: // body_element_core -> group
{ CurrentSemanticValue.strVal = ValueStack[ValueStack.Depth-1].strVal; }
        break;
      case 34: // body_element_atom -> STRING
{ 
			CurrentSemanticValue.strVal = ConstructedGrammar.GenerateTerminal(ValueStack[ValueStack.Depth-1].strVal);
			ConstructedGrammar.AddAnchor(CurrentSemanticValue.strVal, CurrentLocationSpan);
		}
        break;
      case 35: // body_element_atom -> ID
{ CurrentSemanticValue.strVal = ValueStack[ValueStack.Depth-1].strVal; }
        break;
      case 36: // group -> LPAR, body, RPAR
{ 
			CurrentSemanticValue.strVal = ConstructedGrammar.GenerateNonterminal(ValueStack[ValueStack.Depth-2].altList);
			ConstructedGrammar.AddAnchor(CurrentSemanticValue.strVal, CurrentLocationSpan);
		}
        break;
      case 39: // option -> CATEGORY_NAME, ID, opt_args, identifiers
{
			OptionCategory optCategory;
			if(!Enum.TryParse(ValueStack[ValueStack.Depth-4].strVal.ToUpper(), out optCategory))
			{
				Errors.Add(Message.Error(
					"Неизвестная категория опций '" + ValueStack[ValueStack.Depth-4].strVal + "'",
					LocationStack[LocationStack.Depth-4].StartLine, LocationStack[LocationStack.Depth-4].StartColumn,
					"LanD"
				));
			}

			bool goodOption = true;
			switch (optCategory)
			{
				case OptionCategory.PARSING:
					ParsingOption parsingOpt;
					goodOption = Enum.TryParse(ValueStack[ValueStack.Depth-3].strVal.ToUpper(), out parsingOpt);
					if(goodOption) 
						SafeGrammarAction(() => { 
					 		ConstructedGrammar.SetOption(parsingOpt, ValueStack[ValueStack.Depth-1].strList.ToArray());
					 	}, LocationStack[LocationStack.Depth-4]);
					break;
				case OptionCategory.NODES:
					NodeOption nodeOpt;
					goodOption = Enum.TryParse(ValueStack[ValueStack.Depth-3].strVal.ToUpper(), out nodeOpt);
					if(goodOption)
						SafeGrammarAction(() => { 					
							ConstructedGrammar.SetOption(nodeOpt, ValueStack[ValueStack.Depth-1].strList.ToArray());
						}, LocationStack[LocationStack.Depth-4]);
					break;
				case OptionCategory.MAPPING:
					MappingOption mappingOpt;
					goodOption = Enum.TryParse(ValueStack[ValueStack.Depth-3].strVal.ToUpper(), out mappingOpt);
					if(goodOption)
						SafeGrammarAction(() => { 			
							ConstructedGrammar.SetOption(mappingOpt, ValueStack[ValueStack.Depth-1].strList.ToArray(), ValueStack[ValueStack.Depth-2].dynamicList.ToArray());
						}, LocationStack[LocationStack.Depth-4]);
					break;
				default:
					break;
			}
			
			if(!goodOption)
			{
				Errors.Add(Message.Error(
					"Опция '" + ValueStack[ValueStack.Depth-3].strVal + "' не определена для категории '" + ValueStack[ValueStack.Depth-4].strVal + "'",
					LocationStack[LocationStack.Depth-3].StartLine, LocationStack[LocationStack.Depth-3].StartColumn,
					"LanD"
				));
			}
		}
        break;
      case 40: // opt_args -> LPAR, args, RPAR
{ CurrentSemanticValue.dynamicList = ValueStack[ValueStack.Depth-2].dynamicList; }
        break;
      case 41: // opt_args -> /* empty */
{ CurrentSemanticValue.dynamicList = new List<dynamic>(); }
        break;
      case 42: // args -> args, COMMA, argument
{ 
			CurrentSemanticValue.dynamicList = ValueStack[ValueStack.Depth-3].dynamicList; 
			CurrentSemanticValue.dynamicList.Add(ValueStack[ValueStack.Depth-1].dynamicVal); 
		}
        break;
      case 43: // args -> argument
{ CurrentSemanticValue.dynamicList = new List<dynamic>(){ ValueStack[ValueStack.Depth-1].dynamicVal }; }
        break;
      case 44: // argument -> RNUM
{ CurrentSemanticValue.dynamicVal = ValueStack[ValueStack.Depth-1].doubleVal; }
        break;
      case 45: // argument -> STRING
{
			var generated = ConstructedGrammar.GenerateTerminal((string)ValueStack[ValueStack.Depth-1].strVal);
			ConstructedGrammar.AddAnchor(generated, LocationStack[LocationStack.Depth-1]);		
			CurrentSemanticValue.dynamicVal = generated;
		}
        break;
      case 46: // argument -> ID
{ CurrentSemanticValue.dynamicVal = ValueStack[ValueStack.Depth-1].strVal; }
        break;
      case 47: // argument -> argument_group
{ CurrentSemanticValue.dynamicVal = ValueStack[ValueStack.Depth-1].argGroupVal; }
        break;
      case 48: // argument_group -> ID, ELEM_LPAR, args, RPAR
{ 
			CurrentSemanticValue.argGroupVal = new ArgumentGroup()
			{
				Name = ValueStack[ValueStack.Depth-4].strVal,
				Arguments = ValueStack[ValueStack.Depth-2].dynamicList
			};
		}
        break;
      case 49: // identifiers -> identifiers, ID
{ CurrentSemanticValue.strList = ValueStack[ValueStack.Depth-2].strList; CurrentSemanticValue.strList.Add(ValueStack[ValueStack.Depth-1].strVal); }
        break;
      case 50: // identifiers -> /* empty */
{ CurrentSemanticValue.strList = new List<string>(); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


private void SafeGrammarAction(Action action, LexLocation loc)
{
	try
	{
		action();
	}
	catch(IncorrectGrammarException ex)
	{
		Errors.Add(Message.Error(
			ex.Message,
			loc.StartLine, loc.StartColumn,
			"LanD"
		));
	}
}

}
}
