// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-QMIGNCH
// DateTime: 18.03.2019 20:27:09
// UserName: Алексей
// Input file <./Land.y - 18.03.2019 20:27:09>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using System.Linq;
using Land.Core;

namespace Land.Core.Builder
{
public enum Tokens {error=2,EOF=3,OR=4,OPT_LROUND_BRACKET=5,ELEM_LROUND_BRACKET=6,
    LROUND_BRACKET=7,RROUND_BRACKET=8,LCURVE_BRACKET=9,RCURVE_BRACKET=10,COLON=11,COMMA=12,
    PROC=13,EQUALS=14,MINUS=15,PLUS=16,EXCLAMATION=17,DOT=18,
    ARROW=19,LEFT=20,RIGHT=21,LINESTART=22,REGEX=23,NAMED=24,
    STRING=25,ID=26,ENTITY_NAME=27,OPTION_NAME=28,CATEGORY_NAME=29,POSITION=30,
    RNUM=31,OPTIONAL=32,ZERO_OR_MORE=33,ONE_OR_MORE=34,IS_LIST_NODE=35,PREC_NONEMPTY=36};

public struct ValueType
{ 
	public int intVal; 
	public double doubleVal;
	public Quantifier quantVal;
	public bool boolVal;
	public string strVal;
	public Entry entryVal;
	public Alternative altVal;
	public ArgumentGroup argGroupVal;
	public dynamic dynamicVal;
	public OptionDeclaration optDeclVal;
	
	public List<dynamic> dynamicList;
	public List<Tuple<string, List<dynamic>>> optionParamsList;
	public List<OptionDeclaration> optionsList;
	public List<string> strList;	
	public List<Alternative> altList;
	
	public HashSet<string> strSet;
	
	// Информация о количестве повторений
	public Nullable<Quantifier> optQuantVal;
	public Nullable<double> optDoubleVal;
}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,Land.Core.SegmentLocation> {
  private Land.Core.SegmentLocation __yylloc = new Land.Core.SegmentLocation();
  public override Land.Core.SegmentLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public Land.Core.SegmentLocation yylloc;
  public ScanObj( int t, ValueType val, Land.Core.SegmentLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, Land.Core.SegmentLocation>
{
  // Verbatim content from ./Land.y - 18.03.2019 20:27:09
    public Parser(AbstractScanner<Land.Core.Builder.ValueType, SegmentLocation> scanner) : base(scanner) { }
    
    public Grammar ConstructedGrammar;
    public List<Message> Log = new List<Message>();
    
    private HashSet<string> Aliases = new HashSet<string>();
  // End verbatim content from ./Land.y - 18.03.2019 20:27:09

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[61];
  private static State[] states = new State[88];
  private static string[] nonTerms = new string[] {
      "lp_description", "quantifier", "entry_core", "group", "optional_alias", 
      "entry", "identifiers", "body", "prec_nonempty", "opt_linestart", "argument_group", 
      "argument", "alternative", "option", "opt_args", "args", "context_opt_args", 
      "entry_args", "context_options", "option_or_block", "options", "pair_border_group_content", 
      "pair_border", "$accept", "structure", "options_section", "element", "terminal", 
      "nonterminal", "pair", "category_block", };

  static Parser() {
    states[0] = new State(new int[]{27,35},new int[]{-1,1,-25,3,-27,87,-28,34,-29,85,-30,86});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{13,4,27,35},new int[]{-27,33,-28,34,-29,85,-30,86});
    states[4] = new State(new int[]{29,8,3,-41},new int[]{-26,5,-31,6});
    states[5] = new State(-2);
    states[6] = new State(new int[]{29,8,3,-41},new int[]{-26,7,-31,6});
    states[7] = new State(-42);
    states[8] = new State(new int[]{28,11,9,29},new int[]{-20,9,-14,10});
    states[9] = new State(-43);
    states[10] = new State(-44);
    states[11] = new State(new int[]{7,15,26,-50,29,-50,3,-50,10,-50,28,-50},new int[]{-15,12});
    states[12] = new State(-60,new int[]{-7,13});
    states[13] = new State(new int[]{26,14,29,-48,3,-48,10,-48,28,-48});
    states[14] = new State(-59);
    states[15] = new State(new int[]{31,20,23,21,25,22,26,23},new int[]{-16,16,-12,27,-11,28});
    states[16] = new State(new int[]{8,17,12,18});
    states[17] = new State(-49);
    states[18] = new State(new int[]{31,20,23,21,25,22,26,23},new int[]{-12,19,-11,28});
    states[19] = new State(-51);
    states[20] = new State(-53);
    states[21] = new State(-54);
    states[22] = new State(-55);
    states[23] = new State(new int[]{6,24,8,-56,12,-56});
    states[24] = new State(new int[]{31,20,23,21,25,22,26,23},new int[]{-16,25,-12,27,-11,28});
    states[25] = new State(new int[]{8,26,12,18});
    states[26] = new State(-58);
    states[27] = new State(-52);
    states[28] = new State(-57);
    states[29] = new State(-46,new int[]{-21,30});
    states[30] = new State(new int[]{10,31,28,11},new int[]{-14,32});
    states[31] = new State(-45);
    states[32] = new State(-47);
    states[33] = new State(-3);
    states[34] = new State(-5);
    states[35] = new State(new int[]{11,36,14,52});
    states[36] = new State(new int[]{20,39,22,51,23,-10},new int[]{-10,37});
    states[37] = new State(new int[]{23,38});
    states[38] = new State(-8);
    states[39] = new State(new int[]{26,43,23,44,7,45},new int[]{-23,40});
    states[40] = new State(new int[]{21,41});
    states[41] = new State(new int[]{26,43,23,44,7,45},new int[]{-23,42});
    states[42] = new State(-11);
    states[43] = new State(-12);
    states[44] = new State(-13);
    states[45] = new State(new int[]{26,43,23,44,7,45},new int[]{-22,46,-23,50});
    states[46] = new State(new int[]{8,47,4,48});
    states[47] = new State(-14);
    states[48] = new State(new int[]{26,43,23,44,7,45},new int[]{-23,49});
    states[49] = new State(-16);
    states[50] = new State(-15);
    states[51] = new State(-9);
    states[52] = new State(-21,new int[]{-8,53,-13,83});
    states[53] = new State(new int[]{4,54,13,-17,27,-17});
    states[54] = new State(-21,new int[]{-13,55});
    states[55] = new State(new int[]{19,58,4,-23,13,-23,27,-23,8,-23,28,-28,23,-28,26,-28,7,-28},new int[]{-5,56,-6,57,-19,60});
    states[56] = new State(-18);
    states[57] = new State(-20);
    states[58] = new State(new int[]{26,59});
    states[59] = new State(-22);
    states[60] = new State(new int[]{28,72,23,77,26,78,7,80},new int[]{-3,61,-4,79});
    states[61] = new State(new int[]{6,69,32,-26,33,-26,34,-26,36,-26,19,-26,28,-26,23,-26,26,-26,7,-26,4,-26,13,-26,27,-26,8,-26},new int[]{-18,62});
    states[62] = new State(new int[]{32,66,33,67,34,68,36,-36,19,-36,28,-36,23,-36,26,-36,7,-36,4,-36,13,-36,27,-36,8,-36},new int[]{-2,63});
    states[63] = new State(new int[]{36,65,19,-32,28,-32,23,-32,26,-32,7,-32,4,-32,13,-32,27,-32,8,-32},new int[]{-9,64});
    states[64] = new State(-24);
    states[65] = new State(-31);
    states[66] = new State(-33);
    states[67] = new State(-34);
    states[68] = new State(-35);
    states[69] = new State(new int[]{31,20,23,21,25,22,26,23},new int[]{-16,70,-12,27,-11,28});
    states[70] = new State(new int[]{8,71,12,18});
    states[71] = new State(-25);
    states[72] = new State(new int[]{5,74,28,-30,23,-30,26,-30,7,-30},new int[]{-17,73});
    states[73] = new State(-27);
    states[74] = new State(new int[]{31,20,23,21,25,22,26,23},new int[]{-16,75,-12,27,-11,28});
    states[75] = new State(new int[]{8,76,12,18});
    states[76] = new State(-29);
    states[77] = new State(-37);
    states[78] = new State(-38);
    states[79] = new State(-39);
    states[80] = new State(-21,new int[]{-8,81,-13,83});
    states[81] = new State(new int[]{8,82,4,54});
    states[82] = new State(-40);
    states[83] = new State(new int[]{19,58,4,-23,13,-23,27,-23,8,-23,28,-28,23,-28,26,-28,7,-28},new int[]{-5,84,-6,57,-19,60});
    states[84] = new State(-19);
    states[85] = new State(-6);
    states[86] = new State(-7);
    states[87] = new State(-4);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-24, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-25,13,-26});
    rules[3] = new Rule(-25, new int[]{-25,-27});
    rules[4] = new Rule(-25, new int[]{-27});
    rules[5] = new Rule(-27, new int[]{-28});
    rules[6] = new Rule(-27, new int[]{-29});
    rules[7] = new Rule(-27, new int[]{-30});
    rules[8] = new Rule(-28, new int[]{27,11,-10,23});
    rules[9] = new Rule(-10, new int[]{22});
    rules[10] = new Rule(-10, new int[]{});
    rules[11] = new Rule(-30, new int[]{27,11,20,-23,21,-23});
    rules[12] = new Rule(-23, new int[]{26});
    rules[13] = new Rule(-23, new int[]{23});
    rules[14] = new Rule(-23, new int[]{7,-22,8});
    rules[15] = new Rule(-22, new int[]{-23});
    rules[16] = new Rule(-22, new int[]{-22,4,-23});
    rules[17] = new Rule(-29, new int[]{27,14,-8});
    rules[18] = new Rule(-8, new int[]{-8,4,-13,-5});
    rules[19] = new Rule(-8, new int[]{-13,-5});
    rules[20] = new Rule(-13, new int[]{-13,-6});
    rules[21] = new Rule(-13, new int[]{});
    rules[22] = new Rule(-5, new int[]{19,26});
    rules[23] = new Rule(-5, new int[]{});
    rules[24] = new Rule(-6, new int[]{-19,-3,-18,-2,-9});
    rules[25] = new Rule(-18, new int[]{6,-16,8});
    rules[26] = new Rule(-18, new int[]{});
    rules[27] = new Rule(-19, new int[]{-19,28,-17});
    rules[28] = new Rule(-19, new int[]{});
    rules[29] = new Rule(-17, new int[]{5,-16,8});
    rules[30] = new Rule(-17, new int[]{});
    rules[31] = new Rule(-9, new int[]{36});
    rules[32] = new Rule(-9, new int[]{});
    rules[33] = new Rule(-2, new int[]{32});
    rules[34] = new Rule(-2, new int[]{33});
    rules[35] = new Rule(-2, new int[]{34});
    rules[36] = new Rule(-2, new int[]{});
    rules[37] = new Rule(-3, new int[]{23});
    rules[38] = new Rule(-3, new int[]{26});
    rules[39] = new Rule(-3, new int[]{-4});
    rules[40] = new Rule(-4, new int[]{7,-8,8});
    rules[41] = new Rule(-26, new int[]{});
    rules[42] = new Rule(-26, new int[]{-31,-26});
    rules[43] = new Rule(-31, new int[]{29,-20});
    rules[44] = new Rule(-20, new int[]{-14});
    rules[45] = new Rule(-20, new int[]{9,-21,10});
    rules[46] = new Rule(-21, new int[]{});
    rules[47] = new Rule(-21, new int[]{-21,-14});
    rules[48] = new Rule(-14, new int[]{28,-15,-7});
    rules[49] = new Rule(-15, new int[]{7,-16,8});
    rules[50] = new Rule(-15, new int[]{});
    rules[51] = new Rule(-16, new int[]{-16,12,-12});
    rules[52] = new Rule(-16, new int[]{-12});
    rules[53] = new Rule(-12, new int[]{31});
    rules[54] = new Rule(-12, new int[]{23});
    rules[55] = new Rule(-12, new int[]{25});
    rules[56] = new Rule(-12, new int[]{26});
    rules[57] = new Rule(-12, new int[]{-11});
    rules[58] = new Rule(-11, new int[]{26,6,-16,8});
    rules[59] = new Rule(-7, new int[]{-7,26});
    rules[60] = new Rule(-7, new int[]{});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // lp_description -> structure, PROC, options_section
{ 
			ConstructedGrammar.PostProcessing();
			Log.AddRange(ConstructedGrammar.CheckValidity()); 
		}
        break;
      case 8: // terminal -> ENTITY_NAME, COLON, opt_linestart, REGEX
{ 
			SafeGrammarAction(() => { 
				ConstructedGrammar.DeclareTerminal(ValueStack[ValueStack.Depth-4].strVal, ValueStack[ValueStack.Depth-1].strVal, ValueStack[ValueStack.Depth-2].boolVal);
				ConstructedGrammar.AddLocation(ValueStack[ValueStack.Depth-4].strVal, LocationStack[LocationStack.Depth-4].Start);
			}, LocationStack[LocationStack.Depth-4].Start);
		}
        break;
      case 9: // opt_linestart -> LINESTART
{ CurrentSemanticValue.boolVal = true; }
        break;
      case 10: // opt_linestart -> /* empty */
{ CurrentSemanticValue.boolVal = false; }
        break;
      case 11: // pair -> ENTITY_NAME, COLON, LEFT, pair_border, RIGHT, pair_border
{
			SafeGrammarAction(() => { 
				ConstructedGrammar.DeclarePair(ValueStack[ValueStack.Depth-6].strVal, ValueStack[ValueStack.Depth-3].strSet, ValueStack[ValueStack.Depth-1].strSet);
				ConstructedGrammar.AddLocation(ValueStack[ValueStack.Depth-6].strVal, LocationStack[LocationStack.Depth-6].Start);
			}, LocationStack[LocationStack.Depth-6].Start);
		}
        break;
      case 12: // pair_border -> ID
{ CurrentSemanticValue.strSet = new HashSet<string>() { ValueStack[ValueStack.Depth-1].strVal }; }
        break;
      case 13: // pair_border -> REGEX
{ 	
			var generated = ConstructedGrammar.GenerateTerminal(ValueStack[ValueStack.Depth-1].strVal);
			ConstructedGrammar.AddLocation(generated, LocationStack[LocationStack.Depth-1].Start);
			CurrentSemanticValue.strSet = new HashSet<string>() { generated };
		}
        break;
      case 14: // pair_border -> LROUND_BRACKET, pair_border_group_content, RROUND_BRACKET
{ CurrentSemanticValue.strSet = ValueStack[ValueStack.Depth-2].strSet; }
        break;
      case 15: // pair_border_group_content -> pair_border
{ CurrentSemanticValue.strSet = ValueStack[ValueStack.Depth-1].strSet; }
        break;
      case 16: // pair_border_group_content -> pair_border_group_content, OR, pair_border
{ ValueStack[ValueStack.Depth-3].strSet.UnionWith(ValueStack[ValueStack.Depth-1].strSet); CurrentSemanticValue.strSet = ValueStack[ValueStack.Depth-3].strSet; }
        break;
      case 17: // nonterminal -> ENTITY_NAME, EQUALS, body
{ 
			var aliases = this.Aliases;
			this.Aliases = new HashSet<string>(); 
			
			SafeGrammarAction(() => { 
				ConstructedGrammar.DeclareNonterminal(ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].altList);
				ConstructedGrammar.AddLocation(ValueStack[ValueStack.Depth-3].strVal, LocationStack[LocationStack.Depth-3].Start);
				
				if(aliases.Count > 0)
					ConstructedGrammar.AddAliases(ValueStack[ValueStack.Depth-3].strVal, aliases);
			}, LocationStack[LocationStack.Depth-3].Start);
		}
        break;
      case 18: // body -> body, OR, alternative, optional_alias
{ 
			CurrentSemanticValue.altList = ValueStack[ValueStack.Depth-4].altList; 
			ValueStack[ValueStack.Depth-2].altVal.Alias = ValueStack[ValueStack.Depth-1].strVal; 
			CurrentSemanticValue.altList.Add(ValueStack[ValueStack.Depth-2].altVal); 
		}
        break;
      case 19: // body -> alternative, optional_alias
{ 
			CurrentSemanticValue.altList = new List<Alternative>(); 
			ValueStack[ValueStack.Depth-2].altVal.Alias = ValueStack[ValueStack.Depth-1].strVal; 
			CurrentSemanticValue.altList.Add(ValueStack[ValueStack.Depth-2].altVal); 
		}
        break;
      case 20: // alternative -> alternative, entry
{ CurrentSemanticValue.altVal = ValueStack[ValueStack.Depth-2].altVal; CurrentSemanticValue.altVal.Add(ValueStack[ValueStack.Depth-1].entryVal); }
        break;
      case 21: // alternative -> /* empty */
{ CurrentSemanticValue.altVal = new Alternative(); }
        break;
      case 22: // optional_alias -> ARROW, ID
{ CurrentSemanticValue.strVal = ValueStack[ValueStack.Depth-1].strVal; this.Aliases.Add(ValueStack[ValueStack.Depth-1].strVal); }
        break;
      case 23: // optional_alias -> /* empty */
{ CurrentSemanticValue.strVal = null; }
        break;
      case 24: // entry -> context_options, entry_core, entry_args, quantifier, prec_nonempty
{ 		
			var opts = new LocalOptions();
			
			foreach(var opt in ValueStack[ValueStack.Depth-5].optionParamsList)
			{
				NodeOption nodeOpt;		
				if(!Enum.TryParse<NodeOption>(opt.Item1.ToUpper(), out nodeOpt))
				{
					MappingOption mapOpt;
					if(!Enum.TryParse<MappingOption>(opt.Item1.ToUpper(), out mapOpt))
					{
						Log.Add(Message.Error(
							"Неизвестная опция '" + opt.Item1 + "'",
							LocationStack[LocationStack.Depth-5].Start,
							"LanD"
						));
					}
					else
						opts.Set(mapOpt, opt.Item2.ToArray());				
				}
				else
					opts.Set(nodeOpt);	
			}
			
			if(ValueStack[ValueStack.Depth-2].optQuantVal.HasValue)
			{
				if(ValueStack[ValueStack.Depth-4].strVal.StartsWith(Grammar.ANY_TOKEN_NAME))
				{
					Log.Add(Message.Warning(
							"Использование квантификаторов с символом '" + Grammar.ANY_TOKEN_NAME + "' избыточно и не влияет на процесс разбора",
							LocationStack[LocationStack.Depth-5].Start,
							"LanD"
						));
				}
				else
				{			
					var generated = ConstructedGrammar.GenerateNonterminal(ValueStack[ValueStack.Depth-4].strVal, ValueStack[ValueStack.Depth-2].optQuantVal.Value, ValueStack[ValueStack.Depth-1].boolVal);
					ConstructedGrammar.AddLocation(generated, CurrentLocationSpan.Start);
					
					CurrentSemanticValue.entryVal = new Entry(generated, opts);
				}
			}
			
			if(CurrentSemanticValue.entryVal == null)
			{
				if(ValueStack[ValueStack.Depth-4].strVal.StartsWith(Grammar.ANY_TOKEN_NAME))
				{
					AnyOption sugarOption;

					if(Enum.TryParse(ValueStack[ValueStack.Depth-4].strVal.Substring(Grammar.ANY_TOKEN_NAME.Length), out sugarOption))
						opts.AnyOptions[sugarOption] = new HashSet<string>(ValueStack[ValueStack.Depth-3].dynamicList.Select(e=>(string)e)); 
					else
					{
						foreach(var opt in ValueStack[ValueStack.Depth-3].dynamicList)
						{
							var errorGroupName = String.Empty;
							
							if(opt is ArgumentGroup)
							{
								var group = (ArgumentGroup)opt;

								if(Enum.TryParse(group.Name, out sugarOption))
									opts.AnyOptions[sugarOption] = new HashSet<string>(group.Arguments.Select(e=>(string)e)); 
								else
									errorGroupName = group.Name;
							}
							else if(opt is String)
							{
								if(Enum.TryParse((string)opt, out sugarOption))
									opts.AnyOptions[sugarOption] = new HashSet<string>(); 
								else
									errorGroupName = (string)opt;
							}
							
							if(!String.IsNullOrEmpty(errorGroupName))
							{
								Log.Add(Message.Error(
									"При описании '" + Grammar.ANY_TOKEN_NAME + "' использовано неизвестное имя группы '" 
										+ errorGroupName + "', группа проигнорирована",
									LocationStack[LocationStack.Depth-5].Start,
									"LanD"
								));
							}
						}
					}				
					
					CurrentSemanticValue.entryVal = new Entry(Grammar.ANY_TOKEN_NAME, opts);
				}
				else
				{
					CurrentSemanticValue.entryVal = new Entry(ValueStack[ValueStack.Depth-4].strVal, opts);
				}
			}
		}
        break;
      case 25: // entry_args -> ELEM_LROUND_BRACKET, args, RROUND_BRACKET
{ CurrentSemanticValue.dynamicList = ValueStack[ValueStack.Depth-2].dynamicList; }
        break;
      case 26: // entry_args -> /* empty */
{ CurrentSemanticValue.dynamicList = new List<dynamic>(); }
        break;
      case 27: // context_options -> context_options, OPTION_NAME, context_opt_args
{ 
			CurrentSemanticValue.optionParamsList = ValueStack[ValueStack.Depth-3].optionParamsList; 
			CurrentSemanticValue.optionParamsList.Add(new Tuple<string, List<dynamic>>(ValueStack[ValueStack.Depth-2].strVal, ValueStack[ValueStack.Depth-1].dynamicList)); 
		}
        break;
      case 28: // context_options -> /* empty */
{ CurrentSemanticValue.optionParamsList = new List<Tuple<string, List<dynamic>>>(); }
        break;
      case 29: // context_opt_args -> OPT_LROUND_BRACKET, args, RROUND_BRACKET
{ CurrentSemanticValue.dynamicList = ValueStack[ValueStack.Depth-2].dynamicList; }
        break;
      case 30: // context_opt_args -> /* empty */
{ CurrentSemanticValue.dynamicList = new List<dynamic>(); }
        break;
      case 31: // prec_nonempty -> PREC_NONEMPTY
{ CurrentSemanticValue.boolVal = true; }
        break;
      case 32: // prec_nonempty -> /* empty */
{ CurrentSemanticValue.boolVal = false; }
        break;
      case 33: // quantifier -> OPTIONAL
{ CurrentSemanticValue.optQuantVal = ValueStack[ValueStack.Depth-1].quantVal; }
        break;
      case 34: // quantifier -> ZERO_OR_MORE
{ CurrentSemanticValue.optQuantVal = ValueStack[ValueStack.Depth-1].quantVal; }
        break;
      case 35: // quantifier -> ONE_OR_MORE
{ CurrentSemanticValue.optQuantVal = ValueStack[ValueStack.Depth-1].quantVal; }
        break;
      case 36: // quantifier -> /* empty */
{ CurrentSemanticValue.optQuantVal = null; }
        break;
      case 37: // entry_core -> REGEX
{ 
			CurrentSemanticValue.strVal = ConstructedGrammar.GenerateTerminal(ValueStack[ValueStack.Depth-1].strVal);
			ConstructedGrammar.AddLocation(CurrentSemanticValue.strVal, CurrentLocationSpan.Start);
		}
        break;
      case 38: // entry_core -> ID
{ CurrentSemanticValue.strVal = ValueStack[ValueStack.Depth-1].strVal; }
        break;
      case 39: // entry_core -> group
{ CurrentSemanticValue.strVal = ValueStack[ValueStack.Depth-1].strVal; }
        break;
      case 40: // group -> LROUND_BRACKET, body, RROUND_BRACKET
{ 
			CurrentSemanticValue.strVal = ConstructedGrammar.GenerateNonterminal(ValueStack[ValueStack.Depth-2].altList);
			ConstructedGrammar.AddLocation(CurrentSemanticValue.strVal, CurrentLocationSpan.Start);
		}
        break;
      case 43: // category_block -> CATEGORY_NAME, option_or_block
{
			OptionCategory optCategory;
			if(!Enum.TryParse(ValueStack[ValueStack.Depth-2].strVal.ToUpper(), out optCategory))
			{
				Log.Add(Message.Error(
					"Неизвестная категория опций '" + ValueStack[ValueStack.Depth-2].strVal + "'",
					LocationStack[LocationStack.Depth-2].Start,
					"LanD"
				));
			}
			
			foreach(var option in ValueStack[ValueStack.Depth-1].optionsList)
			{
				bool goodOption = true;
				switch (optCategory)
				{
					case OptionCategory.PARSING:
						ParsingOption parsingOpt;
						goodOption = Enum.TryParse(option.Name.ToUpper(), out parsingOpt);
						if(goodOption) 
							SafeGrammarAction(() => { 
						 		ConstructedGrammar.SetOption(parsingOpt, option.Symbols.ToArray());
						 	}, LocationStack[LocationStack.Depth-2].Start);
						break;
					case OptionCategory.NODES:
						NodeOption nodeOpt;
						goodOption = Enum.TryParse(option.Name.ToUpper(), out nodeOpt);
						if(goodOption)
							SafeGrammarAction(() => { 					
								ConstructedGrammar.SetOption(nodeOpt, option.Symbols.ToArray());
							}, LocationStack[LocationStack.Depth-2].Start);
						break;
					case OptionCategory.MAPPING:
						MappingOption mappingOpt;
						goodOption = Enum.TryParse(option.Name.ToUpper(), out mappingOpt);
						if(goodOption)
							SafeGrammarAction(() => { 			
								ConstructedGrammar.SetOption(mappingOpt, option.Symbols.ToArray(), option.Arguments.ToArray());
							}, LocationStack[LocationStack.Depth-2].Start);
						break;
					case OptionCategory.CUSTOMBLOCK:
						CustomBlockOption customBlockOption;
						goodOption = Enum.TryParse(option.Name.ToUpper(), out customBlockOption);
						if(goodOption)
							SafeGrammarAction(() => { 			
								ConstructedGrammar.SetOption(customBlockOption, option.Symbols.ToArray(), option.Arguments.ToArray());
							}, LocationStack[LocationStack.Depth-2].Start);
						break;
					default:
						break;
				}
				
				if(!goodOption)
				{
					Log.Add(Message.Error(
						"Опция '" + option.Name + "' не определена для категории '" + ValueStack[ValueStack.Depth-2].strVal + "'",
						LocationStack[LocationStack.Depth-1].Start,
						"LanD"
					));
				}
			}
		}
        break;
      case 44: // option_or_block -> option
{ CurrentSemanticValue.optionsList = new List<OptionDeclaration>(){ ValueStack[ValueStack.Depth-1].optDeclVal }; }
        break;
      case 45: // option_or_block -> LCURVE_BRACKET, options, RCURVE_BRACKET
{ CurrentSemanticValue.optionsList = ValueStack[ValueStack.Depth-2].optionsList; }
        break;
      case 46: // options -> /* empty */
{ CurrentSemanticValue.optionsList = new List<OptionDeclaration>(); }
        break;
      case 47: // options -> options, option
{ CurrentSemanticValue.optionsList = ValueStack[ValueStack.Depth-2].optionsList; ValueStack[ValueStack.Depth-2].optionsList.Add(ValueStack[ValueStack.Depth-1].optDeclVal);  }
        break;
      case 48: // option -> OPTION_NAME, opt_args, identifiers
{
			CurrentSemanticValue.optDeclVal = new OptionDeclaration()
			{
				Name = ValueStack[ValueStack.Depth-3].strVal,
				Arguments = ValueStack[ValueStack.Depth-2].dynamicList,
				Symbols = ValueStack[ValueStack.Depth-1].strList
			};
		}
        break;
      case 49: // opt_args -> LROUND_BRACKET, args, RROUND_BRACKET
{ CurrentSemanticValue.dynamicList = ValueStack[ValueStack.Depth-2].dynamicList; }
        break;
      case 50: // opt_args -> /* empty */
{ CurrentSemanticValue.dynamicList = new List<dynamic>(); }
        break;
      case 51: // args -> args, COMMA, argument
{ 
			CurrentSemanticValue.dynamicList = ValueStack[ValueStack.Depth-3].dynamicList; 
			CurrentSemanticValue.dynamicList.Add(ValueStack[ValueStack.Depth-1].dynamicVal); 
		}
        break;
      case 52: // args -> argument
{ CurrentSemanticValue.dynamicList = new List<dynamic>(){ ValueStack[ValueStack.Depth-1].dynamicVal }; }
        break;
      case 53: // argument -> RNUM
{ CurrentSemanticValue.dynamicVal = ValueStack[ValueStack.Depth-1].doubleVal; }
        break;
      case 54: // argument -> REGEX
{
			var generated = ConstructedGrammar.GenerateTerminal((string)ValueStack[ValueStack.Depth-1].strVal);
			ConstructedGrammar.AddLocation(generated, LocationStack[LocationStack.Depth-1].Start);		
			CurrentSemanticValue.dynamicVal = generated;
		}
        break;
      case 55: // argument -> STRING
{ CurrentSemanticValue.dynamicVal = ValueStack[ValueStack.Depth-1].strVal.Substring(1, ValueStack[ValueStack.Depth-1].strVal.Length - 2); }
        break;
      case 56: // argument -> ID
{ CurrentSemanticValue.dynamicVal = ValueStack[ValueStack.Depth-1].strVal; }
        break;
      case 57: // argument -> argument_group
{ CurrentSemanticValue.dynamicVal = ValueStack[ValueStack.Depth-1].argGroupVal; }
        break;
      case 58: // argument_group -> ID, ELEM_LROUND_BRACKET, args, RROUND_BRACKET
{ 
			CurrentSemanticValue.argGroupVal = new ArgumentGroup()
			{
				Name = ValueStack[ValueStack.Depth-4].strVal,
				Arguments = ValueStack[ValueStack.Depth-2].dynamicList
			};
		}
        break;
      case 59: // identifiers -> identifiers, ID
{ CurrentSemanticValue.strList = ValueStack[ValueStack.Depth-2].strList; CurrentSemanticValue.strList.Add(ValueStack[ValueStack.Depth-1].strVal); }
        break;
      case 60: // identifiers -> /* empty */
{ CurrentSemanticValue.strList = new List<string>(); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


private void SafeGrammarAction(Action action, PointLocation loc)
{
	try
	{
		action();
	}
	catch(IncorrectGrammarException ex)
	{
		Log.Add(Message.Error(
			ex.Message,
			loc,
			"LanD"
		));
	}
}

}
}
