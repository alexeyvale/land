// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-QMIGNCH
// DateTime: 03.01.2018 23:11:11
// UserName: Алексей
// Input file <./Land.y - 03.01.2018 23:11:11>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using System.Linq;
using LandParserGenerator;

namespace LandParserGenerator.Builder
{
public enum Tokens {error=2,EOF=3,OR=4,COLON=5,LPAR=6,
    RPAR=7,COMMA=8,PROC=9,EQUALS=10,MINUS=11,PLUS=12,
    EXCLAMATION=13,ADD_CHILD=14,DOT=15,REGEX=16,NAMED=17,STRING=18,
    ID=19,ENTITY_NAME=20,POSITION=21,OPTIONAL=22,ZERO_OR_MORE=23,ONE_OR_MORE=24,
    OPTION_ITEMSLIST=25,OPTION_SKIP=26,OPTION_NOITEMS=27};

public struct ValueType
{ 
	public int intVal; 
	public string strVal;
	public List<string> strList;
	
	public List<Alternative> altList;
	// ÐÐ½ÑÐ¾ÑÐ¼Ð°ÑÐ¸Ñ Ð¾ ÐºÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ðµ Ð¿Ð¾Ð²ÑÐ¾ÑÐµÐ½Ð¸Ð¹
	public Quantifier quantVal;
}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from ./Land.y - 03.01.2018 23:11:11
    public Parser(AbstractScanner<LandParserGenerator.Builder.ValueType, LexLocation> scanner) : base(scanner) { }
    
    public Grammar ConstructedGrammar = new Grammar();
  // End verbatim content from ./Land.y - 03.01.2018 23:11:11

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[32];
  private static State[] states = new State[40];
  private static string[] nonTerms = new string[] {
      "lp_description", "quantifier", "body_element_core", "body_element_atom", 
      "group", "body_element", "identifiers", "body", "$accept", "structure", 
      "options", "element", "terminal", "nonterminal", "option", "itemslist_option", 
      "skip_option", "noitems_option", };

  static Parser() {
    states[0] = new State(new int[]{20,20},new int[]{-1,1,-10,3,-12,39,-13,19,-14,38});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{9,4,20,20},new int[]{-12,18,-13,19,-14,38});
    states[4] = new State(-22,new int[]{-11,5});
    states[5] = new State(new int[]{25,8,26,13,27,16,3,-2},new int[]{-15,6,-16,7,-17,12,-18,15});
    states[6] = new State(-23);
    states[7] = new State(-24);
    states[8] = new State(new int[]{19,11},new int[]{-7,9});
    states[9] = new State(new int[]{19,10,25,-27,26,-27,27,-27,3,-27});
    states[10] = new State(-30);
    states[11] = new State(-31);
    states[12] = new State(-25);
    states[13] = new State(new int[]{19,11},new int[]{-7,14});
    states[14] = new State(new int[]{19,10,25,-28,26,-28,27,-28,3,-28});
    states[15] = new State(-26);
    states[16] = new State(new int[]{19,11},new int[]{-7,17});
    states[17] = new State(new int[]{19,10,25,-29,26,-29,27,-29,3,-29});
    states[18] = new State(-3);
    states[19] = new State(-5);
    states[20] = new State(new int[]{16,21,10,22});
    states[21] = new State(-7);
    states[22] = new State(-11,new int[]{-8,23});
    states[23] = new State(new int[]{4,25,18,32,19,33,6,35,9,-8,20,-8},new int[]{-6,24,-3,26,-4,31,-5,34});
    states[24] = new State(-9);
    states[25] = new State(-10);
    states[26] = new State(new int[]{22,28,23,29,24,30,4,-16,18,-16,19,-16,6,-16,9,-16,20,-16,7,-16},new int[]{-2,27});
    states[27] = new State(-12);
    states[28] = new State(-13);
    states[29] = new State(-14);
    states[30] = new State(-15);
    states[31] = new State(-17);
    states[32] = new State(-19);
    states[33] = new State(-20);
    states[34] = new State(-18);
    states[35] = new State(-11,new int[]{-8,36});
    states[36] = new State(new int[]{7,37,4,25,18,32,19,33,6,35},new int[]{-6,24,-3,26,-4,31,-5,34});
    states[37] = new State(-21);
    states[38] = new State(-6);
    states[39] = new State(-4);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-9, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-10,9,-11});
    rules[3] = new Rule(-10, new int[]{-10,-12});
    rules[4] = new Rule(-10, new int[]{-12});
    rules[5] = new Rule(-12, new int[]{-13});
    rules[6] = new Rule(-12, new int[]{-14});
    rules[7] = new Rule(-13, new int[]{20,16});
    rules[8] = new Rule(-14, new int[]{20,10,-8});
    rules[9] = new Rule(-8, new int[]{-8,-6});
    rules[10] = new Rule(-8, new int[]{-8,4});
    rules[11] = new Rule(-8, new int[]{});
    rules[12] = new Rule(-6, new int[]{-3,-2});
    rules[13] = new Rule(-2, new int[]{22});
    rules[14] = new Rule(-2, new int[]{23});
    rules[15] = new Rule(-2, new int[]{24});
    rules[16] = new Rule(-2, new int[]{});
    rules[17] = new Rule(-3, new int[]{-4});
    rules[18] = new Rule(-3, new int[]{-5});
    rules[19] = new Rule(-4, new int[]{18});
    rules[20] = new Rule(-4, new int[]{19});
    rules[21] = new Rule(-5, new int[]{6,-8,7});
    rules[22] = new Rule(-11, new int[]{});
    rules[23] = new Rule(-11, new int[]{-11,-15});
    rules[24] = new Rule(-15, new int[]{-16});
    rules[25] = new Rule(-15, new int[]{-17});
    rules[26] = new Rule(-15, new int[]{-18});
    rules[27] = new Rule(-16, new int[]{25,-7});
    rules[28] = new Rule(-17, new int[]{26,-7});
    rules[29] = new Rule(-18, new int[]{27,-7});
    rules[30] = new Rule(-7, new int[]{-7,19});
    rules[31] = new Rule(-7, new int[]{19});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 7: // terminal -> ENTITY_NAME, REGEX
{ ConstructedGrammar.DeclareTerminal(ValueStack[ValueStack.Depth-2].strVal, ValueStack[ValueStack.Depth-1].strVal); }
        break;
      case 8: // nonterminal -> ENTITY_NAME, EQUALS, body
{ ConstructedGrammar.DeclareNonterminal(ValueStack[ValueStack.Depth-3].strVal, ValueStack[ValueStack.Depth-1].altList); }
        break;
      case 9: // body -> body, body_element
{ 
			CurrentSemanticValue.altList = ValueStack[ValueStack.Depth-2].altList; 
			CurrentSemanticValue.altList[CurrentSemanticValue.altList.Count].Add(ValueStack[ValueStack.Depth-1].strVal); 	
		}
        break;
      case 10: // body -> body, OR
{ 
			CurrentSemanticValue.altList = ValueStack[ValueStack.Depth-2].altList;
			CurrentSemanticValue.altList.Add(new Alternative());		
		}
        break;
      case 11: // body -> /* empty */
{ 
			CurrentSemanticValue.altList = new List<Alternative>(); 
			CurrentSemanticValue.altList.Add(new Alternative()); 
		}
        break;
      case 12: // body_element -> body_element_core, quantifier
{ 
			CurrentSemanticValue.strVal = new Entry(ValueStack[ValueStack.Depth-2].strVal, ValueStack[ValueStack.Depth-1].quantVal);
		}
        break;
      case 13: // quantifier -> OPTIONAL
{ CurrentSemanticValue.quantVal = ValueStack[ValueStack.Depth-1].quantVal; }
        break;
      case 14: // quantifier -> ZERO_OR_MORE
{ CurrentSemanticValue.quantVal = ValueStack[ValueStack.Depth-1].quantVal; }
        break;
      case 15: // quantifier -> ONE_OR_MORE
{ CurrentSemanticValue.quantVal = ValueStack[ValueStack.Depth-1].quantVal; }
        break;
      case 16: // quantifier -> /* empty */
{ CurrentSemanticValue.quantVal = Quantifier.ONE; }
        break;
      case 17: // body_element_core -> body_element_atom
{ CurrentSemanticValue.strVal = ValueStack[ValueStack.Depth-1].strVal; }
        break;
      case 18: // body_element_core -> group
{ CurrentSemanticValue.strVal = ValueStack[ValueStack.Depth-1].strVal; }
        break;
      case 19: // body_element_atom -> STRING
{ 
			CurrentSemanticValue.strVal = ConstructedGrammar.GenerateTerminal(ValueStack[ValueStack.Depth-1].strVal);
		}
        break;
      case 20: // body_element_atom -> ID
{ CurrentSemanticValue.strVal = ValueStack[ValueStack.Depth-1].strVal; }
        break;
      case 21: // group -> LPAR, body, RPAR
{ CurrentSemanticValue.strVal = ConstructedGrammar.GenerateNonterminal(ValueStack[ValueStack.Depth-2].altList); }
        break;
      case 27: // itemslist_option -> OPTION_ITEMSLIST, identifiers
{ ConstructedGrammar.SetListSymbols(ValueStack[ValueStack.Depth-1].strList.ToArray()); }
        break;
      case 28: // skip_option -> OPTION_SKIP, identifiers
{ ConstructedGrammar.SetSkipTokens(ValueStack[ValueStack.Depth-1].strList.ToArray()); }
        break;
      case 30: // identifiers -> identifiers, ID
{ CurrentSemanticValue.strList = ValueStack[ValueStack.Depth-2].strList; CurrentSemanticValue.strList.Add(ValueStack[ValueStack.Depth-1].strVal); }
        break;
      case 31: // identifiers -> ID
{ CurrentSemanticValue.strList = new List<string>(); CurrentSemanticValue.strList.Add(ValueStack[ValueStack.Depth-1].strVal); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
