
file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\DefaultLanguageInformation.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\DefaultLanguageInformation.cs
*
[1039]	return scope.Name+template_str;
[1098]	return scope.Name + template_str;	0,98
[1097]	return scope.Name.Replace("<>", "") + template_str;	0,59
*
[1037]	if (scope.Name.StartsWith("$"))
[1094]	if (scope.Name.StartsWith("$"))	0,96
[1096]	if (!string.IsNullOrEmpty(template_str))	0,38
*
[600]	{
[642]	{	0,99
[635]	{	0,97
*
[773]	doc = doc.Replace("<params>", "");
[815]	doc = doc.Replace("<params>", "");	1,00
[817]	doc = doc.Replace("</param>", "");	0,88
*
[1596]	if (t.IsArray)
[1666]	if (t.IsArray)	1,00
[1670]	if (!no_alias)	0,55
*
[1623]	StringBuilder sb = new StringBuilder();
[1693]	StringBuilder sb = new StringBuilder();	1,00
[1692]	string name = GetShortTypeName(t);	0,48
*
[120]	keywords.Add("goto", "goto"); keys.Add("goto");
[121]	keywords.Add("goto", "goto"); keys.Add("goto");	0,99
[117]	keywords.Add("not", "not"); keys.Add("not");	0,88
*
[103]	keywords.Add("continue", "continue"); keys.Add("continue");
[104]	keywords.Add("continue", "continue"); keys.Add("continue");	0,99
[97]	keywords.Add("sequence", "sequence"); keys.Add("sequence");	0,73

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\PatternsDesugaringVisitor.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\PatternsDesugaringVisitor.cs
*
[323]	// удаляем else из if
[937]	// удаляем else из if	0,86
[927]	// добавляем else	0,48
*
[292]	// Добавляем, чтобы на конвертировать еще раз, если потребуется
[882]	// Добавляем, чтобы на конвертировать еще раз, если потребуется	0,86
[865]	// Добавляем объявление <>visitElseBranch если мы находимся в первом в цепочке if, который не является вложенным	0,32
*
[48]	result.Add(CastVariableDefinition);
[48]	result.Add(CastVariableDefinition);	1,00
[50]	result.Add(SuccessVariableDefinition);	0,75
*
[47]	var result = new List<statement>();
[47]	var result = new List<statement>();	1,00
[48]	result.Add(CastVariableDefinition);	0,44
*
[193]	var patternLocation = GetLocation(isPatternExpr);
[641]	var patternLocation = GetLocation(isPatternExpr);	0,93
[651]	case PatternLocation.IfCondition: DesugarIsExpressionInIfCondition(isPatternExpr); break;	0,46
*
[202]	}
[647]	}	0,84
[640]	}	0,74
*
[118]	DesugarIsExpression(isPatternExpr);
[217]	DesugarIsExpression(isPatternExpr);	0,98
[210]	public override void visit(is_pattern_expr isPatternExpr)	0,29
*
[114]	// TODO Patterns: convert to compilation error
[211]	{	0,72
[212]	if (GetLocation(isPatternExpr) == PatternLocation.Unknown)	0,71

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\syntax_tree_visitor.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\syntax_tree_visitor.cs
*
[2682]	if ((context.converting_block() == block_type.function_block ||
[2754]	if ((context.converting_block() == block_type.function_block ||	0,96
[2759]	if (context.converting_block() == block_type.function_block)	0,92
*
[2675]	}
[2725]	}	0,80
[2764]	}	0,80
*
[12201]	ExecuteCommonChecks(deconstructor);
[12843]	ExecuteCommonChecks(deconstructor);	0,97
[12856]	ExecuteCommonChecks(deconstructor);	0,95
*
[12212]	AddError(get_location(_procedure_definition), "INSTANCE_DECONSTRUCTORS_CANNOT_BE_GENERIC");
[12854]	AddError(get_location(_procedure_definition), "INSTANCE_DECONSTRUCTORS_CANNOT_BE_GENERIC");	0,99
[12781]	AddError(get_location(_procedure_definition), "INVALID_INTERFACE_MEMBER");	0,68
*
[13263]	AddError(get_location(type), "STRUCT_TYPE_DEFINITION_IN_FORMAL_PARAM");
[13995]	AddError(get_location(type), "STRUCT_TYPE_DEFINITION_IN_FORMAL_PARAM");	0,96
[14014]	AddError(get_location(type), "ANONYMOUS_DELEGATE_IN_INTERFACE_NOT_ALLOWED");	0,51
*
[13265]	if (context.top_function is common_method_node && (context.converted_type.IsInterface || context.top_function.polymorphic_state == SemanticTree.polymorphic_state.ps_virtual_abstract )
[14012]	if (context.top_function is common_method_node && (context.converted_type.IsInterface || context.top_function.polymorphic_state == SemanticTree.polymorphic_state.ps_virtual_abstract )	0,98
[13992]	if (type is SyntaxTree.class_definition || /*type is SyntaxTree.enum_type_definition ||*/	0,26
*
[8277]	SymbolTable.WithScope WithScope = new SymbolTable.WithScope(SymbolTable, context.CurrentScope, null);
[8678]	SymbolTable.WithScope WithScope = new SymbolTable.WithScope(SymbolTable, context.CurrentScope, null);	1,00
[8676]	List<SymbolTable.Scope> WithTypesList = new List<SymbolTable.Scope>();	0,52
*
[8319]	else
[8721]	else	0,98
[8727]	else	0,95
*
[11297]	if (_type_declaration.attributes != null)
[11802]	if (_type_declaration.attributes != null)	0,57
[11786]	if (_type_declaration.attributes != null)	0,55
*
[11172]	for (int k = 0; k < cl_def.template_args.idents.Count; k++)
[11712]	for (int k = 0; k < cl_def.template_args.idents.Count; k++)	0,98
[11739]	int count = cl_def.template_args.idents.Count;	0,74
*
[3909]	//pal.proc_attributes.Add(new PascalABCCompiler.SyntaxTree.procedure_attribute(SyntaxTree.proc_attribute.attr_overload)); attr_overload - убрал отовсюду! ССМ
[4115]	//pal.proc_attributes.Add(new PascalABCCompiler.SyntaxTree.procedure_attribute(SyntaxTree.proc_attribute.attr_overload)); attr_overload - убрал отовсюду! ССМ	1,00
[4114]	SyntaxTree.procedure_attributes_list pal = new PascalABCCompiler.SyntaxTree.procedure_attributes_list();	0,47
*
[3893]	//невозможно сгенерировать конструктор по умолчанию.
[4099]	//невозможно сгенерировать конструктор по умолчанию.	0,98
[4098]	//У предка нет конструктора по умолчанию,	0,58
*
[12492]	WarningsList.Add(new OverrideOrReintroduceExpected(loc));
[13145]	WarningsList.Add(new OverrideOrReintroduceExpected(loc));	0,94
[13137]	internal void CheckOverrideOrReintroduceExpectedWarning(location loc)	0,40
*
[12488]	common_method_node cmn = context.top_function as common_method_node;
[13139]	common_method_node cmn = context.top_function as common_method_node;	0,97
[13142]	function_node fn = context.FindMethodToOverride(cmn);	0,34
*
[17156]	bool current_type_section_converting = type_section_converting;
[18143]	bool current_type_section_converting = type_section_converting;	1,00
[18277]	type_section_converting = current_type_section_converting;	0,58
*
[17218]	synonym_value, ctn, PascalABCCompiler.SemanticTree.polymorphic_state.ps_static,
[18205]	synonym_value, ctn, PascalABCCompiler.SemanticTree.polymorphic_state.ps_static,	1,00
[18206]	PascalABCCompiler.SemanticTree.field_access_level.fal_public, null));	0,49

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\NETGenerator.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\NETGenerator.cs
*
[5285]	}
[5536]	}	0,95
[5541]	}	0,94
*
[5278]	il.Emit(OpCodes.Ldloc, lb);
[5528]	//il.Emit(OpCodes.Ldloc, lb);	0,97
[5529]	//il.Emit(OpCodes.Box, lb.LocalType);	0,88
*
[7836]	}
[8154]	}	0,95
[8161]	}	0,85
*
[7856]	}
[8174]	}	0,90
[8173]	return;	0,70
*
[4735]	CreateArrayForClassField((cur_ti.init_meth as MethodBuilder).GetILGenerator(), fb, ti, value.inital_value as IArrayInitializer, value.type);
[4971]	CreateArrayForClassField((cur_ti.init_meth as MethodBuilder).GetILGenerator(), fb, ti, value.inital_value as IArrayInitializer, value.type);	0,99
[4969]	CreateArrayForClassField((cur_ti.init_meth as MethodBuilder).GetILGenerator(), fb, ti, value.inital_value as IArrayConstantNode, value.type);	0,91
*
[4732]	if (value.inital_value == null || value.inital_value is IArrayConstantNode)
[4968]	if (value.inital_value == null || value.inital_value is IArrayConstantNode)	1,00
[4973]	else if (value.inital_value is IArrayConstantNode)	0,65

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\DomSyntaxTreeVisitor.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\DomSyntaxTreeVisitor.cs
*
[1933]	_unit_module.compiler_directives = new List<PascalABCCompiler.SyntaxTree.compiler_directive>();
[2251]	_unit_module.compiler_directives = new List<PascalABCCompiler.SyntaxTree.compiler_directive>();	0,95
[2360]	System.Diagnostics.Debug.WriteLine("intellisense parsing interface started " + System.Convert.ToInt32((DateTime.Now - start_time).TotalMilliseconds));	0,48
*
[1983]	doc = new document(_unit_module.file_name);
[2314]	doc = new document(_unit_module.file_name);	0,95
[2317]	cur_scope.file_name = _unit_module.file_name;	0,60
*
[637]	else returned_scope = null;
[695]	else returned_scope = null;	0,93
[690]	TypeScope ts = returned_scope as TypeScope;	0,39
*
[633]	//throw new Exception("The method or operation is not implemented.");
[688]	//throw new Exception("The method or operation is not implemented.");	0,95
[690]	TypeScope ts = returned_scope as TypeScope;	0,29
*
[784]	{
[953]	{	0,92
[951]	{	0,89
*
[790]	{
[959]	{	0,95
[955]	{	0,85
*
[3906]	}
[4461]	}	0,95
[4460]	}	0,75
*
[3800]	{
[4341]	{	0,94
[4355]	{	0,82
*
[3313]	//throw new Exception("The method or operation is not implemented.");
[3848]	//throw new Exception("The method or operation is not implemented.");	0,97
[3850]	TypeScope ts = returned_scope as TypeScope;	0,28
*
[3315]	returned_scope = new SetScope(returned_scope as TypeScope);
[3850]	TypeScope ts = returned_scope as TypeScope;	0,72
[3853]	returned_scope = new SetScope(ts);	0,72
*
[4006]	{
[4561]	{	0,99
[4563]	{	0,94
*
[3962]	{
[4517]	{	0,99
[4513]	{	0,97
*
[2888]	if (_method_call.parameters != null && ps != null)
[3333]	if (_method_call.parameters != null && ps != null)	0,99
[3324]	if (_method_call.parameters != null)	0,77
*
[2896]	awaitedProcType = ps.parameters[i + (ps.IsExtension ? 1 : 0)].sc as TypeScope;
[3341]	awaitedProcType = ps.parameters[i + (ps.IsExtension ? 1 : 0)].sc as TypeScope;	0,97
[3346]	awaitedProcType = tmp_awaitedProcType;	0,49
*
[1853]	}
[2151]	}	0,98
[2145]	}	0,84
*
[1850]	#if DEBUG
[2148]	#if DEBUG	1,00
[2150]	#endif	0,37
*
[119]	return true;
[120]	return true;	0,87
[118]	return true;	0,82
*
[133]	else if (node is tuple_node)
[144]	else if (node is tuple_node)	0,93
[114]	else if (node is dot_node)	0,70
*
[411]	returned_scope = new ProcType(ps);
[455]	returned_scope = new ProcType(ps);	0,99
[453]	returned_scope = ps.return_type;	0,66
*
[415]	returned_scopes = cur_scope.FindOverloadNames(_ident.name);
[459]	returned_scopes = cur_scope.FindOverloadNames(_ident.name);	0,95
[453]	returned_scope = ps.return_type;	0,83
*
[2546]	else if (returned_scope is TypeScope)
[2938]	else if (returned_scope is TypeScope)	0,98
[2929]	else if (returned_scope is ElementScope)	0,84
*
[2519]	if (ts != null)
[2906]	if (ts != null)	0,93
[2911]	if (meths.Count > 0)	0,75
*
[1241]	cur_scope = ps;
[1451]	cur_scope = ps;	0,98
[1457]	//cur_scope = ps;	0,81
*
[1198]	if (_procedure_header.template_args != null && !ps.IsGeneric())
[1393]	if (_procedure_header.template_args != null && !ps.IsGeneric())	0,97
[1396]	if (_procedure_header.where_defs != null)	0,60

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\ViewOptionsContent.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\ViewOptionsContent.cs
*
[119]	MainForm.PlayPauseButtonsVisibleInPanel = cbShowDebugPlayPauseButtons.Checked;
[101]	MainForm.PlayPauseButtonsVisibleInPanel = cbShowDebugPlayPauseButtons.Checked;	0,97
[99]	UsOpt.PauseInRunModeIfConsole = cbPauseInRunModeIfConsole.Checked;	0,40
*
[85]	}
[85]	}	0,83
[70]	}	0,76

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\Tree.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\Tree.cs
*
[15752]	accessor_name?.FillParentsInAllChilds();
[15806]	accessor_name?.FillParentsInAllChilds();	0,90
[15808]	statment_for_formatting?.FillParentsInAllChilds();	0,68
*
[15751]	FillParentsInDirectChilds();
[15805]	FillParentsInDirectChilds();	0,95
[15807]	pr?.FillParentsInAllChilds();	0,62
*
[15900]	FillParentsInDirectChilds();
[16020]	FillParentsInDirectChilds();	0,95
[16022]	pr?.FillParentsInAllChilds();	0,62
*
[15901]	accessor_name?.FillParentsInAllChilds();
[16021]	accessor_name?.FillParentsInAllChilds();	0,90
[16023]	expression_for_formatting?.FillParentsInAllChilds();	0,67
*
[40638]	proc_body?.FillParentsInAllChilds();
[40851]	proc_body?.FillParentsInAllChilds();	0,99
[40852]	parameters?.FillParentsInAllChilds();	0,79
*
[40635]	ident_list?.FillParentsInAllChilds();
[40848]	ident_list?.FillParentsInAllChilds();	0,99
[40849]	return_type?.FillParentsInAllChilds();	0,76
*
[49554]	return copy;
[49942]	return copy;	0,99
[49943]	}	0,08
*
[49550]	pattern_deconstructor_parameter copy = new pattern_deconstructor_parameter();
[49938]	pattern_parameter copy = new pattern_parameter();	0,92
[49937]	{	0,61
*
[15744]	if (accessor_name != null)
[15794]	if (accessor_name != null)	0,90
[15796]	if (pr != null)	0,46
*
[15745]	accessor_name.Parent = this;
[15795]	accessor_name.Parent = this;	0,90
[15799]	statment_for_formatting.Parent = this;	0,52
*
[15876]	if (accessor_name != null)
[15982]	if (accessor_name != null)	0,90
[15980]	if (source_context != null)	0,47
*
[15880]	}
[15996]	}	0,79
[15986]	}	0,60

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\AssignTuplesDesugarVisitor.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\AssignTuplesDesugarVisitor.cs
*
[32]	
[37]		0,98
[41]		0,82
*
[38]	for (var i = 0; i < n; i++)
[43]	for (var i = 0; i < n; i++)	0,98
[41]		0,18

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\SymTable.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\SymTable.cs
*
[4161]	}*/
[4624]	}*/	0,99
[4633]	}	0,38
*
[4174]	lst.AddRange(topScope.GetNames());*/
[4637]	lst.AddRange(topScope.GetNames());*/	0,99
[4635]	lst.AddRange(baseScope.GetNames());	0,78
*
[3240]	{
[3657]	{	0,98
[3656]	if (this.IsMultiDynArray && arrs.IsMultiDynArray)	0,77
*
[3234]	if (ts is TypeSynonim) return this.IsConvertable((ts as TypeSynonim).actType);
[3651]	if (ts is TypeSynonim) return this.IsConvertable((ts as TypeSynonim).actType);	0,99
[3644]	return base.IsConvertable(ts);	0,41
*
[708]	{
[721]	{	0,93
[722]	lst.Add(ss.si);	0,69
*
[704]	List<SymInfo> lst = new List<SymInfo>();
[717]	List<SymInfo> lst = new List<SymInfo>();	0,99
[715]	public virtual SymInfo[] GetNamesAsInObject(ExpressionVisitor ev)	0,30
*
[1738]	//SortedDictionary<string,SymInfo> dict = new SortedDictionary<string,SymInfo>();
[2017]	List<SymInfo> lst = new List<SymInfo>();	0,48
[2016]	{	0,39
*
[1739]	return null;
[2022]	return lst.ToArray();	0,47
[2018]	lst.Add(InvokeMethod.si);	0,17
*
[5987]	si2 = new CompiledFieldScope(si2, mi as FieldInfo, this).si;
[6547]	si2 = new CompiledFieldScope(si2, mi as FieldInfo, this).si;	0,99
[6537]	si2 = new CompiledMethodScope(si2, mi as MethodInfo, this).si;	0,89
*
[5941]	}
[6501]	}	0,99
[6499]	}	0,94
*
[1782]	if (topScope != null) return topScope.FindNameInAnyOrder(name);
[2072]	return parent.FindNameInAnyOrder(name);	0,51
[2071]	{	0,39
*
[1783]	return null;
[2072]	return parent.FindNameInAnyOrder(name);	0,57
[2071]	{	0,16
*
[1764]	//SortedDictionary<string,SymInfo> dict = new SortedDictionary<string,SymInfo>();
[2047]	List<SymInfo> lst = new List<SymInfo>();	0,48
[2046]	{	0,39
*
[1765]	return new SymInfo[0];
[2052]	return lst.ToArray();	0,47
[2048]	lst.Add(InvokeMethod.si);	0,21
*
[2002]	foreach (ElementScope parameter in this.parameters)
[2310]	foreach (ElementScope parameter in this.parameters)	0,59
[2308]	instance.parameters = new List<ElementScope>(this.parameters.Count);	0,47
*
[2006]	{
[2311]	{	0,66
[2314]	{	0,65

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\LocalVars.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\LocalVars.cs
*
[1167]	{
[1167]	{	0,92
[1169]	{	0,91
*
[1176]	list.Add(new ValueItem(v as NamedValue, this.DebugType));
[1178]	list.Add(new ValueItem(v as NamedValue, this.DebugType));	0,92
[1172]	list.Add(new ValueItem(v as NamedValue, this.DebugType));	0,82

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\CodeFormatter.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\CodeFormatter.cs
*
[525]	}
[680]	}	0,71
[643]	}	0,42
*
[519]	if (sn is program_module || sn is unit_module)
[662]	if (sn is program_module || sn is unit_module)	0,89
[639]	if (trimedstr == "do" || trimedstr == "of" || trimedstr == "then")	0,30
*
[2444]	for (int i = 0; i < _template_param_list.params_list.Count; i++)
[2662]	for (int i = 0; i < _template_param_list.params_list.Count; i++)	0,93
[2667]	visit_node(_template_param_list.params_list[i]);	0,50
*
[2449]	}
[2668]	}	0,76
[2667]	visit_node(_template_param_list.params_list[i]);	0,37
*
[231]	sb.Append(Text.Substring(start_pos, end_pos - start_pos + 1));
[270]	string node_text = Text.Substring(start_pos, Math.Max(end_pos - start_pos + 1, 0));	0,61
[273]	sb.Append(node_text);	0,42
*
[232]	}
[274]	}	0,87
[273]	sb.Append(node_text);	0,50
*
[2970]	if (_is_pattern_expr.left != null)
[3200]	if (_is_pattern_expr.left != null)	0,95
[3203]	if (_is_pattern_expr.right == null ||	0,76
*
[2976]	visit_node(_is_pattern_expr.right);
[3210]	visit_node(_is_pattern_expr.right);	0,97
[3201]	visit_node(_is_pattern_expr.left);	0,76
*
[2587]	{
[2806]	{	0,77
[2808]	add_space_after = true;	0,74
*
[2585]	visit_node(_enumerator.name);
[2804]	visit_node(_enumerator.name);	0,90
[2809]	visit_node(_enumerator.value);	0,72

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\SymbolTable.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\SymbolTable.cs
*
[956]	return;
[994]	return;	0,87
[995]	}	0,59
*
[955]	if (Result.Count > add && StopIfFind)
[993]	if (Result.Count > add && StopIfFind)	0,90
[983]	if (Result.Count > add && StopIfFind)	0,50
*
[831]	scope = ((ClassMethodScope)scope).MyClass;
[862]	scope = scope.TopScope;	0,88
[861]	if(scope is ClassMethodScope)	0,70
*
[832]	else
[863]	else	0,97
[865]	return scope;	0,28
*
[1091]	
[1169]		0,87
[1183]		0,86
*
[1009]	//мы в ImplementationPart?
[1079]	//мы в ImplementationPart?	0,94
[1080]	if (CurrentArea is UnitImplementationScope)	0,43

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\SyntaxTreeStreamReader.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\SyntaxTreeStreamReader.cs
*
[1639]	read_syntax_tree_node(_write_accessor_name);
[1677]	read_syntax_tree_node(_write_accessor_name);	0,93
[1679]	_write_accessor_name.pr = _read_node() as procedure_definition;	0,36
*
[1640]	_write_accessor_name.accessor_name = _read_node() as ident;
[1678]	_write_accessor_name.accessor_name = _read_node() as ident;	0,90
[1680]	_write_accessor_name.statment_for_formatting = _read_node() as statement;	0,68
*
[27]	case 2:
[27]	case 2:	1,00
[25]	case 1:	0,85
*
[349]	case 163:
[349]	case 163:	0,98
[361]	case 169:	0,89
*
[4049]	else
[4101]	{	0,39
[4102]	read_pattern_node(_deconstructor_pattern);	0,36
*
[4058]	_deconstructor_pattern.type = _read_node() as type_definition;
[4103]	_deconstructor_pattern.type = _read_node() as type_definition;	0,85
[4104]	_deconstructor_pattern.const_params_check = _read_node() as expression;	0,60

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\ExpressionVisitor.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\ExpressionVisitor.cs
*
[332]	if (ts != null)
[389]	//if (ts != null)	0,88
[380]	if (returned_scope != null)	0,57
*
[312]	{
[371]	{	0,97
[369]	{	0,97
*
[111]	TypeScope return_type = ps.return_type;
[122]	TypeScope return_type = ps.return_type;	0,99
[121]	ProcScope ps = returned_scope as ProcScope;	0,79
*
[114]	if (return_type == null)
[125]	if (return_type == null)	1,00
[108]	if (return_type != null)	0,84

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\Compiler.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\Compiler.cs
*
[3078]	if ((CurrentUnit = ReadDLL(UnitName)) != null)
[3182]	if ((CurrentUnit = ReadDLL(UnitName)) != null)	0,96
[3199]	if ((CurrentUnit = ReadPCU(UnitName)) != null)	0,89
*
[3377]	if (!UnitsSortedList.Contains(CurrentUnit))//vnimanie zdes inogda pri silnoj zavisimosti modulej moduli popadajut neskolko raz
[3508]	if (!UnitsSortedList.Contains(CurrentUnit))//vnimanie zdes inogda pri silnoj zavisimosti modulej moduli popadajut neskolko raz	0,97
[3473]	if (!UnitsSortedList.Contains(CurrentUnit))//vnimanie zdes inogda pri silnoj zavisimosti modulej moduli popadajut neskolko raz	0,83
*
[2457]	// Если есть в кеше, то пользуемся кешем
[2535]	// Если есть в кеше, то пользуемся кешем	0,98
[2534]	{	0,17
*
[2464]	if (Path.GetDirectoryName(UnitName) != string.Empty)
[2543]	if (Path.GetDirectoryName(UnitName) != string.Empty)	0,96
[2544]	d = Path.GetDirectoryName(UnitName);	0,65

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\CompilerInformation.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\CompilerInformation.cs
*
[235]	CodeCompletion.CodeCompletionTester.TestIntellisense(Path.Combine(@"c:\Work\Miks\_PABCNETGitHub\TestSuite", "intellisense_tests"));
[236]	CodeCompletion.CodeCompletionTester.TestIntellisense(Path.Combine(@"c:\Work\Miks\_PABCNETGitHub\TestSuite", "intellisense_tests"));	0,90
[237]	CodeCompletion.CodeCompletionTester.TestRename(@"c:\Work\Miks\_PABCNETGitHub\TestSuite\refactoring_tests\rename_tests");	0,70
*
[234]	CodeCompletion.CodeCompletionTester.Test();
[234]	CodeCompletion.CodeCompletionTester.Test();	0,98
[233]	{	0,17

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\Optimizer.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\Optimizer.cs
*
[552]	{
[563]	{	0,98
[564]	helper.AddVariable(lbv);	0,77
*
[571]	foreach (local_block_variable vdn in stmt.local_variables)
[585]	foreach (local_block_variable vdn in stmt.local_variables)	0,98
[562]	foreach (local_block_variable lbv in stmt.local_variables)	0,76

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\SideTab.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\SideTab.cs
*
[306]	
[329]		0,93
[327]		0,85
*
[304]	
[327]		0,94
[329]		0,77

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\CapturedVariablesTreeBuilder.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\CapturedVariablesTreeBuilder.cs
*
[162]	si.sym_info.semantic_node_type == semantic_node_type.basic_function_node && idName == "exit")
[198]	si.sym_info.semantic_node_type == semantic_node_type.ref_type_node ||	0,66
[196]	si.sym_info.semantic_node_type == semantic_node_type.compiled_unit_node ||	0,65
*
[177]	return;
[204]	return;	0,67
[327]	return;	0,56
*
[126]	{
[127]	{	0,49
[129]	{	0,48
*
[128]	}
[134]	}	0,74
[133]	ProcessNode(newExpr.array_init_expr);	0,74

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\DomConverter.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\DomConverter.cs
*
[292]	if (ts.topScope is InterfaceUnitScope)
[311]	if (ts.topScope is InterfaceUnitScope)	0,95
[313]	SymScope impl_scope = (ts.topScope as InterfaceUnitScope).impl_scope;	0,82
*
[307]	{
[326]	{	0,96
[331]	{	0,94

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\convertion_data_and_alghoritms.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\convertion_data_and_alghoritms.cs
*
[436]	switch (fn.semantic_node_type)
[436]	switch (fn.semantic_node_type)	0,96
[438]	case semantic_node_type.common_method_node:	0,82
*
[426]	case semantic_node_type.compiled_function_node:
[426]	case semantic_node_type.compiled_function_node:	0,93
[425]	case semantic_node_type.common_method_node:	0,89

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\compilation_context.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\compilation_context.cs
*
[2498]	if (CurrentHandlerList.Contains(name.ToLower()))
[2512]	if (CurrentHandlerList.Contains(name.ToLower()))	0,95
[2508]	CurrentHandlerList.Add(name.ToLower());	0,73
*
[2501]	//TODO: Можно передавать список всех повторных объявлений.
[2515]	//TODO: Можно передавать список всех повторных объявлений.	0,90
[2518]	else	0,16
*
[1050]	_ctn.methods.AddElement(cmn);
[1052]	_ctn.methods.AddElement(cmn);	1,00
[1034]	cmn.parameters.AddElement(prm2);	0,57
*
[1035]	{
[1037]	{	0,98
[1036]	foreach (class_field cf in _ctn.fields)	0,77
*
[1267]	//string cname = compiler_string_consts.GetConnectedFunctionName(_compiled_tn.name, name);
[1277]	//string cname = compiler_string_consts.GetConnectedFunctionName(_compiled_tn.name, name);	1,00
[1283]	cnfnn.ConnectedToType = _compiled_tn;	0,46
*
[1245]	_ctn.Scope.AddSymbol(name, _last_created_function);
[1255]	_ctn.Scope.AddSymbol(name, _last_created_function);	0,97
[1270]	_ctn.scope.AddSymbol(name, _last_created_function);	0,88

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\CodeCompletionHighlighter.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\CodeCompletionHighlighter.cs
*
[232]	if (string.Compare(word, "class", true) != 0 || !isClassMember(end_off, textArea))
[395]	if (string.Compare(word, "class", true) != 0 || !isClassMember(end_off, textArea))	0,94
[398]	else if (string.Compare(word, "end", true) == 0)	0,47
*
[241]	return new TmpPos(end_off - 3, word.Length);
[404]	return new TmpPos(end_off - 3, word.Length);	0,92
[413]	return new TmpPos(end_off - 4, word.Length - 1);	0,86

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\MarkMethodHasYieldVisitor.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\MarkMethodHasYieldVisitor.cs
*
[75]	{
[104]	{	0,83
[120]	{	0,81
*
[85]	
[131]		0,85
[125]		0,81

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\TreeHelper.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\TreeHelper.cs
*
[1768]	result[i] = new var_statement(variables.definitions[i]);
[1827]	result[i] = new var_statement(variables.definitions[i]);	1,00
[1824]	for (int i = 0; i < variables.definitions.Count; i++)	0,36
*
[1763]	Debug.Assert(types.Length == variables.definitions.Count, "Inconsistent types count");
[1822]	Debug.Assert(types.Length == variables.definitions.Count, "Inconsistent types count");	1,00
[1824]	for (int i = 0; i < variables.definitions.Count; i++)	0,44

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\Assign.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\Assign.cs
*
[227]	var cfr = to as class_field_reference;
[255]	var cfr = to as class_field_reference;	0,86
[253]	if (to is class_field_reference)	0,75
*
[219]	var b = FindIEnumerableElementType(from.type, ref elem_type, out bb);
[247]	var b = FindIEnumerableElementType(from.type, ref elem_type, out bb);	0,95
[249]	AddError(from.location, "CAN_NOT_EXECUTE_FOREACH_BY_EXPR_OF_TYPE_{0}", from.type.full_name);	0,36

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\Helpers.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\Helpers.cs
*
[834]	foreach (Type interf in generic_def.GetInterfaces())
[879]	foreach (Type interf in generic_def.GetInterfaces())	0,98
[875]	else if (generic_def.IsGenericParameter)	0,48
*
[814]	Type generic_def = null;
[859]	Type generic_def = null;	0,94
[858]	generic_args = null;	0,65
*
[981]	//(ssyy) Лучше использовать MakePointerType
[1044]	//(ssyy) Лучше использовать MakePointerType	1,00
[1045]	ti = new TypeInfo(ref_ti.tp.MakePointerType());	0,41
*
[933]	ti.def_cnstr = find_constructor_with_one_param(ti.tp);
[996]	ti.def_cnstr = find_constructor_with_one_param(ti.tp);	1,00
[1000]	ti = GetTypeReference(type.base_type);	0,83

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\semantic_checks_for_sugar.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\semantic_checks_for_sugar.cs
*
[77]	IsSlicedType = 3;
[77]	IsSlicedType = 3;	0,93
[75]	IsSlicedType = 2;	0,87
*
[61]	var IsSlicedType = 0; // проверим, является ли semvar.type динамическим массивом, списком List или строкой
[61]	var IsSlicedType = 0; // проверим, является ли semvar.type динамическим массивом, списком List или строкой	0,94
[71]	IsSlicedType = 0; // можно ничего не присваивать :)	0,36

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\SyntaxTreeStreamWriter.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\SyntaxTreeStreamWriter.cs
*
[5473]	}
[5512]	}	0,96
[5507]	}	0,91
*
[5471]	bw.Write((byte)1);
[5510]	bw.Write((byte)1);	0,97
[5506]	bw.Write((byte)0);	0,85

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\types.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\types.cs
*
[2973]	add_name(name, new SymbolInfo(cnfn));
[3089]	add_name(name, new SymbolInfo(cnfn));	1,00
[3095]	cnfn.parameters.AddElement(cp2);	0,27
*
[2977]	cnfn, concrete_parameter_type.cpt_none, null, null);
[3093]	cnfn, concrete_parameter_type.cpt_none, null, null);	1,00
[3092]	common_parameter cp2 = new common_parameter(compiler_string_consts.right_param_name, this, SemanticTree.parameter_type.value,	0,71

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\static_executors.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\static_executors.cs
*
[2489]	}
[2493]	}	0,96
[2492]	throw new SimpleSemanticError(right.location, "DIVIDE_BY_ZERO_EXCEPTION");	0,75
*
[2475]	{
[2475]	{	0,94
[2482]	{	0,89

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\ProcessYieldsCapturedVars.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\ProcessYieldsCapturedVars.cs
*
[405]	return UpperTo<declarations>().list
[418]	cd = UpperTo<declarations>().list	0,82
[419]	.OfType<type_declarations>()	0,52
*
[391]	{
[404]	{	0,88
[402]	{	0,76
*
[616]	pdCloned.proc_header.name.meth_name = new ident(YieldConsts.YieldHelperMethodPrefix + "_error_checkerr>" + pd.proc_header.name.meth_name.name,
[649]	pdCloned.proc_header.name.meth_name = new ident(YieldConsts.YieldHelperMethodPrefix + "_error_checkerr>" + pd.proc_header.name.meth_name.name,	0,96
[651]	pd.proc_header.name.meth_name.source_context); // = new method_name("<yield_helper_locals_type_detector>" + pd.proc_header.className.meth_name.className);	0,50
*
[618]	pd.proc_header.name.meth_name.source_context); // = new method_name("<yield_helper_locals_type_detector>" + pd.proc_header.className.meth_name.className);
[651]	pd.proc_header.name.meth_name.source_context); // = new method_name("<yield_helper_locals_type_detector>" + pd.proc_header.className.meth_name.className);	0,98
[649]	pdCloned.proc_header.name.meth_name = new ident(YieldConsts.YieldHelperMethodPrefix + "_error_checkerr>" + pd.proc_header.name.meth_name.name,	0,50

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\CapturedVariablesSubstitutor.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\CapturedVariablesSubstitutor.cs
*
[312]	if (forNode != null)
[322]	if (forNode != null)	0,97
[338]	forNodeIndex = 0;	0,37
*
[332]	}
[347]	}	0,84
[333]	}	0,71

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\LambdaResultTypeInferrer.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\LambdaResultTypeInferrer.cs
*
[94]	}
[108]	}	0,60
[114]	}	0,49
*
[84]	if (to != null &&
[98]	if (to != null &&	0,98
[106]	if (dm.empty_param_method != null)	0,35

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\Foreach.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\Foreach.cs
*
[157]	var i = GenIdentName();
[211]	var i = GenIdentName();	0,96
[207]	var arrid = GenIdentName();	0,79
*
[145]	}
[202]	// SSM 23.08.16 Закомментировал оптимизацию. Не работает с лямбдами. Лямбды обходят старое дерево. А заменить foreach на for на этом этапе пока не получается - не развита инфраструктура	0,52
[201]		0,51

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\DefaultFormattingStrategy.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\DefaultFormattingStrategy.cs
*
[168]	break;
[168]	break;	0,99
[162]	++brackets;	0,45
*
[176]	}
[176]	}	0,97
[175]	}	0,94

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\TextEditorControl.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\TextEditorControl.cs
*
[359]	//							curTabIndent    += TabIndent * primaryTextArea.TextArea.TextView.GetWidth(' ');
[359]	//							curTabIndent    += TabIndent * primaryTextArea.TextArea.TextView.GetWidth(' ');	0,99
[345]	Advance(ref xPos, ref yPos, margin.Width, primaryTextArea.TextArea.TextView.SpaceWidth, fontHeight);	0,53
*
[356]	case TextWordType.Word:
[356]	case TextWordType.Word:	0,98
[350]	case TextWordType.Tab:	0,82

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\LambdaHelper.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\LambdaHelper.cs
*
[263]	int lambdaDefParamsCount = 0;
[280]	int lambdaDefParamsCount = 0;	0,99
[285]	if (lambdaDefParamsCount != leftTypeParamsNumber)	0,53
*
[253]	(delegate_internal_interface)leftType.get_internal_interface(internal_interface_kind.delegate_interface);
[270]	(delegate_internal_interface)leftType.get_internal_interface(internal_interface_kind.delegate_interface);	0,99
[269]	delegate_internal_interface dii_left =	0,55

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\QuickClassBrowserPanel.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\QuickClassBrowserPanel.cs
*
[501]	}
[504]	}	0,97
[502]	}	0,94
*
[509]	items.AddRange(vars);
[512]	items.AddRange(vars);	1,00
[508]	items.AddRange(props);	0,82

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\PCUReader.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\PCUReader.cs
*
[1419]	compiled_function_node orig = GetCompiledMethod(br.ReadInt32());
[1445]	compiled_function_node orig = GetCompiledMethod(br.ReadInt32());	0,90
[1443]	private function_node GetCompiledGenericMethodInstanceReference()	0,33
*
[1421]	return orig.get_instance(parameters, false, null);
[1448]	var instance = orig.get_instance(parameters, false, null);	0,72
[1450]	return instance;	0,43

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\HierarchyVisitor.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\HierarchyVisitor.cs
*
[3785]	DefaultVisit(_pattern_node);
[3941]	DefaultVisit(_pattern_node);	0,95
[3942]	pre_do_visit(_pattern_node);	0,72
*
[3787]	post_do_visit(_pattern_node);
[3945]	post_do_visit(_pattern_node);	0,98
[3942]	pre_do_visit(_pattern_node);	0,80

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\CompilerOptionsContent.Designer.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\CompilerOptionsContent.Designer.cs
*
[49]	this.btSelectOutpotDirectory.Name = "btSelectOutpotDirectory";
[49]	this.btSelectOutpotDirectory.Name = "btSelectOutpotDirectory";	1,00
[68]	this.cbUseOutputDirectory.Name = "cbUseOutputDirectory";	0,76
*
[75]	//
[75]	//	0,98
[77]	//	0,98

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\Patterns.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\Patterns.cs
*
[197]	if (node.is_generic_parameter)
[207]	if (node.is_generic_parameter)	1,00
[208]	yield return (node as type_node).generic_param_index;	0,49
*
[207]	yield break;
[217]	yield break;	1,00
[215]	yield return index;	0,43

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\Form1.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\Form1.cs
*
[394]	HelpExamplesFileName = PascalABCCompiler.Tools.ReplaceAllKeys(Constants.HelpExamplesFileName, WorkbenchStorage.StandartDirectories);
[404]	HelpExamplesFileName = PascalABCCompiler.Tools.ReplaceAllKeys(Constants.HelpExamplesFileName, WorkbenchStorage.StandartDirectories);	0,98
[405]	HelpExamplesMapFileName = PascalABCCompiler.Tools.ReplaceAllKeys(Constants.HelpExamplesMapFileName, WorkbenchStorage.StandartDirectories);	0,77
*
[380]	WorkbenchServiceFactory.ProjectService.OpenProject(FileNameToWait);
[390]	WorkbenchServiceFactory.ProjectService.OpenProject(FileNameToWait);	0,96
[383]	WorkbenchServiceFactory.ProjectService.OpenProject(FileName);	0,88

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\Actions.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\Actions.cs
*
[38]	WorkbenchServiceFactory.DebuggerOperationsService.AddVariable(var, true);
[38]	WorkbenchServiceFactory.DebuggerOperationsService.AddVariable(var, true);	1,00
[27]	WorkbenchServiceFactory.DebuggerOperationsService.GotoWatch();	0,70
*
[23]	//num_line = textArea.SelectionManager.SelectionStart.Line;
[23]	//num_line = textArea.SelectionManager.SelectionStart.Line;	0,99
[22]	var = textArea.SelectionManager.SelectedText;	0,69

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\Debugger.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\Debugger.cs
*
[1255]	else if (nv.Name.Contains("$class_var")) global_nv = nv;
[1305]	else if (nv.Name.Contains("$class_var")) global_nv = nv;	0,99
[1306]	else if (nv.Name.Contains("$unit_var")) unit_vars.Add(nv);	0,71
*
[1239]	int pos = nv.Name.IndexOf(':');
[1289]	int pos = nv.Name.IndexOf(':');	0,97
[1287]	if (nv.Name.IndexOf(':') != -1)	0,66

file:///D:\Repositories\_mapping\PascalABC\1462\Common\base\ProjectHelper.cs
file:///D:\Repositories\_mapping\PascalABC\1462\Common\modified\ProjectHelper.cs
*
[239]	currentProject = null;
[250]	currentProject = null;	0,96
[249]	{	0,13
*
[240]	uid = 1;
[251]	uid = 1;	0,95
[252]	Dirty = false;	0,29
