//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from JavaParser.g4 by ANTLR 4.7.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.1")]
[System.CLSCompliant(false)]
public partial class JavaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		ABSTRACT=1, ASSERT=2, BOOLEAN=3, BREAK=4, BYTE=5, CASE=6, CATCH=7, CHAR=8, 
		CLASS=9, CONST=10, CONTINUE=11, DEFAULT=12, DO=13, DOUBLE=14, ELSE=15, 
		ENUM=16, EXTENDS=17, FINAL=18, FINALLY=19, FLOAT=20, FOR=21, IF=22, GOTO=23, 
		IMPLEMENTS=24, IMPORT=25, INSTANCEOF=26, INT=27, INTERFACE=28, LONG=29, 
		NATIVE=30, NEW=31, PACKAGE=32, PRIVATE=33, PROTECTED=34, PUBLIC=35, RETURN=36, 
		SHORT=37, STATIC=38, STRICTFP=39, SUPER=40, SWITCH=41, SYNCHRONIZED=42, 
		THIS=43, THROW=44, THROWS=45, TRANSIENT=46, TRY=47, VOID=48, VOLATILE=49, 
		WHILE=50, DECIMAL_LITERAL=51, HEX_LITERAL=52, OCT_LITERAL=53, BINARY_LITERAL=54, 
		FLOAT_LITERAL=55, HEX_FLOAT_LITERAL=56, BOOL_LITERAL=57, CHAR_LITERAL=58, 
		STRING_LITERAL=59, NULL_LITERAL=60, LPAREN=61, RPAREN=62, LBRACE=63, RBRACE=64, 
		LBRACK=65, RBRACK=66, SEMI=67, COMMA=68, DOT=69, ASSIGN=70, GT=71, LT=72, 
		BANG=73, TILDE=74, QUESTION=75, COLON=76, EQUAL=77, LE=78, GE=79, NOTEQUAL=80, 
		AND=81, OR=82, INC=83, DEC=84, ADD=85, SUB=86, MUL=87, DIV=88, BITAND=89, 
		BITOR=90, CARET=91, MOD=92, ADD_ASSIGN=93, SUB_ASSIGN=94, MUL_ASSIGN=95, 
		DIV_ASSIGN=96, AND_ASSIGN=97, OR_ASSIGN=98, XOR_ASSIGN=99, MOD_ASSIGN=100, 
		LSHIFT_ASSIGN=101, RSHIFT_ASSIGN=102, URSHIFT_ASSIGN=103, ARROW=104, COLONCOLON=105, 
		AT=106, ELLIPSIS=107, WS=108, COMMENT=109, LINE_COMMENT=110, IDENTIFIER=111;
	public const int
		RULE_compilationUnit = 0, RULE_packageDeclaration = 1, RULE_importDeclaration = 2, 
		RULE_typeDeclaration = 3, RULE_modifier = 4, RULE_classOrInterfaceModifier = 5, 
		RULE_variableModifier = 6, RULE_classDeclaration = 7, RULE_typeParameters = 8, 
		RULE_typeParameter = 9, RULE_typeBound = 10, RULE_enumDeclaration = 11, 
		RULE_enumConstants = 12, RULE_enumConstant = 13, RULE_enumBodyDeclarations = 14, 
		RULE_interfaceDeclaration = 15, RULE_classBody = 16, RULE_interfaceBody = 17, 
		RULE_classBodyDeclaration = 18, RULE_memberDeclaration = 19, RULE_methodDeclaration = 20, 
		RULE_methodBody = 21, RULE_typeTypeOrVoid = 22, RULE_genericMethodDeclaration = 23, 
		RULE_genericConstructorDeclaration = 24, RULE_constructorDeclaration = 25, 
		RULE_fieldDeclaration = 26, RULE_interfaceBodyDeclaration = 27, RULE_interfaceMemberDeclaration = 28, 
		RULE_constDeclaration = 29, RULE_constantDeclarator = 30, RULE_interfaceMethodDeclaration = 31, 
		RULE_interfaceMethodModifier = 32, RULE_genericInterfaceMethodDeclaration = 33, 
		RULE_variableDeclarators = 34, RULE_variableDeclarator = 35, RULE_variableDeclaratorId = 36, 
		RULE_variableInitializer = 37, RULE_arrayInitializer = 38, RULE_classOrInterfaceType = 39, 
		RULE_typeArgument = 40, RULE_qualifiedNameList = 41, RULE_formalParameters = 42, 
		RULE_formalParameterList = 43, RULE_formalParameter = 44, RULE_lastFormalParameter = 45, 
		RULE_qualifiedName = 46, RULE_literal = 47, RULE_integerLiteral = 48, 
		RULE_floatLiteral = 49, RULE_annotation = 50, RULE_elementValuePairs = 51, 
		RULE_elementValuePair = 52, RULE_elementValue = 53, RULE_elementValueArrayInitializer = 54, 
		RULE_annotationTypeDeclaration = 55, RULE_annotationTypeBody = 56, RULE_annotationTypeElementDeclaration = 57, 
		RULE_annotationTypeElementRest = 58, RULE_annotationMethodOrConstantRest = 59, 
		RULE_annotationMethodRest = 60, RULE_annotationConstantRest = 61, RULE_defaultValue = 62, 
		RULE_block = 63, RULE_blockStatement = 64, RULE_localVariableDeclaration = 65, 
		RULE_localTypeDeclaration = 66, RULE_statement = 67, RULE_catchClause = 68, 
		RULE_catchType = 69, RULE_finallyBlock = 70, RULE_resourceSpecification = 71, 
		RULE_resources = 72, RULE_resource = 73, RULE_switchBlockStatementGroup = 74, 
		RULE_switchLabel = 75, RULE_forControl = 76, RULE_forInit = 77, RULE_enhancedForControl = 78, 
		RULE_parExpression = 79, RULE_expressionList = 80, RULE_methodCall = 81, 
		RULE_expression = 82, RULE_lambdaExpression = 83, RULE_lambdaParameters = 84, 
		RULE_lambdaBody = 85, RULE_primary = 86, RULE_classType = 87, RULE_creator = 88, 
		RULE_createdName = 89, RULE_innerCreator = 90, RULE_arrayCreatorRest = 91, 
		RULE_classCreatorRest = 92, RULE_explicitGenericInvocation = 93, RULE_typeArgumentsOrDiamond = 94, 
		RULE_nonWildcardTypeArgumentsOrDiamond = 95, RULE_nonWildcardTypeArguments = 96, 
		RULE_typeList = 97, RULE_typeType = 98, RULE_primitiveType = 99, RULE_typeArguments = 100, 
		RULE_superSuffix = 101, RULE_explicitGenericInvocationSuffix = 102, RULE_arguments = 103;
	public static readonly string[] ruleNames = {
		"compilationUnit", "packageDeclaration", "importDeclaration", "typeDeclaration", 
		"modifier", "classOrInterfaceModifier", "variableModifier", "classDeclaration", 
		"typeParameters", "typeParameter", "typeBound", "enumDeclaration", "enumConstants", 
		"enumConstant", "enumBodyDeclarations", "interfaceDeclaration", "classBody", 
		"interfaceBody", "classBodyDeclaration", "memberDeclaration", "methodDeclaration", 
		"methodBody", "typeTypeOrVoid", "genericMethodDeclaration", "genericConstructorDeclaration", 
		"constructorDeclaration", "fieldDeclaration", "interfaceBodyDeclaration", 
		"interfaceMemberDeclaration", "constDeclaration", "constantDeclarator", 
		"interfaceMethodDeclaration", "interfaceMethodModifier", "genericInterfaceMethodDeclaration", 
		"variableDeclarators", "variableDeclarator", "variableDeclaratorId", "variableInitializer", 
		"arrayInitializer", "classOrInterfaceType", "typeArgument", "qualifiedNameList", 
		"formalParameters", "formalParameterList", "formalParameter", "lastFormalParameter", 
		"qualifiedName", "literal", "integerLiteral", "floatLiteral", "annotation", 
		"elementValuePairs", "elementValuePair", "elementValue", "elementValueArrayInitializer", 
		"annotationTypeDeclaration", "annotationTypeBody", "annotationTypeElementDeclaration", 
		"annotationTypeElementRest", "annotationMethodOrConstantRest", "annotationMethodRest", 
		"annotationConstantRest", "defaultValue", "block", "blockStatement", "localVariableDeclaration", 
		"localTypeDeclaration", "statement", "catchClause", "catchType", "finallyBlock", 
		"resourceSpecification", "resources", "resource", "switchBlockStatementGroup", 
		"switchLabel", "forControl", "forInit", "enhancedForControl", "parExpression", 
		"expressionList", "methodCall", "expression", "lambdaExpression", "lambdaParameters", 
		"lambdaBody", "primary", "classType", "creator", "createdName", "innerCreator", 
		"arrayCreatorRest", "classCreatorRest", "explicitGenericInvocation", "typeArgumentsOrDiamond", 
		"nonWildcardTypeArgumentsOrDiamond", "nonWildcardTypeArguments", "typeList", 
		"typeType", "primitiveType", "typeArguments", "superSuffix", "explicitGenericInvocationSuffix", 
		"arguments"
	};

	private static readonly string[] _LiteralNames = {
		null, "'abstract'", "'assert'", "'boolean'", "'break'", "'byte'", "'case'", 
		"'catch'", "'char'", "'class'", "'const'", "'continue'", "'default'", 
		"'do'", "'double'", "'else'", "'enum'", "'extends'", "'final'", "'finally'", 
		"'float'", "'for'", "'if'", "'goto'", "'implements'", "'import'", "'instanceof'", 
		"'int'", "'interface'", "'long'", "'native'", "'new'", "'package'", "'private'", 
		"'protected'", "'public'", "'return'", "'short'", "'static'", "'strictfp'", 
		"'super'", "'switch'", "'synchronized'", "'this'", "'throw'", "'throws'", 
		"'transient'", "'try'", "'void'", "'volatile'", "'while'", null, null, 
		null, null, null, null, null, null, null, "'null'", "'('", "')'", "'{'", 
		"'}'", "'['", "']'", "';'", "','", "'.'", "'='", "'>'", "'<'", "'!'", 
		"'~'", "'?'", "':'", "'=='", "'<='", "'>='", "'!='", "'&&'", "'||'", "'++'", 
		"'--'", "'+'", "'-'", "'*'", "'/'", "'&'", "'|'", "'^'", "'%'", "'+='", 
		"'-='", "'*='", "'/='", "'&='", "'|='", "'^='", "'%='", "'<<='", "'>>='", 
		"'>>>='", "'->'", "'::'", "'@'", "'...'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ABSTRACT", "ASSERT", "BOOLEAN", "BREAK", "BYTE", "CASE", "CATCH", 
		"CHAR", "CLASS", "CONST", "CONTINUE", "DEFAULT", "DO", "DOUBLE", "ELSE", 
		"ENUM", "EXTENDS", "FINAL", "FINALLY", "FLOAT", "FOR", "IF", "GOTO", "IMPLEMENTS", 
		"IMPORT", "INSTANCEOF", "INT", "INTERFACE", "LONG", "NATIVE", "NEW", "PACKAGE", 
		"PRIVATE", "PROTECTED", "PUBLIC", "RETURN", "SHORT", "STATIC", "STRICTFP", 
		"SUPER", "SWITCH", "SYNCHRONIZED", "THIS", "THROW", "THROWS", "TRANSIENT", 
		"TRY", "VOID", "VOLATILE", "WHILE", "DECIMAL_LITERAL", "HEX_LITERAL", 
		"OCT_LITERAL", "BINARY_LITERAL", "FLOAT_LITERAL", "HEX_FLOAT_LITERAL", 
		"BOOL_LITERAL", "CHAR_LITERAL", "STRING_LITERAL", "NULL_LITERAL", "LPAREN", 
		"RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", "DOT", 
		"ASSIGN", "GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", "EQUAL", "LE", 
		"GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", "SUB", "MUL", "DIV", 
		"BITAND", "BITOR", "CARET", "MOD", "ADD_ASSIGN", "SUB_ASSIGN", "MUL_ASSIGN", 
		"DIV_ASSIGN", "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN", 
		"RSHIFT_ASSIGN", "URSHIFT_ASSIGN", "ARROW", "COLONCOLON", "AT", "ELLIPSIS", 
		"WS", "COMMENT", "LINE_COMMENT", "IDENTIFIER"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "JavaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static JavaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public JavaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public JavaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(JavaParser.Eof, 0); }
		public PackageDeclarationContext packageDeclaration() {
			return GetRuleContext<PackageDeclarationContext>(0);
		}
		public ImportDeclarationContext[] importDeclaration() {
			return GetRuleContexts<ImportDeclarationContext>();
		}
		public ImportDeclarationContext importDeclaration(int i) {
			return GetRuleContext<ImportDeclarationContext>(i);
		}
		public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompilationUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
			case 1:
				{
				State = 208; packageDeclaration();
				}
				break;
			}
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 211; importDeclaration();
				}
				}
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 220;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << CLASS) | (1L << ENUM) | (1L << FINAL) | (1L << INTERFACE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP))) != 0) || _la==SEMI || _la==AT) {
				{
				{
				State = 217; typeDeclaration();
				}
				}
				State = 222;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 223; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PackageDeclarationContext : ParserRuleContext {
		public ITerminalNode PACKAGE() { return GetToken(JavaParser.PACKAGE, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public PackageDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_packageDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterPackageDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitPackageDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPackageDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PackageDeclarationContext packageDeclaration() {
		PackageDeclarationContext _localctx = new PackageDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_packageDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 225; annotation();
				}
				}
				State = 230;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 231; Match(PACKAGE);
			State = 232; qualifiedName();
			State = 233; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ImportDeclarationContext : ParserRuleContext {
		public ITerminalNode IMPORT() { return GetToken(JavaParser.IMPORT, 0); }
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(JavaParser.STATIC, 0); }
		public ImportDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_importDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterImportDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitImportDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitImportDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ImportDeclarationContext importDeclaration() {
		ImportDeclarationContext _localctx = new ImportDeclarationContext(Context, State);
		EnterRule(_localctx, 4, RULE_importDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 235; Match(IMPORT);
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==STATIC) {
				{
				State = 236; Match(STATIC);
				}
			}

			State = 239; qualifiedName();
			State = 242;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DOT) {
				{
				State = 240; Match(DOT);
				State = 241; Match(MUL);
				}
			}

			State = 244; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
			return GetRuleContext<AnnotationTypeDeclarationContext>(0);
		}
		public ClassOrInterfaceModifierContext[] classOrInterfaceModifier() {
			return GetRuleContexts<ClassOrInterfaceModifierContext>();
		}
		public ClassOrInterfaceModifierContext classOrInterfaceModifier(int i) {
			return GetRuleContext<ClassOrInterfaceModifierContext>(i);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_typeDeclaration);
		try {
			int _alt;
			State = 259;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABSTRACT:
			case CLASS:
			case ENUM:
			case FINAL:
			case INTERFACE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STATIC:
			case STRICTFP:
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 249;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 246; classOrInterfaceModifier();
						}
						} 
					}
					State = 251;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
				}
				State = 256;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CLASS:
					{
					State = 252; classDeclaration();
					}
					break;
				case ENUM:
					{
					State = 253; enumDeclaration();
					}
					break;
				case INTERFACE:
					{
					State = 254; interfaceDeclaration();
					}
					break;
				case AT:
					{
					State = 255; annotationTypeDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 258; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModifierContext : ParserRuleContext {
		public ClassOrInterfaceModifierContext classOrInterfaceModifier() {
			return GetRuleContext<ClassOrInterfaceModifierContext>(0);
		}
		public ITerminalNode NATIVE() { return GetToken(JavaParser.NATIVE, 0); }
		public ITerminalNode SYNCHRONIZED() { return GetToken(JavaParser.SYNCHRONIZED, 0); }
		public ITerminalNode TRANSIENT() { return GetToken(JavaParser.TRANSIENT, 0); }
		public ITerminalNode VOLATILE() { return GetToken(JavaParser.VOLATILE, 0); }
		public ModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_modifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ModifierContext modifier() {
		ModifierContext _localctx = new ModifierContext(Context, State);
		EnterRule(_localctx, 8, RULE_modifier);
		try {
			State = 266;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABSTRACT:
			case FINAL:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STATIC:
			case STRICTFP:
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 261; classOrInterfaceModifier();
				}
				break;
			case NATIVE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 262; Match(NATIVE);
				}
				break;
			case SYNCHRONIZED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 263; Match(SYNCHRONIZED);
				}
				break;
			case TRANSIENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 264; Match(TRANSIENT);
				}
				break;
			case VOLATILE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 265; Match(VOLATILE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ITerminalNode PUBLIC() { return GetToken(JavaParser.PUBLIC, 0); }
		public ITerminalNode PROTECTED() { return GetToken(JavaParser.PROTECTED, 0); }
		public ITerminalNode PRIVATE() { return GetToken(JavaParser.PRIVATE, 0); }
		public ITerminalNode STATIC() { return GetToken(JavaParser.STATIC, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(JavaParser.ABSTRACT, 0); }
		public ITerminalNode FINAL() { return GetToken(JavaParser.FINAL, 0); }
		public ITerminalNode STRICTFP() { return GetToken(JavaParser.STRICTFP, 0); }
		public ClassOrInterfaceModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrInterfaceModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceModifierContext classOrInterfaceModifier() {
		ClassOrInterfaceModifierContext _localctx = new ClassOrInterfaceModifierContext(Context, State);
		EnterRule(_localctx, 10, RULE_classOrInterfaceModifier);
		try {
			State = 276;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 268; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 269; Match(PUBLIC);
				}
				break;
			case PROTECTED:
				EnterOuterAlt(_localctx, 3);
				{
				State = 270; Match(PROTECTED);
				}
				break;
			case PRIVATE:
				EnterOuterAlt(_localctx, 4);
				{
				State = 271; Match(PRIVATE);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 5);
				{
				State = 272; Match(STATIC);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 6);
				{
				State = 273; Match(ABSTRACT);
				}
				break;
			case FINAL:
				EnterOuterAlt(_localctx, 7);
				{
				State = 274; Match(FINAL);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 8);
				{
				State = 275; Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableModifierContext : ParserRuleContext {
		public ITerminalNode FINAL() { return GetToken(JavaParser.FINAL, 0); }
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public VariableModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterVariableModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitVariableModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableModifierContext variableModifier() {
		VariableModifierContext _localctx = new VariableModifierContext(Context, State);
		EnterRule(_localctx, 12, RULE_variableModifier);
		try {
			State = 280;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case FINAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 278; Match(FINAL);
				}
				break;
			case AT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 279; annotation();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public ITerminalNode CLASS() { return GetToken(JavaParser.CLASS, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(JavaParser.IDENTIFIER, 0); }
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public ITerminalNode EXTENDS() { return GetToken(JavaParser.EXTENDS, 0); }
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ITerminalNode IMPLEMENTS() { return GetToken(JavaParser.IMPLEMENTS, 0); }
		public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_classDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 282; Match(CLASS);
			State = 283; Match(IDENTIFIER);
			State = 285;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 284; typeParameters();
				}
			}

			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 287; Match(EXTENDS);
				State = 288; typeType();
				}
			}

			State = 293;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 291; Match(IMPLEMENTS);
				State = 292; typeList();
				}
			}

			State = 295; classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParametersContext : ParserRuleContext {
		public TypeParameterContext[] typeParameter() {
			return GetRuleContexts<TypeParameterContext>();
		}
		public TypeParameterContext typeParameter(int i) {
			return GetRuleContext<TypeParameterContext>(i);
		}
		public TypeParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterTypeParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitTypeParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParametersContext typeParameters() {
		TypeParametersContext _localctx = new TypeParametersContext(Context, State);
		EnterRule(_localctx, 16, RULE_typeParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 297; Match(LT);
			State = 298; typeParameter();
			State = 303;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 299; Match(COMMA);
				State = 300; typeParameter();
				}
				}
				State = 305;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 306; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeParameterContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(JavaParser.IDENTIFIER, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ITerminalNode EXTENDS() { return GetToken(JavaParser.EXTENDS, 0); }
		public TypeBoundContext typeBound() {
			return GetRuleContext<TypeBoundContext>(0);
		}
		public TypeParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterTypeParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitTypeParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeParameterContext typeParameter() {
		TypeParameterContext _localctx = new TypeParameterContext(Context, State);
		EnterRule(_localctx, 18, RULE_typeParameter);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 308; annotation();
				}
				}
				State = 313;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 314; Match(IDENTIFIER);
			State = 317;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 315; Match(EXTENDS);
				State = 316; typeBound();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeBoundContext : ParserRuleContext {
		public TypeTypeContext[] typeType() {
			return GetRuleContexts<TypeTypeContext>();
		}
		public TypeTypeContext typeType(int i) {
			return GetRuleContext<TypeTypeContext>(i);
		}
		public TypeBoundContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeBound; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterTypeBound(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitTypeBound(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeBound(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeBoundContext typeBound() {
		TypeBoundContext _localctx = new TypeBoundContext(Context, State);
		EnterRule(_localctx, 20, RULE_typeBound);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319; typeType();
			State = 324;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BITAND) {
				{
				{
				State = 320; Match(BITAND);
				State = 321; typeType();
				}
				}
				State = 326;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumDeclarationContext : ParserRuleContext {
		public ITerminalNode ENUM() { return GetToken(JavaParser.ENUM, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(JavaParser.IDENTIFIER, 0); }
		public ITerminalNode IMPLEMENTS() { return GetToken(JavaParser.IMPLEMENTS, 0); }
		public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		public EnumConstantsContext enumConstants() {
			return GetRuleContext<EnumConstantsContext>(0);
		}
		public EnumBodyDeclarationsContext enumBodyDeclarations() {
			return GetRuleContext<EnumBodyDeclarationsContext>(0);
		}
		public EnumDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterEnumDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitEnumDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumDeclarationContext enumDeclaration() {
		EnumDeclarationContext _localctx = new EnumDeclarationContext(Context, State);
		EnterRule(_localctx, 22, RULE_enumDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327; Match(ENUM);
			State = 328; Match(IDENTIFIER);
			State = 331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IMPLEMENTS) {
				{
				State = 329; Match(IMPLEMENTS);
				State = 330; typeList();
				}
			}

			State = 333; Match(LBRACE);
			State = 335;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT || _la==IDENTIFIER) {
				{
				State = 334; enumConstants();
				}
			}

			State = 338;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 337; Match(COMMA);
				}
			}

			State = 341;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 340; enumBodyDeclarations();
				}
			}

			State = 343; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantsContext : ParserRuleContext {
		public EnumConstantContext[] enumConstant() {
			return GetRuleContexts<EnumConstantContext>();
		}
		public EnumConstantContext enumConstant(int i) {
			return GetRuleContext<EnumConstantContext>(i);
		}
		public EnumConstantsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstants; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterEnumConstants(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitEnumConstants(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumConstants(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantsContext enumConstants() {
		EnumConstantsContext _localctx = new EnumConstantsContext(Context, State);
		EnterRule(_localctx, 24, RULE_enumConstants);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 345; enumConstant();
			State = 350;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 346; Match(COMMA);
					State = 347; enumConstant();
					}
					} 
				}
				State = 352;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,23,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumConstantContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(JavaParser.IDENTIFIER, 0); }
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public EnumConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumConstant; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterEnumConstant(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitEnumConstant(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumConstant(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumConstantContext enumConstant() {
		EnumConstantContext _localctx = new EnumConstantContext(Context, State);
		EnterRule(_localctx, 26, RULE_enumConstant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 353; annotation();
				}
				}
				State = 358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 359; Match(IDENTIFIER);
			State = 361;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 360; arguments();
				}
			}

			State = 364;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LBRACE) {
				{
				State = 363; classBody();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnumBodyDeclarationsContext : ParserRuleContext {
		public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public EnumBodyDeclarationsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enumBodyDeclarations; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterEnumBodyDeclarations(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitEnumBodyDeclarations(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnumBodyDeclarations(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnumBodyDeclarationsContext enumBodyDeclarations() {
		EnumBodyDeclarationsContext _localctx = new EnumBodyDeclarationsContext(Context, State);
		EnterRule(_localctx, 28, RULE_enumBodyDeclarations);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 366; Match(SEMI);
			State = 370;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << NATIVE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SYNCHRONIZED) | (1L << TRANSIENT) | (1L << VOID) | (1L << VOLATILE) | (1L << LBRACE))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (SEMI - 67)) | (1L << (LT - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
				{
				{
				State = 367; classBodyDeclaration();
				}
				}
				State = 372;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceDeclarationContext : ParserRuleContext {
		public ITerminalNode INTERFACE() { return GetToken(JavaParser.INTERFACE, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(JavaParser.IDENTIFIER, 0); }
		public InterfaceBodyContext interfaceBody() {
			return GetRuleContext<InterfaceBodyContext>(0);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public ITerminalNode EXTENDS() { return GetToken(JavaParser.EXTENDS, 0); }
		public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		public InterfaceDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterInterfaceDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitInterfaceDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceDeclarationContext interfaceDeclaration() {
		InterfaceDeclarationContext _localctx = new InterfaceDeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_interfaceDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 373; Match(INTERFACE);
			State = 374; Match(IDENTIFIER);
			State = 376;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 375; typeParameters();
				}
			}

			State = 380;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==EXTENDS) {
				{
				State = 378; Match(EXTENDS);
				State = 379; typeList();
				}
			}

			State = 382; interfaceBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 32, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 384; Match(LBRACE);
			State = 388;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << NATIVE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SYNCHRONIZED) | (1L << TRANSIENT) | (1L << VOID) | (1L << VOLATILE) | (1L << LBRACE))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (SEMI - 67)) | (1L << (LT - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
				{
				{
				State = 385; classBodyDeclaration();
				}
				}
				State = 390;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 391; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBodyContext : ParserRuleContext {
		public InterfaceBodyDeclarationContext[] interfaceBodyDeclaration() {
			return GetRuleContexts<InterfaceBodyDeclarationContext>();
		}
		public InterfaceBodyDeclarationContext interfaceBodyDeclaration(int i) {
			return GetRuleContext<InterfaceBodyDeclarationContext>(i);
		}
		public InterfaceBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterInterfaceBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitInterfaceBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBodyContext interfaceBody() {
		InterfaceBodyContext _localctx = new InterfaceBodyContext(Context, State);
		EnterRule(_localctx, 34, RULE_interfaceBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 393; Match(LBRACE);
			State = 397;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DEFAULT) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << NATIVE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SYNCHRONIZED) | (1L << TRANSIENT) | (1L << VOID) | (1L << VOLATILE))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (SEMI - 67)) | (1L << (LT - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
				{
				{
				State = 394; interfaceBodyDeclaration();
				}
				}
				State = 399;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 400; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyDeclarationContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode STATIC() { return GetToken(JavaParser.STATIC, 0); }
		public MemberDeclarationContext memberDeclaration() {
			return GetRuleContext<MemberDeclarationContext>(0);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public ClassBodyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBodyDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterClassBodyDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitClassBodyDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassBodyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyDeclarationContext classBodyDeclaration() {
		ClassBodyDeclarationContext _localctx = new ClassBodyDeclarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_classBodyDeclaration);
		int _la;
		try {
			int _alt;
			State = 414;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 402; Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 404;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==STATIC) {
					{
					State = 403; Match(STATIC);
					}
				}

				State = 406; block();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 410;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 407; modifier();
						}
						} 
					}
					State = 412;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,33,Context);
				}
				State = 413; memberDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public GenericMethodDeclarationContext genericMethodDeclaration() {
			return GetRuleContext<GenericMethodDeclarationContext>(0);
		}
		public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		public GenericConstructorDeclarationContext genericConstructorDeclaration() {
			return GetRuleContext<GenericConstructorDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
			return GetRuleContext<AnnotationTypeDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclarationContext memberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(Context, State);
		EnterRule(_localctx, 38, RULE_memberDeclaration);
		try {
			State = 425;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 416; methodDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 417; genericMethodDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 418; fieldDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 419; constructorDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 420; genericConstructorDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 421; interfaceDeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 422; annotationTypeDeclaration();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 423; classDeclaration();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 424; enumDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public TypeTypeOrVoidContext typeTypeOrVoid() {
			return GetRuleContext<TypeTypeOrVoidContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(JavaParser.IDENTIFIER, 0); }
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public ITerminalNode THROWS() { return GetToken(JavaParser.THROWS, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 40, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 427; typeTypeOrVoid();
			State = 428; Match(IDENTIFIER);
			State = 429; formalParameters();
			State = 434;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK) {
				{
				{
				State = 430; Match(LBRACK);
				State = 431; Match(RBRACK);
				}
				}
				State = 436;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 439;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROWS) {
				{
				State = 437; Match(THROWS);
				State = 438; qualifiedNameList();
				}
			}

			State = 441; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 42, RULE_methodBody);
		try {
			State = 445;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 443; block();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 444; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeTypeOrVoidContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ITerminalNode VOID() { return GetToken(JavaParser.VOID, 0); }
		public TypeTypeOrVoidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeTypeOrVoid; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterTypeTypeOrVoid(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitTypeTypeOrVoid(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeTypeOrVoid(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeTypeOrVoidContext typeTypeOrVoid() {
		TypeTypeOrVoidContext _localctx = new TypeTypeOrVoidContext(Context, State);
		EnterRule(_localctx, 44, RULE_typeTypeOrVoid);
		try {
			State = 449;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 447; typeType();
				}
				break;
			case VOID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 448; Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericMethodDeclarationContext : ParserRuleContext {
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public GenericMethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericMethodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterGenericMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitGenericMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericMethodDeclarationContext genericMethodDeclaration() {
		GenericMethodDeclarationContext _localctx = new GenericMethodDeclarationContext(Context, State);
		EnterRule(_localctx, 46, RULE_genericMethodDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 451; typeParameters();
			State = 452; methodDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericConstructorDeclarationContext : ParserRuleContext {
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public ConstructorDeclarationContext constructorDeclaration() {
			return GetRuleContext<ConstructorDeclarationContext>(0);
		}
		public GenericConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericConstructorDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterGenericConstructorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitGenericConstructorDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericConstructorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericConstructorDeclarationContext genericConstructorDeclaration() {
		GenericConstructorDeclarationContext _localctx = new GenericConstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_genericConstructorDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 454; typeParameters();
			State = 455; constructorDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorDeclarationContext : ParserRuleContext {
		public BlockContext constructorBody;
		public ITerminalNode IDENTIFIER() { return GetToken(JavaParser.IDENTIFIER, 0); }
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode THROWS() { return GetToken(JavaParser.THROWS, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public ConstructorDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructorDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterConstructorDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitConstructorDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructorDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorDeclarationContext constructorDeclaration() {
		ConstructorDeclarationContext _localctx = new ConstructorDeclarationContext(Context, State);
		EnterRule(_localctx, 50, RULE_constructorDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 457; Match(IDENTIFIER);
			State = 458; formalParameters();
			State = 461;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROWS) {
				{
				State = 459; Match(THROWS);
				State = 460; qualifiedNameList();
				}
			}

			State = 463; _localctx.constructorBody = block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFieldDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 52, RULE_fieldDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 465; typeType();
			State = 466; variableDeclarators();
			State = 467; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceBodyDeclarationContext : ParserRuleContext {
		public InterfaceMemberDeclarationContext interfaceMemberDeclaration() {
			return GetRuleContext<InterfaceMemberDeclarationContext>(0);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public InterfaceBodyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceBodyDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterInterfaceBodyDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitInterfaceBodyDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceBodyDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceBodyDeclarationContext interfaceBodyDeclaration() {
		InterfaceBodyDeclarationContext _localctx = new InterfaceBodyDeclarationContext(Context, State);
		EnterRule(_localctx, 54, RULE_interfaceBodyDeclaration);
		try {
			int _alt;
			State = 477;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABSTRACT:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CLASS:
			case DEFAULT:
			case DOUBLE:
			case ENUM:
			case FINAL:
			case FLOAT:
			case INT:
			case INTERFACE:
			case LONG:
			case NATIVE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case SHORT:
			case STATIC:
			case STRICTFP:
			case SYNCHRONIZED:
			case TRANSIENT:
			case VOID:
			case VOLATILE:
			case LT:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 472;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 469; modifier();
						}
						} 
					}
					State = 474;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,41,Context);
				}
				State = 475; interfaceMemberDeclaration();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 476; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMemberDeclarationContext : ParserRuleContext {
		public ConstDeclarationContext constDeclaration() {
			return GetRuleContext<ConstDeclarationContext>(0);
		}
		public InterfaceMethodDeclarationContext interfaceMethodDeclaration() {
			return GetRuleContext<InterfaceMethodDeclarationContext>(0);
		}
		public GenericInterfaceMethodDeclarationContext genericInterfaceMethodDeclaration() {
			return GetRuleContext<GenericInterfaceMethodDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
			return GetRuleContext<AnnotationTypeDeclarationContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public InterfaceMemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMemberDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterInterfaceMemberDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitInterfaceMemberDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMemberDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMemberDeclarationContext interfaceMemberDeclaration() {
		InterfaceMemberDeclarationContext _localctx = new InterfaceMemberDeclarationContext(Context, State);
		EnterRule(_localctx, 56, RULE_interfaceMemberDeclaration);
		try {
			State = 486;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,43,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 479; constDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 480; interfaceMethodDeclaration();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 481; genericInterfaceMethodDeclaration();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 482; interfaceDeclaration();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 483; annotationTypeDeclaration();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 484; classDeclaration();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 485; enumDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstDeclarationContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ConstantDeclaratorContext[] constantDeclarator() {
			return GetRuleContexts<ConstantDeclaratorContext>();
		}
		public ConstantDeclaratorContext constantDeclarator(int i) {
			return GetRuleContext<ConstantDeclaratorContext>(i);
		}
		public ConstDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterConstDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitConstDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstDeclarationContext constDeclaration() {
		ConstDeclarationContext _localctx = new ConstDeclarationContext(Context, State);
		EnterRule(_localctx, 58, RULE_constDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 488; typeType();
			State = 489; constantDeclarator();
			State = 494;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 490; Match(COMMA);
				State = 491; constantDeclarator();
				}
				}
				State = 496;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 497; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantDeclaratorContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(JavaParser.IDENTIFIER, 0); }
		public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public ConstantDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constantDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterConstantDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitConstantDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstantDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstantDeclaratorContext constantDeclarator() {
		ConstantDeclaratorContext _localctx = new ConstantDeclaratorContext(Context, State);
		EnterRule(_localctx, 60, RULE_constantDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 499; Match(IDENTIFIER);
			State = 504;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK) {
				{
				{
				State = 500; Match(LBRACK);
				State = 501; Match(RBRACK);
				}
				}
				State = 506;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 507; Match(ASSIGN);
			State = 508; variableInitializer();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMethodDeclarationContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(JavaParser.IDENTIFIER, 0); }
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public TypeTypeOrVoidContext typeTypeOrVoid() {
			return GetRuleContext<TypeTypeOrVoidContext>(0);
		}
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public InterfaceMethodModifierContext[] interfaceMethodModifier() {
			return GetRuleContexts<InterfaceMethodModifierContext>();
		}
		public InterfaceMethodModifierContext interfaceMethodModifier(int i) {
			return GetRuleContext<InterfaceMethodModifierContext>(i);
		}
		public ITerminalNode THROWS() { return GetToken(JavaParser.THROWS, 0); }
		public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public InterfaceMethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMethodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterInterfaceMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitInterfaceMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMethodDeclarationContext interfaceMethodDeclaration() {
		InterfaceMethodDeclarationContext _localctx = new InterfaceMethodDeclarationContext(Context, State);
		EnterRule(_localctx, 62, RULE_interfaceMethodDeclaration);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 513;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 510; interfaceMethodModifier();
					}
					} 
				}
				State = 515;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,46,Context);
			}
			State = 526;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case VOID:
			case AT:
			case IDENTIFIER:
				{
				State = 516; typeTypeOrVoid();
				}
				break;
			case LT:
				{
				State = 517; typeParameters();
				State = 521;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 518; annotation();
						}
						} 
					}
					State = 523;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,47,Context);
				}
				State = 524; typeTypeOrVoid();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 528; Match(IDENTIFIER);
			State = 529; formalParameters();
			State = 534;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK) {
				{
				{
				State = 530; Match(LBRACK);
				State = 531; Match(RBRACK);
				}
				}
				State = 536;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 539;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==THROWS) {
				{
				State = 537; Match(THROWS);
				State = 538; qualifiedNameList();
				}
			}

			State = 541; methodBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InterfaceMethodModifierContext : ParserRuleContext {
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ITerminalNode PUBLIC() { return GetToken(JavaParser.PUBLIC, 0); }
		public ITerminalNode ABSTRACT() { return GetToken(JavaParser.ABSTRACT, 0); }
		public ITerminalNode DEFAULT() { return GetToken(JavaParser.DEFAULT, 0); }
		public ITerminalNode STATIC() { return GetToken(JavaParser.STATIC, 0); }
		public ITerminalNode STRICTFP() { return GetToken(JavaParser.STRICTFP, 0); }
		public InterfaceMethodModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_interfaceMethodModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterInterfaceMethodModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitInterfaceMethodModifier(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInterfaceMethodModifier(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InterfaceMethodModifierContext interfaceMethodModifier() {
		InterfaceMethodModifierContext _localctx = new InterfaceMethodModifierContext(Context, State);
		EnterRule(_localctx, 64, RULE_interfaceMethodModifier);
		try {
			State = 549;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 543; annotation();
				}
				break;
			case PUBLIC:
				EnterOuterAlt(_localctx, 2);
				{
				State = 544; Match(PUBLIC);
				}
				break;
			case ABSTRACT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 545; Match(ABSTRACT);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 546; Match(DEFAULT);
				}
				break;
			case STATIC:
				EnterOuterAlt(_localctx, 5);
				{
				State = 547; Match(STATIC);
				}
				break;
			case STRICTFP:
				EnterOuterAlt(_localctx, 6);
				{
				State = 548; Match(STRICTFP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GenericInterfaceMethodDeclarationContext : ParserRuleContext {
		public TypeParametersContext typeParameters() {
			return GetRuleContext<TypeParametersContext>(0);
		}
		public InterfaceMethodDeclarationContext interfaceMethodDeclaration() {
			return GetRuleContext<InterfaceMethodDeclarationContext>(0);
		}
		public GenericInterfaceMethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_genericInterfaceMethodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterGenericInterfaceMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitGenericInterfaceMethodDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGenericInterfaceMethodDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GenericInterfaceMethodDeclarationContext genericInterfaceMethodDeclaration() {
		GenericInterfaceMethodDeclarationContext _localctx = new GenericInterfaceMethodDeclarationContext(Context, State);
		EnterRule(_localctx, 66, RULE_genericInterfaceMethodDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 551; typeParameters();
			State = 552; interfaceMethodDeclaration();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorsContext : ParserRuleContext {
		public VariableDeclaratorContext[] variableDeclarator() {
			return GetRuleContexts<VariableDeclaratorContext>();
		}
		public VariableDeclaratorContext variableDeclarator(int i) {
			return GetRuleContext<VariableDeclaratorContext>(i);
		}
		public VariableDeclaratorsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarators; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarators(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarators(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarators(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorsContext variableDeclarators() {
		VariableDeclaratorsContext _localctx = new VariableDeclaratorsContext(Context, State);
		EnterRule(_localctx, 68, RULE_variableDeclarators);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 554; variableDeclarator();
			State = 559;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 555; Match(COMMA);
				State = 556; variableDeclarator();
				}
				}
				State = 561;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclarator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 70, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 562; variableDeclaratorId();
			State = 565;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN) {
				{
				State = 563; Match(ASSIGN);
				State = 564; variableInitializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorIdContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(JavaParser.IDENTIFIER, 0); }
		public VariableDeclaratorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorId; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterVariableDeclaratorId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitVariableDeclaratorId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableDeclaratorId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorIdContext variableDeclaratorId() {
		VariableDeclaratorIdContext _localctx = new VariableDeclaratorIdContext(Context, State);
		EnterRule(_localctx, 72, RULE_variableDeclaratorId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 567; Match(IDENTIFIER);
			State = 572;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LBRACK) {
				{
				{
				State = 568; Match(LBRACK);
				State = 569; Match(RBRACK);
				}
				}
				State = 574;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterVariableInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitVariableInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVariableInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext variableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(Context, State);
		EnterRule(_localctx, 74, RULE_variableInitializer);
		try {
			State = 577;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 575; arrayInitializer();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case THIS:
			case VOID:
			case DECIMAL_LITERAL:
			case HEX_LITERAL:
			case OCT_LITERAL:
			case BINARY_LITERAL:
			case FLOAT_LITERAL:
			case HEX_FLOAT_LITERAL:
			case BOOL_LITERAL:
			case CHAR_LITERAL:
			case STRING_LITERAL:
			case NULL_LITERAL:
			case LPAREN:
			case LT:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 576; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		public VariableInitializerContext[] variableInitializer() {
			return GetRuleContexts<VariableInitializerContext>();
		}
		public VariableInitializerContext variableInitializer(int i) {
			return GetRuleContext<VariableInitializerContext>(i);
		}
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterArrayInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitArrayInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(Context, State);
		EnterRule(_localctx, 76, RULE_arrayInitializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 579; Match(LBRACE);
			State = 591;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN) | (1L << LBRACE))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (LT - 72)) | (1L << (BANG - 72)) | (1L << (TILDE - 72)) | (1L << (INC - 72)) | (1L << (DEC - 72)) | (1L << (ADD - 72)) | (1L << (SUB - 72)) | (1L << (AT - 72)) | (1L << (IDENTIFIER - 72)))) != 0)) {
				{
				State = 580; variableInitializer();
				State = 585;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 581; Match(COMMA);
						State = 582; variableInitializer();
						}
						} 
					}
					State = 587;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,56,Context);
				}
				State = 589;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 588; Match(COMMA);
					}
				}

				}
			}

			State = 593; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceTypeContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(JavaParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(JavaParser.IDENTIFIER, i);
		}
		public TypeArgumentsContext[] typeArguments() {
			return GetRuleContexts<TypeArgumentsContext>();
		}
		public TypeArgumentsContext typeArguments(int i) {
			return GetRuleContext<TypeArgumentsContext>(i);
		}
		public ClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassOrInterfaceType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceTypeContext classOrInterfaceType() {
		ClassOrInterfaceTypeContext _localctx = new ClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 78, RULE_classOrInterfaceType);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 595; Match(IDENTIFIER);
			State = 597;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,59,Context) ) {
			case 1:
				{
				State = 596; typeArguments();
				}
				break;
			}
			State = 606;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 599; Match(DOT);
					State = 600; Match(IDENTIFIER);
					State = 602;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,60,Context) ) {
					case 1:
						{
						State = 601; typeArguments();
						}
						break;
					}
					}
					} 
				}
				State = 608;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,61,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ITerminalNode EXTENDS() { return GetToken(JavaParser.EXTENDS, 0); }
		public ITerminalNode SUPER() { return GetToken(JavaParser.SUPER, 0); }
		public TypeArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgument; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterTypeArgument(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitTypeArgument(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentContext typeArgument() {
		TypeArgumentContext _localctx = new TypeArgumentContext(Context, State);
		EnterRule(_localctx, 80, RULE_typeArgument);
		int _la;
		try {
			State = 615;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 609; typeType();
				}
				break;
			case QUESTION:
				EnterOuterAlt(_localctx, 2);
				{
				State = 610; Match(QUESTION);
				State = 613;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==EXTENDS || _la==SUPER) {
					{
					State = 611;
					_la = TokenStream.LA(1);
					if ( !(_la==EXTENDS || _la==SUPER) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 612; typeType();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameListContext : ParserRuleContext {
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public QualifiedNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedNameList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterQualifiedNameList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitQualifiedNameList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedNameList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameListContext qualifiedNameList() {
		QualifiedNameListContext _localctx = new QualifiedNameListContext(Context, State);
		EnterRule(_localctx, 82, RULE_qualifiedNameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 617; qualifiedName();
			State = 622;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 618; Match(COMMA);
				State = 619; qualifiedName();
				}
				}
				State = 624;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParametersContext : ParserRuleContext {
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FormalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterFormalParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitFormalParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParametersContext formalParameters() {
		FormalParametersContext _localctx = new FormalParametersContext(Context, State);
		EnterRule(_localctx, 84, RULE_formalParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 625; Match(LPAREN);
			State = 627;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << SHORT))) != 0) || _la==AT || _la==IDENTIFIER) {
				{
				State = 626; formalParameterList();
				}
			}

			State = 629; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public FormalParameterContext[] formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		public LastFormalParameterContext lastFormalParameter() {
			return GetRuleContext<LastFormalParameterContext>(0);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameterList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 86, RULE_formalParameterList);
		int _la;
		try {
			int _alt;
			State = 644;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,68,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 631; formalParameter();
				State = 636;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 632; Match(COMMA);
						State = 633; formalParameter();
						}
						} 
					}
					State = 638;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,66,Context);
				}
				State = 641;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COMMA) {
					{
					State = 639; Match(COMMA);
					State = 640; lastFormalParameter();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 643; lastFormalParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(Context, State);
		EnterRule(_localctx, 88, RULE_formalParameter);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 649;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 646; variableModifier();
					}
					} 
				}
				State = 651;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,69,Context);
			}
			State = 652; typeType();
			State = 653; variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public LastFormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterLastFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitLastFormalParameter(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLastFormalParameter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterContext lastFormalParameter() {
		LastFormalParameterContext _localctx = new LastFormalParameterContext(Context, State);
		EnterRule(_localctx, 90, RULE_lastFormalParameter);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 658;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 655; variableModifier();
					}
					} 
				}
				State = 660;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,70,Context);
			}
			State = 661; typeType();
			State = 662; Match(ELLIPSIS);
			State = 663; variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(JavaParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(JavaParser.IDENTIFIER, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQualifiedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 92, RULE_qualifiedName);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 665; Match(IDENTIFIER);
			State = 670;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 666; Match(DOT);
					State = 667; Match(IDENTIFIER);
					}
					} 
				}
				State = 672;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,71,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public IntegerLiteralContext integerLiteral() {
			return GetRuleContext<IntegerLiteralContext>(0);
		}
		public FloatLiteralContext floatLiteral() {
			return GetRuleContext<FloatLiteralContext>(0);
		}
		public ITerminalNode CHAR_LITERAL() { return GetToken(JavaParser.CHAR_LITERAL, 0); }
		public ITerminalNode STRING_LITERAL() { return GetToken(JavaParser.STRING_LITERAL, 0); }
		public ITerminalNode BOOL_LITERAL() { return GetToken(JavaParser.BOOL_LITERAL, 0); }
		public ITerminalNode NULL_LITERAL() { return GetToken(JavaParser.NULL_LITERAL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 94, RULE_literal);
		try {
			State = 679;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case DECIMAL_LITERAL:
			case HEX_LITERAL:
			case OCT_LITERAL:
			case BINARY_LITERAL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 673; integerLiteral();
				}
				break;
			case FLOAT_LITERAL:
			case HEX_FLOAT_LITERAL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 674; floatLiteral();
				}
				break;
			case CHAR_LITERAL:
				EnterOuterAlt(_localctx, 3);
				{
				State = 675; Match(CHAR_LITERAL);
				}
				break;
			case STRING_LITERAL:
				EnterOuterAlt(_localctx, 4);
				{
				State = 676; Match(STRING_LITERAL);
				}
				break;
			case BOOL_LITERAL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 677; Match(BOOL_LITERAL);
				}
				break;
			case NULL_LITERAL:
				EnterOuterAlt(_localctx, 6);
				{
				State = 678; Match(NULL_LITERAL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerLiteralContext : ParserRuleContext {
		public ITerminalNode DECIMAL_LITERAL() { return GetToken(JavaParser.DECIMAL_LITERAL, 0); }
		public ITerminalNode HEX_LITERAL() { return GetToken(JavaParser.HEX_LITERAL, 0); }
		public ITerminalNode OCT_LITERAL() { return GetToken(JavaParser.OCT_LITERAL, 0); }
		public ITerminalNode BINARY_LITERAL() { return GetToken(JavaParser.BINARY_LITERAL, 0); }
		public IntegerLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integerLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterIntegerLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitIntegerLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIntegerLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerLiteralContext integerLiteral() {
		IntegerLiteralContext _localctx = new IntegerLiteralContext(Context, State);
		EnterRule(_localctx, 96, RULE_integerLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 681;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FloatLiteralContext : ParserRuleContext {
		public ITerminalNode FLOAT_LITERAL() { return GetToken(JavaParser.FLOAT_LITERAL, 0); }
		public ITerminalNode HEX_FLOAT_LITERAL() { return GetToken(JavaParser.HEX_FLOAT_LITERAL, 0); }
		public FloatLiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_floatLiteral; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterFloatLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitFloatLiteral(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFloatLiteral(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FloatLiteralContext floatLiteral() {
		FloatLiteralContext _localctx = new FloatLiteralContext(Context, State);
		EnterRule(_localctx, 98, RULE_floatLiteral);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 683;
			_la = TokenStream.LA(1);
			if ( !(_la==FLOAT_LITERAL || _la==HEX_FLOAT_LITERAL) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationContext : ParserRuleContext {
		public QualifiedNameContext qualifiedName() {
			return GetRuleContext<QualifiedNameContext>(0);
		}
		public ElementValuePairsContext elementValuePairs() {
			return GetRuleContext<ElementValuePairsContext>(0);
		}
		public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public AnnotationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterAnnotation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitAnnotation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationContext annotation() {
		AnnotationContext _localctx = new AnnotationContext(Context, State);
		EnterRule(_localctx, 100, RULE_annotation);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 685; Match(AT);
			State = 686; qualifiedName();
			State = 693;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LPAREN) {
				{
				State = 687; Match(LPAREN);
				State = 690;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,73,Context) ) {
				case 1:
					{
					State = 688; elementValuePairs();
					}
					break;
				case 2:
					{
					State = 689; elementValue();
					}
					break;
				}
				State = 692; Match(RPAREN);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValuePairsContext : ParserRuleContext {
		public ElementValuePairContext[] elementValuePair() {
			return GetRuleContexts<ElementValuePairContext>();
		}
		public ElementValuePairContext elementValuePair(int i) {
			return GetRuleContext<ElementValuePairContext>(i);
		}
		public ElementValuePairsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValuePairs; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterElementValuePairs(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitElementValuePairs(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValuePairs(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValuePairsContext elementValuePairs() {
		ElementValuePairsContext _localctx = new ElementValuePairsContext(Context, State);
		EnterRule(_localctx, 102, RULE_elementValuePairs);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 695; elementValuePair();
			State = 700;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 696; Match(COMMA);
				State = 697; elementValuePair();
				}
				}
				State = 702;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValuePairContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(JavaParser.IDENTIFIER, 0); }
		public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public ElementValuePairContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValuePair; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterElementValuePair(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitElementValuePair(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValuePair(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValuePairContext elementValuePair() {
		ElementValuePairContext _localctx = new ElementValuePairContext(Context, State);
		EnterRule(_localctx, 104, RULE_elementValuePair);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 703; Match(IDENTIFIER);
			State = 704; Match(ASSIGN);
			State = 705; elementValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public ElementValueArrayInitializerContext elementValueArrayInitializer() {
			return GetRuleContext<ElementValueArrayInitializerContext>(0);
		}
		public ElementValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterElementValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitElementValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueContext elementValue() {
		ElementValueContext _localctx = new ElementValueContext(Context, State);
		EnterRule(_localctx, 106, RULE_elementValue);
		try {
			State = 710;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,76,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 707; expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 708; annotation();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 709; elementValueArrayInitializer();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ElementValueArrayInitializerContext : ParserRuleContext {
		public ElementValueContext[] elementValue() {
			return GetRuleContexts<ElementValueContext>();
		}
		public ElementValueContext elementValue(int i) {
			return GetRuleContext<ElementValueContext>(i);
		}
		public ElementValueArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_elementValueArrayInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterElementValueArrayInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitElementValueArrayInitializer(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitElementValueArrayInitializer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ElementValueArrayInitializerContext elementValueArrayInitializer() {
		ElementValueArrayInitializerContext _localctx = new ElementValueArrayInitializerContext(Context, State);
		EnterRule(_localctx, 108, RULE_elementValueArrayInitializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 712; Match(LBRACE);
			State = 721;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN) | (1L << LBRACE))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (LT - 72)) | (1L << (BANG - 72)) | (1L << (TILDE - 72)) | (1L << (INC - 72)) | (1L << (DEC - 72)) | (1L << (ADD - 72)) | (1L << (SUB - 72)) | (1L << (AT - 72)) | (1L << (IDENTIFIER - 72)))) != 0)) {
				{
				State = 713; elementValue();
				State = 718;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 714; Match(COMMA);
						State = 715; elementValue();
						}
						} 
					}
					State = 720;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,77,Context);
				}
				}
			}

			State = 724;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==COMMA) {
				{
				State = 723; Match(COMMA);
				}
			}

			State = 726; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeDeclarationContext : ParserRuleContext {
		public ITerminalNode INTERFACE() { return GetToken(JavaParser.INTERFACE, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(JavaParser.IDENTIFIER, 0); }
		public AnnotationTypeBodyContext annotationTypeBody() {
			return GetRuleContext<AnnotationTypeBodyContext>(0);
		}
		public AnnotationTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
		AnnotationTypeDeclarationContext _localctx = new AnnotationTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 110, RULE_annotationTypeDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 728; Match(AT);
			State = 729; Match(INTERFACE);
			State = 730; Match(IDENTIFIER);
			State = 731; annotationTypeBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeBodyContext : ParserRuleContext {
		public AnnotationTypeElementDeclarationContext[] annotationTypeElementDeclaration() {
			return GetRuleContexts<AnnotationTypeElementDeclarationContext>();
		}
		public AnnotationTypeElementDeclarationContext annotationTypeElementDeclaration(int i) {
			return GetRuleContext<AnnotationTypeElementDeclarationContext>(i);
		}
		public AnnotationTypeBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeBodyContext annotationTypeBody() {
		AnnotationTypeBodyContext _localctx = new AnnotationTypeBodyContext(Context, State);
		EnterRule(_localctx, 112, RULE_annotationTypeBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 733; Match(LBRACE);
			State = 737;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << DOUBLE) | (1L << ENUM) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << NATIVE) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SYNCHRONIZED) | (1L << TRANSIENT) | (1L << VOLATILE))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (SEMI - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
				{
				{
				State = 734; annotationTypeElementDeclaration();
				}
				}
				State = 739;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 740; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeElementDeclarationContext : ParserRuleContext {
		public AnnotationTypeElementRestContext annotationTypeElementRest() {
			return GetRuleContext<AnnotationTypeElementRestContext>(0);
		}
		public ModifierContext[] modifier() {
			return GetRuleContexts<ModifierContext>();
		}
		public ModifierContext modifier(int i) {
			return GetRuleContext<ModifierContext>(i);
		}
		public AnnotationTypeElementDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeElementDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeElementDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeElementDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeElementDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeElementDeclarationContext annotationTypeElementDeclaration() {
		AnnotationTypeElementDeclarationContext _localctx = new AnnotationTypeElementDeclarationContext(Context, State);
		EnterRule(_localctx, 114, RULE_annotationTypeElementDeclaration);
		try {
			int _alt;
			State = 750;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABSTRACT:
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case CLASS:
			case DOUBLE:
			case ENUM:
			case FINAL:
			case FLOAT:
			case INT:
			case INTERFACE:
			case LONG:
			case NATIVE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case SHORT:
			case STATIC:
			case STRICTFP:
			case SYNCHRONIZED:
			case TRANSIENT:
			case VOLATILE:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 745;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 742; modifier();
						}
						} 
					}
					State = 747;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,81,Context);
				}
				State = 748; annotationTypeElementRest();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 749; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationTypeElementRestContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public AnnotationMethodOrConstantRestContext annotationMethodOrConstantRest() {
			return GetRuleContext<AnnotationMethodOrConstantRestContext>(0);
		}
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public EnumDeclarationContext enumDeclaration() {
			return GetRuleContext<EnumDeclarationContext>(0);
		}
		public AnnotationTypeDeclarationContext annotationTypeDeclaration() {
			return GetRuleContext<AnnotationTypeDeclarationContext>(0);
		}
		public AnnotationTypeElementRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationTypeElementRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterAnnotationTypeElementRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitAnnotationTypeElementRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationTypeElementRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationTypeElementRestContext annotationTypeElementRest() {
		AnnotationTypeElementRestContext _localctx = new AnnotationTypeElementRestContext(Context, State);
		EnterRule(_localctx, 116, RULE_annotationTypeElementRest);
		try {
			State = 772;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,87,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 752; typeType();
				State = 753; annotationMethodOrConstantRest();
				State = 754; Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 756; classDeclaration();
				State = 758;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,83,Context) ) {
				case 1:
					{
					State = 757; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 760; interfaceDeclaration();
				State = 762;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,84,Context) ) {
				case 1:
					{
					State = 761; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 764; enumDeclaration();
				State = 766;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,85,Context) ) {
				case 1:
					{
					State = 765; Match(SEMI);
					}
					break;
				}
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 768; annotationTypeDeclaration();
				State = 770;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,86,Context) ) {
				case 1:
					{
					State = 769; Match(SEMI);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationMethodOrConstantRestContext : ParserRuleContext {
		public AnnotationMethodRestContext annotationMethodRest() {
			return GetRuleContext<AnnotationMethodRestContext>(0);
		}
		public AnnotationConstantRestContext annotationConstantRest() {
			return GetRuleContext<AnnotationConstantRestContext>(0);
		}
		public AnnotationMethodOrConstantRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationMethodOrConstantRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterAnnotationMethodOrConstantRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitAnnotationMethodOrConstantRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationMethodOrConstantRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationMethodOrConstantRestContext annotationMethodOrConstantRest() {
		AnnotationMethodOrConstantRestContext _localctx = new AnnotationMethodOrConstantRestContext(Context, State);
		EnterRule(_localctx, 118, RULE_annotationMethodOrConstantRest);
		try {
			State = 776;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,88,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 774; annotationMethodRest();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 775; annotationConstantRest();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationMethodRestContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(JavaParser.IDENTIFIER, 0); }
		public DefaultValueContext defaultValue() {
			return GetRuleContext<DefaultValueContext>(0);
		}
		public AnnotationMethodRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationMethodRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterAnnotationMethodRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitAnnotationMethodRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationMethodRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationMethodRestContext annotationMethodRest() {
		AnnotationMethodRestContext _localctx = new AnnotationMethodRestContext(Context, State);
		EnterRule(_localctx, 120, RULE_annotationMethodRest);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 778; Match(IDENTIFIER);
			State = 779; Match(LPAREN);
			State = 780; Match(RPAREN);
			State = 782;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==DEFAULT) {
				{
				State = 781; defaultValue();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AnnotationConstantRestContext : ParserRuleContext {
		public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		public AnnotationConstantRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_annotationConstantRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterAnnotationConstantRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitAnnotationConstantRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAnnotationConstantRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AnnotationConstantRestContext annotationConstantRest() {
		AnnotationConstantRestContext _localctx = new AnnotationConstantRestContext(Context, State);
		EnterRule(_localctx, 122, RULE_annotationConstantRest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 784; variableDeclarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefaultValueContext : ParserRuleContext {
		public ITerminalNode DEFAULT() { return GetToken(JavaParser.DEFAULT, 0); }
		public ElementValueContext elementValue() {
			return GetRuleContext<ElementValueContext>(0);
		}
		public DefaultValueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_defaultValue; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterDefaultValue(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitDefaultValue(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefaultValue(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefaultValueContext defaultValue() {
		DefaultValueContext _localctx = new DefaultValueContext(Context, State);
		EnterRule(_localctx, 124, RULE_defaultValue);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 786; Match(DEFAULT);
			State = 787; elementValue();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 126, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 789; Match(LBRACE);
			State = 793;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASSERT) | (1L << BOOLEAN) | (1L << BREAK) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONTINUE) | (1L << DO) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << FOR) | (1L << IF) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << NEW) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RETURN) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SUPER) | (1L << SWITCH) | (1L << SYNCHRONIZED) | (1L << THIS) | (1L << THROW) | (1L << TRY) | (1L << VOID) | (1L << WHILE) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN) | (1L << LBRACE))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (SEMI - 67)) | (1L << (LT - 67)) | (1L << (BANG - 67)) | (1L << (TILDE - 67)) | (1L << (INC - 67)) | (1L << (DEC - 67)) | (1L << (ADD - 67)) | (1L << (SUB - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0)) {
				{
				{
				State = 790; blockStatement();
				}
				}
				State = 795;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 796; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public LocalTypeDeclarationContext localTypeDeclaration() {
			return GetRuleContext<LocalTypeDeclarationContext>(0);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlockStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 128, RULE_blockStatement);
		try {
			State = 803;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,91,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 798; localVariableDeclaration();
				State = 799; Match(SEMI);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 801; statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 802; localTypeDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorsContext variableDeclarators() {
			return GetRuleContext<VariableDeclaratorsContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalVariableDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 130, RULE_localVariableDeclaration);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 808;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,92,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 805; variableModifier();
					}
					} 
				}
				State = 810;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,92,Context);
			}
			State = 811; typeType();
			State = 812; variableDeclarators();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalTypeDeclarationContext : ParserRuleContext {
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public InterfaceDeclarationContext interfaceDeclaration() {
			return GetRuleContext<InterfaceDeclarationContext>(0);
		}
		public ClassOrInterfaceModifierContext[] classOrInterfaceModifier() {
			return GetRuleContexts<ClassOrInterfaceModifierContext>();
		}
		public ClassOrInterfaceModifierContext classOrInterfaceModifier(int i) {
			return GetRuleContext<ClassOrInterfaceModifierContext>(i);
		}
		public LocalTypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localTypeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterLocalTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitLocalTypeDeclaration(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLocalTypeDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LocalTypeDeclarationContext localTypeDeclaration() {
		LocalTypeDeclarationContext _localctx = new LocalTypeDeclarationContext(Context, State);
		EnterRule(_localctx, 132, RULE_localTypeDeclaration);
		int _la;
		try {
			State = 825;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ABSTRACT:
			case CLASS:
			case FINAL:
			case INTERFACE:
			case PRIVATE:
			case PROTECTED:
			case PUBLIC:
			case STATIC:
			case STRICTFP:
			case AT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 817;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << FINAL) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << STATIC) | (1L << STRICTFP))) != 0) || _la==AT) {
					{
					{
					State = 814; classOrInterfaceModifier();
					}
					}
					State = 819;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 822;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CLASS:
					{
					State = 820; classDeclaration();
					}
					break;
				case INTERFACE:
					{
					State = 821; interfaceDeclaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 824; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public BlockContext blockLabel;
		public ExpressionContext statementExpression;
		public IToken identifierLabel;
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public ITerminalNode ASSERT() { return GetToken(JavaParser.ASSERT, 0); }
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode IF() { return GetToken(JavaParser.IF, 0); }
		public ParExpressionContext parExpression() {
			return GetRuleContext<ParExpressionContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ITerminalNode ELSE() { return GetToken(JavaParser.ELSE, 0); }
		public ITerminalNode FOR() { return GetToken(JavaParser.FOR, 0); }
		public ForControlContext forControl() {
			return GetRuleContext<ForControlContext>(0);
		}
		public ITerminalNode WHILE() { return GetToken(JavaParser.WHILE, 0); }
		public ITerminalNode DO() { return GetToken(JavaParser.DO, 0); }
		public ITerminalNode TRY() { return GetToken(JavaParser.TRY, 0); }
		public FinallyBlockContext finallyBlock() {
			return GetRuleContext<FinallyBlockContext>(0);
		}
		public CatchClauseContext[] catchClause() {
			return GetRuleContexts<CatchClauseContext>();
		}
		public CatchClauseContext catchClause(int i) {
			return GetRuleContext<CatchClauseContext>(i);
		}
		public ResourceSpecificationContext resourceSpecification() {
			return GetRuleContext<ResourceSpecificationContext>(0);
		}
		public ITerminalNode SWITCH() { return GetToken(JavaParser.SWITCH, 0); }
		public SwitchBlockStatementGroupContext[] switchBlockStatementGroup() {
			return GetRuleContexts<SwitchBlockStatementGroupContext>();
		}
		public SwitchBlockStatementGroupContext switchBlockStatementGroup(int i) {
			return GetRuleContext<SwitchBlockStatementGroupContext>(i);
		}
		public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public ITerminalNode SYNCHRONIZED() { return GetToken(JavaParser.SYNCHRONIZED, 0); }
		public ITerminalNode RETURN() { return GetToken(JavaParser.RETURN, 0); }
		public ITerminalNode THROW() { return GetToken(JavaParser.THROW, 0); }
		public ITerminalNode BREAK() { return GetToken(JavaParser.BREAK, 0); }
		public ITerminalNode IDENTIFIER() { return GetToken(JavaParser.IDENTIFIER, 0); }
		public ITerminalNode CONTINUE() { return GetToken(JavaParser.CONTINUE, 0); }
		public ITerminalNode SEMI() { return GetToken(JavaParser.SEMI, 0); }
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 134, RULE_statement);
		int _la;
		try {
			int _alt;
			State = 931;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,108,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 827; _localctx.blockLabel = block();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 828; Match(ASSERT);
				State = 829; expression(0);
				State = 832;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==COLON) {
					{
					State = 830; Match(COLON);
					State = 831; expression(0);
					}
				}

				State = 834; Match(SEMI);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 836; Match(IF);
				State = 837; parExpression();
				State = 838; statement();
				State = 841;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,97,Context) ) {
				case 1:
					{
					State = 839; Match(ELSE);
					State = 840; statement();
					}
					break;
				}
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 843; Match(FOR);
				State = 844; Match(LPAREN);
				State = 845; forControl();
				State = 846; Match(RPAREN);
				State = 847; statement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 849; Match(WHILE);
				State = 850; parExpression();
				State = 851; statement();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 853; Match(DO);
				State = 854; statement();
				State = 855; Match(WHILE);
				State = 856; parExpression();
				State = 857; Match(SEMI);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 859; Match(TRY);
				State = 860; block();
				State = 870;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case CATCH:
					{
					State = 862;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					do {
						{
						{
						State = 861; catchClause();
						}
						}
						State = 864;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					} while ( _la==CATCH );
					State = 867;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==FINALLY) {
						{
						State = 866; finallyBlock();
						}
					}

					}
					break;
				case FINALLY:
					{
					State = 869; finallyBlock();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 872; Match(TRY);
				State = 873; resourceSpecification();
				State = 874; block();
				State = 878;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CATCH) {
					{
					{
					State = 875; catchClause();
					}
					}
					State = 880;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 882;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==FINALLY) {
					{
					State = 881; finallyBlock();
					}
				}

				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 884; Match(SWITCH);
				State = 885; parExpression();
				State = 886; Match(LBRACE);
				State = 890;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,103,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 887; switchBlockStatementGroup();
						}
						} 
					}
					State = 892;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,103,Context);
				}
				State = 896;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==CASE || _la==DEFAULT) {
					{
					{
					State = 893; switchLabel();
					}
					}
					State = 898;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 899; Match(RBRACE);
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 901; Match(SYNCHRONIZED);
				State = 902; parExpression();
				State = 903; block();
				}
				break;
			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 905; Match(RETURN);
				State = 907;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (LT - 72)) | (1L << (BANG - 72)) | (1L << (TILDE - 72)) | (1L << (INC - 72)) | (1L << (DEC - 72)) | (1L << (ADD - 72)) | (1L << (SUB - 72)) | (1L << (AT - 72)) | (1L << (IDENTIFIER - 72)))) != 0)) {
					{
					State = 906; expression(0);
					}
				}

				State = 909; Match(SEMI);
				}
				break;
			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 910; Match(THROW);
				State = 911; expression(0);
				State = 912; Match(SEMI);
				}
				break;
			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 914; Match(BREAK);
				State = 916;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 915; Match(IDENTIFIER);
					}
				}

				State = 918; Match(SEMI);
				}
				break;
			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 919; Match(CONTINUE);
				State = 921;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==IDENTIFIER) {
					{
					State = 920; Match(IDENTIFIER);
					}
				}

				State = 923; Match(SEMI);
				}
				break;
			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 924; Match(SEMI);
				}
				break;
			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 925; _localctx.statementExpression = expression(0);
				State = 926; Match(SEMI);
				}
				break;
			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 928; _localctx.identifierLabel = Match(IDENTIFIER);
				State = 929; Match(COLON);
				State = 930; statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchClauseContext : ParserRuleContext {
		public ITerminalNode CATCH() { return GetToken(JavaParser.CATCH, 0); }
		public CatchTypeContext catchType() {
			return GetRuleContext<CatchTypeContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(JavaParser.IDENTIFIER, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public CatchClauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchClause; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterCatchClause(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitCatchClause(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchClause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchClauseContext catchClause() {
		CatchClauseContext _localctx = new CatchClauseContext(Context, State);
		EnterRule(_localctx, 136, RULE_catchClause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 933; Match(CATCH);
			State = 934; Match(LPAREN);
			State = 938;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 935; variableModifier();
				}
				}
				State = 940;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 941; catchType();
			State = 942; Match(IDENTIFIER);
			State = 943; Match(RPAREN);
			State = 944; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CatchTypeContext : ParserRuleContext {
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public CatchTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_catchType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterCatchType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitCatchType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCatchType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CatchTypeContext catchType() {
		CatchTypeContext _localctx = new CatchTypeContext(Context, State);
		EnterRule(_localctx, 138, RULE_catchType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 946; qualifiedName();
			State = 951;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==BITOR) {
				{
				{
				State = 947; Match(BITOR);
				State = 948; qualifiedName();
				}
				}
				State = 953;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinallyBlockContext : ParserRuleContext {
		public ITerminalNode FINALLY() { return GetToken(JavaParser.FINALLY, 0); }
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public FinallyBlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finallyBlock; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterFinallyBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitFinallyBlock(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinallyBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinallyBlockContext finallyBlock() {
		FinallyBlockContext _localctx = new FinallyBlockContext(Context, State);
		EnterRule(_localctx, 140, RULE_finallyBlock);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 954; Match(FINALLY);
			State = 955; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceSpecificationContext : ParserRuleContext {
		public ResourcesContext resources() {
			return GetRuleContext<ResourcesContext>(0);
		}
		public ResourceSpecificationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resourceSpecification; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterResourceSpecification(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitResourceSpecification(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResourceSpecification(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceSpecificationContext resourceSpecification() {
		ResourceSpecificationContext _localctx = new ResourceSpecificationContext(Context, State);
		EnterRule(_localctx, 142, RULE_resourceSpecification);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 957; Match(LPAREN);
			State = 958; resources();
			State = 960;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SEMI) {
				{
				State = 959; Match(SEMI);
				}
			}

			State = 962; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourcesContext : ParserRuleContext {
		public ResourceContext[] resource() {
			return GetRuleContexts<ResourceContext>();
		}
		public ResourceContext resource(int i) {
			return GetRuleContext<ResourceContext>(i);
		}
		public ResourcesContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resources; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterResources(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitResources(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResources(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourcesContext resources() {
		ResourcesContext _localctx = new ResourcesContext(Context, State);
		EnterRule(_localctx, 144, RULE_resources);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 964; resource();
			State = 969;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,112,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 965; Match(SEMI);
					State = 966; resource();
					}
					} 
				}
				State = 971;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,112,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ResourceContext : ParserRuleContext {
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public ResourceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_resource; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterResource(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitResource(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitResource(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ResourceContext resource() {
		ResourceContext _localctx = new ResourceContext(Context, State);
		EnterRule(_localctx, 146, RULE_resource);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 975;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==FINAL || _la==AT) {
				{
				{
				State = 972; variableModifier();
				}
				}
				State = 977;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 978; classOrInterfaceType();
			State = 979; variableDeclaratorId();
			State = 980; Match(ASSIGN);
			State = 981; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchBlockStatementGroupContext : ParserRuleContext {
		public SwitchLabelContext[] switchLabel() {
			return GetRuleContexts<SwitchLabelContext>();
		}
		public SwitchLabelContext switchLabel(int i) {
			return GetRuleContext<SwitchLabelContext>(i);
		}
		public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public SwitchBlockStatementGroupContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchBlockStatementGroup; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterSwitchBlockStatementGroup(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitSwitchBlockStatementGroup(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchBlockStatementGroup(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchBlockStatementGroupContext switchBlockStatementGroup() {
		SwitchBlockStatementGroupContext _localctx = new SwitchBlockStatementGroupContext(Context, State);
		EnterRule(_localctx, 148, RULE_switchBlockStatementGroup);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 984;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 983; switchLabel();
				}
				}
				State = 986;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==CASE || _la==DEFAULT );
			State = 989;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 988; blockStatement();
				}
				}
				State = 991;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ABSTRACT) | (1L << ASSERT) | (1L << BOOLEAN) | (1L << BREAK) | (1L << BYTE) | (1L << CHAR) | (1L << CLASS) | (1L << CONTINUE) | (1L << DO) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << FOR) | (1L << IF) | (1L << INT) | (1L << INTERFACE) | (1L << LONG) | (1L << NEW) | (1L << PRIVATE) | (1L << PROTECTED) | (1L << PUBLIC) | (1L << RETURN) | (1L << SHORT) | (1L << STATIC) | (1L << STRICTFP) | (1L << SUPER) | (1L << SWITCH) | (1L << SYNCHRONIZED) | (1L << THIS) | (1L << THROW) | (1L << TRY) | (1L << VOID) | (1L << WHILE) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN) | (1L << LBRACE))) != 0) || ((((_la - 67)) & ~0x3f) == 0 && ((1L << (_la - 67)) & ((1L << (SEMI - 67)) | (1L << (LT - 67)) | (1L << (BANG - 67)) | (1L << (TILDE - 67)) | (1L << (INC - 67)) | (1L << (DEC - 67)) | (1L << (ADD - 67)) | (1L << (SUB - 67)) | (1L << (AT - 67)) | (1L << (IDENTIFIER - 67)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SwitchLabelContext : ParserRuleContext {
		public ExpressionContext constantExpression;
		public IToken enumConstantName;
		public ITerminalNode CASE() { return GetToken(JavaParser.CASE, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(JavaParser.IDENTIFIER, 0); }
		public ITerminalNode DEFAULT() { return GetToken(JavaParser.DEFAULT, 0); }
		public SwitchLabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_switchLabel; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterSwitchLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitSwitchLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSwitchLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SwitchLabelContext switchLabel() {
		SwitchLabelContext _localctx = new SwitchLabelContext(Context, State);
		EnterRule(_localctx, 150, RULE_switchLabel);
		try {
			State = 1001;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case CASE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 993; Match(CASE);
				State = 996;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,116,Context) ) {
				case 1:
					{
					State = 994; _localctx.constantExpression = expression(0);
					}
					break;
				case 2:
					{
					State = 995; _localctx.enumConstantName = Match(IDENTIFIER);
					}
					break;
				}
				State = 998; Match(COLON);
				}
				break;
			case DEFAULT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 999; Match(DEFAULT);
				State = 1000; Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForControlContext : ParserRuleContext {
		public ExpressionListContext forUpdate;
		public EnhancedForControlContext enhancedForControl() {
			return GetRuleContext<EnhancedForControlContext>(0);
		}
		public ForInitContext forInit() {
			return GetRuleContext<ForInitContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forControl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterForControl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitForControl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForControlContext forControl() {
		ForControlContext _localctx = new ForControlContext(Context, State);
		EnterRule(_localctx, 152, RULE_forControl);
		int _la;
		try {
			State = 1015;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,121,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1003; enhancedForControl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1005;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (LT - 72)) | (1L << (BANG - 72)) | (1L << (TILDE - 72)) | (1L << (INC - 72)) | (1L << (DEC - 72)) | (1L << (ADD - 72)) | (1L << (SUB - 72)) | (1L << (AT - 72)) | (1L << (IDENTIFIER - 72)))) != 0)) {
					{
					State = 1004; forInit();
					}
				}

				State = 1007; Match(SEMI);
				State = 1009;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (LT - 72)) | (1L << (BANG - 72)) | (1L << (TILDE - 72)) | (1L << (INC - 72)) | (1L << (DEC - 72)) | (1L << (ADD - 72)) | (1L << (SUB - 72)) | (1L << (AT - 72)) | (1L << (IDENTIFIER - 72)))) != 0)) {
					{
					State = 1008; expression(0);
					}
				}

				State = 1011; Match(SEMI);
				State = 1013;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (LT - 72)) | (1L << (BANG - 72)) | (1L << (TILDE - 72)) | (1L << (INC - 72)) | (1L << (DEC - 72)) | (1L << (ADD - 72)) | (1L << (SUB - 72)) | (1L << (AT - 72)) | (1L << (IDENTIFIER - 72)))) != 0)) {
					{
					State = 1012; _localctx.forUpdate = expressionList();
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForInitContext : ParserRuleContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ForInitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forInit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterForInit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitForInit(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForInit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForInitContext forInit() {
		ForInitContext _localctx = new ForInitContext(Context, State);
		EnterRule(_localctx, 154, RULE_forInit);
		try {
			State = 1019;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,122,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1017; localVariableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1018; expressionList();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnhancedForControlContext : ParserRuleContext {
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableModifierContext[] variableModifier() {
			return GetRuleContexts<VariableModifierContext>();
		}
		public VariableModifierContext variableModifier(int i) {
			return GetRuleContext<VariableModifierContext>(i);
		}
		public EnhancedForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enhancedForControl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterEnhancedForControl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitEnhancedForControl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEnhancedForControl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EnhancedForControlContext enhancedForControl() {
		EnhancedForControlContext _localctx = new EnhancedForControlContext(Context, State);
		EnterRule(_localctx, 156, RULE_enhancedForControl);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1024;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1021; variableModifier();
					}
					} 
				}
				State = 1026;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,123,Context);
			}
			State = 1027; typeType();
			State = 1028; variableDeclaratorId();
			State = 1029; Match(COLON);
			State = 1030; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParExpressionContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterParExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitParExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParExpressionContext parExpression() {
		ParExpressionContext _localctx = new ParExpressionContext(Context, State);
		EnterRule(_localctx, 158, RULE_parExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1032; Match(LPAREN);
			State = 1033; expression(0);
			State = 1034; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 160, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1036; expression(0);
			State = 1041;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1037; Match(COMMA);
				State = 1038; expression(0);
				}
				}
				State = 1043;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodCallContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(JavaParser.IDENTIFIER, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ITerminalNode THIS() { return GetToken(JavaParser.THIS, 0); }
		public ITerminalNode SUPER() { return GetToken(JavaParser.SUPER, 0); }
		public MethodCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodCall; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterMethodCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitMethodCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMethodCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MethodCallContext methodCall() {
		MethodCallContext _localctx = new MethodCallContext(Context, State);
		EnterRule(_localctx, 162, RULE_methodCall);
		int _la;
		try {
			State = 1062;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1044; Match(IDENTIFIER);
				State = 1045; Match(LPAREN);
				State = 1047;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (LT - 72)) | (1L << (BANG - 72)) | (1L << (TILDE - 72)) | (1L << (INC - 72)) | (1L << (DEC - 72)) | (1L << (ADD - 72)) | (1L << (SUB - 72)) | (1L << (AT - 72)) | (1L << (IDENTIFIER - 72)))) != 0)) {
					{
					State = 1046; expressionList();
					}
				}

				State = 1049; Match(RPAREN);
				}
				break;
			case THIS:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1050; Match(THIS);
				State = 1051; Match(LPAREN);
				State = 1053;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (LT - 72)) | (1L << (BANG - 72)) | (1L << (TILDE - 72)) | (1L << (INC - 72)) | (1L << (DEC - 72)) | (1L << (ADD - 72)) | (1L << (SUB - 72)) | (1L << (AT - 72)) | (1L << (IDENTIFIER - 72)))) != 0)) {
					{
					State = 1052; expressionList();
					}
				}

				State = 1055; Match(RPAREN);
				}
				break;
			case SUPER:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1056; Match(SUPER);
				State = 1057; Match(LPAREN);
				State = 1059;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (LT - 72)) | (1L << (BANG - 72)) | (1L << (TILDE - 72)) | (1L << (INC - 72)) | (1L << (DEC - 72)) | (1L << (ADD - 72)) | (1L << (SUB - 72)) | (1L << (AT - 72)) | (1L << (IDENTIFIER - 72)))) != 0)) {
					{
					State = 1058; expressionList();
					}
				}

				State = 1061; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public IToken prefix;
		public IToken bop;
		public IToken postfix;
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public MethodCallContext methodCall() {
			return GetRuleContext<MethodCallContext>(0);
		}
		public ITerminalNode NEW() { return GetToken(JavaParser.NEW, 0); }
		public CreatorContext creator() {
			return GetRuleContext<CreatorContext>(0);
		}
		public TypeTypeContext typeType() {
			return GetRuleContext<TypeTypeContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public LambdaExpressionContext lambdaExpression() {
			return GetRuleContext<LambdaExpressionContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(JavaParser.IDENTIFIER, 0); }
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ClassTypeContext classType() {
			return GetRuleContext<ClassTypeContext>(0);
		}
		public ITerminalNode THIS() { return GetToken(JavaParser.THIS, 0); }
		public InnerCreatorContext innerCreator() {
			return GetRuleContext<InnerCreatorContext>(0);
		}
		public ITerminalNode SUPER() { return GetToken(JavaParser.SUPER, 0); }
		public SuperSuffixContext superSuffix() {
			return GetRuleContext<SuperSuffixContext>(0);
		}
		public ExplicitGenericInvocationContext explicitGenericInvocation() {
			return GetRuleContext<ExplicitGenericInvocationContext>(0);
		}
		public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		public ITerminalNode INSTANCEOF() { return GetToken(JavaParser.INSTANCEOF, 0); }
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 164;
		EnterRecursionRule(_localctx, 164, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1095;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,132,Context) ) {
			case 1:
				{
				State = 1065; primary();
				}
				break;
			case 2:
				{
				State = 1066; methodCall();
				}
				break;
			case 3:
				{
				State = 1067; Match(NEW);
				State = 1068; creator();
				}
				break;
			case 4:
				{
				State = 1069; Match(LPAREN);
				State = 1070; typeType();
				State = 1071; Match(RPAREN);
				State = 1072; expression(21);
				}
				break;
			case 5:
				{
				State = 1074;
				_localctx.prefix = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(((((_la - 83)) & ~0x3f) == 0 && ((1L << (_la - 83)) & ((1L << (INC - 83)) | (1L << (DEC - 83)) | (1L << (ADD - 83)) | (1L << (SUB - 83)))) != 0)) ) {
					_localctx.prefix = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1075; expression(19);
				}
				break;
			case 6:
				{
				State = 1076;
				_localctx.prefix = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==BANG || _la==TILDE) ) {
					_localctx.prefix = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 1077; expression(18);
				}
				break;
			case 7:
				{
				State = 1078; lambdaExpression();
				}
				break;
			case 8:
				{
				State = 1079; typeType();
				State = 1080; Match(COLONCOLON);
				State = 1086;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LT:
				case IDENTIFIER:
					{
					State = 1082;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LT) {
						{
						State = 1081; typeArguments();
						}
					}

					State = 1084; Match(IDENTIFIER);
					}
					break;
				case NEW:
					{
					State = 1085; Match(NEW);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 9:
				{
				State = 1088; classType();
				State = 1089; Match(COLONCOLON);
				State = 1091;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1090; typeArguments();
					}
				}

				State = 1093; Match(NEW);
				}
				break;
			}
			Context.Stop = TokenStream.LT(-1);
			State = 1177;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 1175;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,137,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1097;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 1098;
						_localctx.bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 87)) & ~0x3f) == 0 && ((1L << (_la - 87)) & ((1L << (MUL - 87)) | (1L << (DIV - 87)) | (1L << (MOD - 87)))) != 0)) ) {
							_localctx.bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1099; expression(18);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1100;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 1101;
						_localctx.bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==ADD || _la==SUB) ) {
							_localctx.bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1102; expression(17);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1103;
						if (!(Precpred(Context, 15))) throw new FailedPredicateException(this, "Precpred(Context, 15)");
						State = 1111;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,133,Context) ) {
						case 1:
							{
							State = 1104; Match(LT);
							State = 1105; Match(LT);
							}
							break;
						case 2:
							{
							State = 1106; Match(GT);
							State = 1107; Match(GT);
							State = 1108; Match(GT);
							}
							break;
						case 3:
							{
							State = 1109; Match(GT);
							State = 1110; Match(GT);
							}
							break;
						}
						State = 1113; expression(16);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1114;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 1115;
						_localctx.bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 71)) & ~0x3f) == 0 && ((1L << (_la - 71)) & ((1L << (GT - 71)) | (1L << (LT - 71)) | (1L << (LE - 71)) | (1L << (GE - 71)))) != 0)) ) {
							_localctx.bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1116; expression(15);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1117;
						if (!(Precpred(Context, 12))) throw new FailedPredicateException(this, "Precpred(Context, 12)");
						State = 1118;
						_localctx.bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==EQUAL || _la==NOTEQUAL) ) {
							_localctx.bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1119; expression(13);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1120;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 1121; _localctx.bop = Match(BITAND);
						State = 1122; expression(12);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1123;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 1124; _localctx.bop = Match(CARET);
						State = 1125; expression(11);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1126;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 1127; _localctx.bop = Match(BITOR);
						State = 1128; expression(10);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1129;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 1130; _localctx.bop = Match(AND);
						State = 1131; expression(9);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1132;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 1133; _localctx.bop = Match(OR);
						State = 1134; expression(8);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1135;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 1136; _localctx.bop = Match(QUESTION);
						State = 1137; expression(0);
						State = 1138; Match(COLON);
						State = 1139; expression(7);
						}
						break;
					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1141;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 1142;
						_localctx.bop = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((((_la - 70)) & ~0x3f) == 0 && ((1L << (_la - 70)) & ((1L << (ASSIGN - 70)) | (1L << (ADD_ASSIGN - 70)) | (1L << (SUB_ASSIGN - 70)) | (1L << (MUL_ASSIGN - 70)) | (1L << (DIV_ASSIGN - 70)) | (1L << (AND_ASSIGN - 70)) | (1L << (OR_ASSIGN - 70)) | (1L << (XOR_ASSIGN - 70)) | (1L << (MOD_ASSIGN - 70)) | (1L << (LSHIFT_ASSIGN - 70)) | (1L << (RSHIFT_ASSIGN - 70)) | (1L << (URSHIFT_ASSIGN - 70)))) != 0)) ) {
							_localctx.bop = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 1143; expression(5);
						}
						break;
					case 13:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1144;
						if (!(Precpred(Context, 25))) throw new FailedPredicateException(this, "Precpred(Context, 25)");
						State = 1145; _localctx.bop = Match(DOT);
						State = 1157;
						ErrorHandler.Sync(this);
						switch ( Interpreter.AdaptivePredict(TokenStream,135,Context) ) {
						case 1:
							{
							State = 1146; Match(IDENTIFIER);
							}
							break;
						case 2:
							{
							State = 1147; methodCall();
							}
							break;
						case 3:
							{
							State = 1148; Match(THIS);
							}
							break;
						case 4:
							{
							State = 1149; Match(NEW);
							State = 1151;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							if (_la==LT) {
								{
								State = 1150; nonWildcardTypeArguments();
								}
							}

							State = 1153; innerCreator();
							}
							break;
						case 5:
							{
							State = 1154; Match(SUPER);
							State = 1155; superSuffix();
							}
							break;
						case 6:
							{
							State = 1156; explicitGenericInvocation();
							}
							break;
						}
						}
						break;
					case 14:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1159;
						if (!(Precpred(Context, 24))) throw new FailedPredicateException(this, "Precpred(Context, 24)");
						State = 1160; Match(LBRACK);
						State = 1161; expression(0);
						State = 1162; Match(RBRACK);
						}
						break;
					case 15:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1164;
						if (!(Precpred(Context, 20))) throw new FailedPredicateException(this, "Precpred(Context, 20)");
						State = 1165;
						_localctx.postfix = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==INC || _la==DEC) ) {
							_localctx.postfix = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						}
						break;
					case 16:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1166;
						if (!(Precpred(Context, 13))) throw new FailedPredicateException(this, "Precpred(Context, 13)");
						State = 1167; _localctx.bop = Match(INSTANCEOF);
						State = 1168; typeType();
						}
						break;
					case 17:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 1169;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 1170; Match(COLONCOLON);
						State = 1172;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (_la==LT) {
							{
							State = 1171; typeArguments();
							}
						}

						State = 1174; Match(IDENTIFIER);
						}
						break;
					}
					} 
				}
				State = 1179;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,138,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class LambdaExpressionContext : ParserRuleContext {
		public LambdaParametersContext lambdaParameters() {
			return GetRuleContext<LambdaParametersContext>(0);
		}
		public LambdaBodyContext lambdaBody() {
			return GetRuleContext<LambdaBodyContext>(0);
		}
		public LambdaExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterLambdaExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitLambdaExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaExpressionContext lambdaExpression() {
		LambdaExpressionContext _localctx = new LambdaExpressionContext(Context, State);
		EnterRule(_localctx, 166, RULE_lambdaExpression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1180; lambdaParameters();
			State = 1181; Match(ARROW);
			State = 1182; lambdaBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaParametersContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(JavaParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(JavaParser.IDENTIFIER, i);
		}
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public LambdaParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterLambdaParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitLambdaParameters(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaParametersContext lambdaParameters() {
		LambdaParametersContext _localctx = new LambdaParametersContext(Context, State);
		EnterRule(_localctx, 168, RULE_lambdaParameters);
		int _la;
		try {
			State = 1200;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,141,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1184; Match(IDENTIFIER);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1185; Match(LPAREN);
				State = 1187;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FINAL) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << SHORT))) != 0) || _la==AT || _la==IDENTIFIER) {
					{
					State = 1186; formalParameterList();
					}
				}

				State = 1189; Match(RPAREN);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1190; Match(LPAREN);
				State = 1191; Match(IDENTIFIER);
				State = 1196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==COMMA) {
					{
					{
					State = 1192; Match(COMMA);
					State = 1193; Match(IDENTIFIER);
					}
					}
					State = 1198;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1199; Match(RPAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LambdaBodyContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public LambdaBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lambdaBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterLambdaBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitLambdaBody(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLambdaBody(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LambdaBodyContext lambdaBody() {
		LambdaBodyContext _localctx = new LambdaBodyContext(Context, State);
		EnterRule(_localctx, 170, RULE_lambdaBody);
		try {
			State = 1204;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case THIS:
			case VOID:
			case DECIMAL_LITERAL:
			case HEX_LITERAL:
			case OCT_LITERAL:
			case BINARY_LITERAL:
			case FLOAT_LITERAL:
			case HEX_FLOAT_LITERAL:
			case BOOL_LITERAL:
			case CHAR_LITERAL:
			case STRING_LITERAL:
			case NULL_LITERAL:
			case LPAREN:
			case LT:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case AT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1202; expression(0);
				}
				break;
			case LBRACE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1203; block();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ITerminalNode THIS() { return GetToken(JavaParser.THIS, 0); }
		public ITerminalNode SUPER() { return GetToken(JavaParser.SUPER, 0); }
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(JavaParser.IDENTIFIER, 0); }
		public TypeTypeOrVoidContext typeTypeOrVoid() {
			return GetRuleContext<TypeTypeOrVoidContext>(0);
		}
		public ITerminalNode CLASS() { return GetToken(JavaParser.CLASS, 0); }
		public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		public ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix() {
			return GetRuleContext<ExplicitGenericInvocationSuffixContext>(0);
		}
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 172, RULE_primary);
		try {
			State = 1224;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,144,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1206; Match(LPAREN);
				State = 1207; expression(0);
				State = 1208; Match(RPAREN);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1210; Match(THIS);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 1211; Match(SUPER);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 1212; literal();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 1213; Match(IDENTIFIER);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 1214; typeTypeOrVoid();
				State = 1215; Match(DOT);
				State = 1216; Match(CLASS);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 1218; nonWildcardTypeArguments();
				State = 1222;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SUPER:
				case IDENTIFIER:
					{
					State = 1219; explicitGenericInvocationSuffix();
					}
					break;
				case THIS:
					{
					State = 1220; Match(THIS);
					State = 1221; arguments();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassTypeContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(JavaParser.IDENTIFIER, 0); }
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public AnnotationContext[] annotation() {
			return GetRuleContexts<AnnotationContext>();
		}
		public AnnotationContext annotation(int i) {
			return GetRuleContext<AnnotationContext>(i);
		}
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public ClassTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterClassType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitClassType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassTypeContext classType() {
		ClassTypeContext _localctx = new ClassTypeContext(Context, State);
		EnterRule(_localctx, 174, RULE_classType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1229;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,145,Context) ) {
			case 1:
				{
				State = 1226; classOrInterfaceType();
				State = 1227; Match(DOT);
				}
				break;
			}
			State = 1234;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==AT) {
				{
				{
				State = 1231; annotation();
				}
				}
				State = 1236;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1237; Match(IDENTIFIER);
			State = 1239;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1238; typeArguments();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatorContext : ParserRuleContext {
		public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		public CreatedNameContext createdName() {
			return GetRuleContext<CreatedNameContext>(0);
		}
		public ClassCreatorRestContext classCreatorRest() {
			return GetRuleContext<ClassCreatorRestContext>(0);
		}
		public ArrayCreatorRestContext arrayCreatorRest() {
			return GetRuleContext<ArrayCreatorRestContext>(0);
		}
		public CreatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_creator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterCreator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitCreator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreatorContext creator() {
		CreatorContext _localctx = new CreatorContext(Context, State);
		EnterRule(_localctx, 176, RULE_creator);
		try {
			State = 1250;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1241; nonWildcardTypeArguments();
				State = 1242; createdName();
				State = 1243; classCreatorRest();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1245; createdName();
				State = 1248;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case LBRACK:
					{
					State = 1246; arrayCreatorRest();
					}
					break;
				case LPAREN:
					{
					State = 1247; classCreatorRest();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatedNameContext : ParserRuleContext {
		public ITerminalNode[] IDENTIFIER() { return GetTokens(JavaParser.IDENTIFIER); }
		public ITerminalNode IDENTIFIER(int i) {
			return GetToken(JavaParser.IDENTIFIER, i);
		}
		public TypeArgumentsOrDiamondContext[] typeArgumentsOrDiamond() {
			return GetRuleContexts<TypeArgumentsOrDiamondContext>();
		}
		public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond(int i) {
			return GetRuleContext<TypeArgumentsOrDiamondContext>(i);
		}
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public CreatedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterCreatedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitCreatedName(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreatedName(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreatedNameContext createdName() {
		CreatedNameContext _localctx = new CreatedNameContext(Context, State);
		EnterRule(_localctx, 178, RULE_createdName);
		int _la;
		try {
			State = 1267;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1252; Match(IDENTIFIER);
				State = 1254;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==LT) {
					{
					State = 1253; typeArgumentsOrDiamond();
					}
				}

				State = 1263;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==DOT) {
					{
					{
					State = 1256; Match(DOT);
					State = 1257; Match(IDENTIFIER);
					State = 1259;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					if (_la==LT) {
						{
						State = 1258; typeArgumentsOrDiamond();
						}
					}

					}
					}
					State = 1265;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1266; primitiveType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InnerCreatorContext : ParserRuleContext {
		public ITerminalNode IDENTIFIER() { return GetToken(JavaParser.IDENTIFIER, 0); }
		public ClassCreatorRestContext classCreatorRest() {
			return GetRuleContext<ClassCreatorRestContext>(0);
		}
		public NonWildcardTypeArgumentsOrDiamondContext nonWildcardTypeArgumentsOrDiamond() {
			return GetRuleContext<NonWildcardTypeArgumentsOrDiamondContext>(0);
		}
		public InnerCreatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_innerCreator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterInnerCreator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitInnerCreator(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInnerCreator(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InnerCreatorContext innerCreator() {
		InnerCreatorContext _localctx = new InnerCreatorContext(Context, State);
		EnterRule(_localctx, 180, RULE_innerCreator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1269; Match(IDENTIFIER);
			State = 1271;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LT) {
				{
				State = 1270; nonWildcardTypeArgumentsOrDiamond();
				}
			}

			State = 1273; classCreatorRest();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayCreatorRestContext : ParserRuleContext {
		public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ArrayCreatorRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayCreatorRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterArrayCreatorRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitArrayCreatorRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArrayCreatorRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArrayCreatorRestContext arrayCreatorRest() {
		ArrayCreatorRestContext _localctx = new ArrayCreatorRestContext(Context, State);
		EnterRule(_localctx, 182, RULE_arrayCreatorRest);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1275; Match(LBRACK);
			State = 1303;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case RBRACK:
				{
				State = 1276; Match(RBRACK);
				State = 1281;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==LBRACK) {
					{
					{
					State = 1277; Match(LBRACK);
					State = 1278; Match(RBRACK);
					}
					}
					State = 1283;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 1284; arrayInitializer();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case NEW:
			case SHORT:
			case SUPER:
			case THIS:
			case VOID:
			case DECIMAL_LITERAL:
			case HEX_LITERAL:
			case OCT_LITERAL:
			case BINARY_LITERAL:
			case FLOAT_LITERAL:
			case HEX_FLOAT_LITERAL:
			case BOOL_LITERAL:
			case CHAR_LITERAL:
			case STRING_LITERAL:
			case NULL_LITERAL:
			case LPAREN:
			case LT:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case AT:
			case IDENTIFIER:
				{
				State = 1285; expression(0);
				State = 1286; Match(RBRACK);
				State = 1293;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,156,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1287; Match(LBRACK);
						State = 1288; expression(0);
						State = 1289; Match(RBRACK);
						}
						} 
					}
					State = 1295;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,156,Context);
				}
				State = 1300;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,157,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 1296; Match(LBRACK);
						State = 1297; Match(RBRACK);
						}
						} 
					}
					State = 1302;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,157,Context);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassCreatorRestContext : ParserRuleContext {
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ClassCreatorRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classCreatorRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterClassCreatorRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitClassCreatorRest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitClassCreatorRest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ClassCreatorRestContext classCreatorRest() {
		ClassCreatorRestContext _localctx = new ClassCreatorRestContext(Context, State);
		EnterRule(_localctx, 184, RULE_classCreatorRest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1305; arguments();
			State = 1307;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,159,Context) ) {
			case 1:
				{
				State = 1306; classBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitGenericInvocationContext : ParserRuleContext {
		public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		public ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix() {
			return GetRuleContext<ExplicitGenericInvocationSuffixContext>(0);
		}
		public ExplicitGenericInvocationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitGenericInvocation; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterExplicitGenericInvocation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitExplicitGenericInvocation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitGenericInvocation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitGenericInvocationContext explicitGenericInvocation() {
		ExplicitGenericInvocationContext _localctx = new ExplicitGenericInvocationContext(Context, State);
		EnterRule(_localctx, 186, RULE_explicitGenericInvocation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1309; nonWildcardTypeArguments();
			State = 1310; explicitGenericInvocationSuffix();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsOrDiamondContext : ParserRuleContext {
		public TypeArgumentsContext typeArguments() {
			return GetRuleContext<TypeArgumentsContext>(0);
		}
		public TypeArgumentsOrDiamondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArgumentsOrDiamond; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterTypeArgumentsOrDiamond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitTypeArgumentsOrDiamond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArgumentsOrDiamond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsOrDiamondContext typeArgumentsOrDiamond() {
		TypeArgumentsOrDiamondContext _localctx = new TypeArgumentsOrDiamondContext(Context, State);
		EnterRule(_localctx, 188, RULE_typeArgumentsOrDiamond);
		try {
			State = 1315;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,160,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1312; Match(LT);
				State = 1313; Match(GT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1314; typeArguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonWildcardTypeArgumentsOrDiamondContext : ParserRuleContext {
		public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
			return GetRuleContext<NonWildcardTypeArgumentsContext>(0);
		}
		public NonWildcardTypeArgumentsOrDiamondContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonWildcardTypeArgumentsOrDiamond; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterNonWildcardTypeArgumentsOrDiamond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitNonWildcardTypeArgumentsOrDiamond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonWildcardTypeArgumentsOrDiamond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonWildcardTypeArgumentsOrDiamondContext nonWildcardTypeArgumentsOrDiamond() {
		NonWildcardTypeArgumentsOrDiamondContext _localctx = new NonWildcardTypeArgumentsOrDiamondContext(Context, State);
		EnterRule(_localctx, 190, RULE_nonWildcardTypeArgumentsOrDiamond);
		try {
			State = 1320;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,161,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1317; Match(LT);
				State = 1318; Match(GT);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1319; nonWildcardTypeArguments();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NonWildcardTypeArgumentsContext : ParserRuleContext {
		public TypeListContext typeList() {
			return GetRuleContext<TypeListContext>(0);
		}
		public NonWildcardTypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_nonWildcardTypeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterNonWildcardTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitNonWildcardTypeArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNonWildcardTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NonWildcardTypeArgumentsContext nonWildcardTypeArguments() {
		NonWildcardTypeArgumentsContext _localctx = new NonWildcardTypeArgumentsContext(Context, State);
		EnterRule(_localctx, 192, RULE_nonWildcardTypeArguments);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1322; Match(LT);
			State = 1323; typeList();
			State = 1324; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeListContext : ParserRuleContext {
		public TypeTypeContext[] typeType() {
			return GetRuleContexts<TypeTypeContext>();
		}
		public TypeTypeContext typeType(int i) {
			return GetRuleContext<TypeTypeContext>(i);
		}
		public TypeListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterTypeList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitTypeList(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeList(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeListContext typeList() {
		TypeListContext _localctx = new TypeListContext(Context, State);
		EnterRule(_localctx, 194, RULE_typeList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1326; typeType();
			State = 1331;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1327; Match(COMMA);
				State = 1328; typeType();
				}
				}
				State = 1333;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeTypeContext : ParserRuleContext {
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public AnnotationContext annotation() {
			return GetRuleContext<AnnotationContext>(0);
		}
		public TypeTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterTypeType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitTypeType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeTypeContext typeType() {
		TypeTypeContext _localctx = new TypeTypeContext(Context, State);
		EnterRule(_localctx, 196, RULE_typeType);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 1335;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AT) {
				{
				State = 1334; annotation();
				}
			}

			State = 1339;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				State = 1337; classOrInterfaceType();
				}
				break;
			case BOOLEAN:
			case BYTE:
			case CHAR:
			case DOUBLE:
			case FLOAT:
			case INT:
			case LONG:
			case SHORT:
				{
				State = 1338; primitiveType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 1345;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,165,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 1341; Match(LBRACK);
					State = 1342; Match(RBRACK);
					}
					} 
				}
				State = 1347;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,165,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public ITerminalNode BOOLEAN() { return GetToken(JavaParser.BOOLEAN, 0); }
		public ITerminalNode CHAR() { return GetToken(JavaParser.CHAR, 0); }
		public ITerminalNode BYTE() { return GetToken(JavaParser.BYTE, 0); }
		public ITerminalNode SHORT() { return GetToken(JavaParser.SHORT, 0); }
		public ITerminalNode INT() { return GetToken(JavaParser.INT, 0); }
		public ITerminalNode LONG() { return GetToken(JavaParser.LONG, 0); }
		public ITerminalNode FLOAT() { return GetToken(JavaParser.FLOAT, 0); }
		public ITerminalNode DOUBLE() { return GetToken(JavaParser.DOUBLE, 0); }
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimitiveType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 198, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1348;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << SHORT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeArgumentsContext : ParserRuleContext {
		public TypeArgumentContext[] typeArgument() {
			return GetRuleContexts<TypeArgumentContext>();
		}
		public TypeArgumentContext typeArgument(int i) {
			return GetRuleContext<TypeArgumentContext>(i);
		}
		public TypeArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeArguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterTypeArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitTypeArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTypeArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeArgumentsContext typeArguments() {
		TypeArgumentsContext _localctx = new TypeArgumentsContext(Context, State);
		EnterRule(_localctx, 200, RULE_typeArguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1350; Match(LT);
			State = 1351; typeArgument();
			State = 1356;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 1352; Match(COMMA);
				State = 1353; typeArgument();
				}
				}
				State = 1358;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 1359; Match(GT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SuperSuffixContext : ParserRuleContext {
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(JavaParser.IDENTIFIER, 0); }
		public SuperSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_superSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterSuperSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitSuperSuffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSuperSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SuperSuffixContext superSuffix() {
		SuperSuffixContext _localctx = new SuperSuffixContext(Context, State);
		EnterRule(_localctx, 202, RULE_superSuffix);
		try {
			State = 1367;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1361; arguments();
				}
				break;
			case DOT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1362; Match(DOT);
				State = 1363; Match(IDENTIFIER);
				State = 1365;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,167,Context) ) {
				case 1:
					{
					State = 1364; arguments();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExplicitGenericInvocationSuffixContext : ParserRuleContext {
		public ITerminalNode SUPER() { return GetToken(JavaParser.SUPER, 0); }
		public SuperSuffixContext superSuffix() {
			return GetRuleContext<SuperSuffixContext>(0);
		}
		public ITerminalNode IDENTIFIER() { return GetToken(JavaParser.IDENTIFIER, 0); }
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ExplicitGenericInvocationSuffixContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_explicitGenericInvocationSuffix; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterExplicitGenericInvocationSuffix(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitExplicitGenericInvocationSuffix(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExplicitGenericInvocationSuffix(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExplicitGenericInvocationSuffixContext explicitGenericInvocationSuffix() {
		ExplicitGenericInvocationSuffixContext _localctx = new ExplicitGenericInvocationSuffixContext(Context, State);
		EnterRule(_localctx, 204, RULE_explicitGenericInvocationSuffix);
		try {
			State = 1373;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SUPER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 1369; Match(SUPER);
				State = 1370; superSuffix();
				}
				break;
			case IDENTIFIER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 1371; Match(IDENTIFIER);
				State = 1372; arguments();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IJavaParserListener typedListener = listener as IJavaParserListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IJavaParserVisitor<TResult> typedVisitor = visitor as IJavaParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 206, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 1375; Match(LPAREN);
			State = 1377;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << BYTE) | (1L << CHAR) | (1L << DOUBLE) | (1L << FLOAT) | (1L << INT) | (1L << LONG) | (1L << NEW) | (1L << SHORT) | (1L << SUPER) | (1L << THIS) | (1L << VOID) | (1L << DECIMAL_LITERAL) | (1L << HEX_LITERAL) | (1L << OCT_LITERAL) | (1L << BINARY_LITERAL) | (1L << FLOAT_LITERAL) | (1L << HEX_FLOAT_LITERAL) | (1L << BOOL_LITERAL) | (1L << CHAR_LITERAL) | (1L << STRING_LITERAL) | (1L << NULL_LITERAL) | (1L << LPAREN))) != 0) || ((((_la - 72)) & ~0x3f) == 0 && ((1L << (_la - 72)) & ((1L << (LT - 72)) | (1L << (BANG - 72)) | (1L << (TILDE - 72)) | (1L << (INC - 72)) | (1L << (DEC - 72)) | (1L << (ADD - 72)) | (1L << (SUB - 72)) | (1L << (AT - 72)) | (1L << (IDENTIFIER - 72)))) != 0)) {
				{
				State = 1376; expressionList();
				}
			}

			State = 1379; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 82: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 17);
		case 1: return Precpred(Context, 16);
		case 2: return Precpred(Context, 15);
		case 3: return Precpred(Context, 14);
		case 4: return Precpred(Context, 12);
		case 5: return Precpred(Context, 11);
		case 6: return Precpred(Context, 10);
		case 7: return Precpred(Context, 9);
		case 8: return Precpred(Context, 8);
		case 9: return Precpred(Context, 7);
		case 10: return Precpred(Context, 6);
		case 11: return Precpred(Context, 5);
		case 12: return Precpred(Context, 25);
		case 13: return Precpred(Context, 24);
		case 14: return Precpred(Context, 20);
		case 15: return Precpred(Context, 13);
		case 16: return Precpred(Context, 3);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', 'q', '\x568', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x4', '\x33', '\t', '\x33', '\x4', '\x34', '\t', '\x34', 
		'\x4', '\x35', '\t', '\x35', '\x4', '\x36', '\t', '\x36', '\x4', '\x37', 
		'\t', '\x37', '\x4', '\x38', '\t', '\x38', '\x4', '\x39', '\t', '\x39', 
		'\x4', ':', '\t', ':', '\x4', ';', '\t', ';', '\x4', '<', '\t', '<', '\x4', 
		'=', '\t', '=', '\x4', '>', '\t', '>', '\x4', '?', '\t', '?', '\x4', '@', 
		'\t', '@', '\x4', '\x41', '\t', '\x41', '\x4', '\x42', '\t', '\x42', '\x4', 
		'\x43', '\t', '\x43', '\x4', '\x44', '\t', '\x44', '\x4', '\x45', '\t', 
		'\x45', '\x4', '\x46', '\t', '\x46', '\x4', 'G', '\t', 'G', '\x4', 'H', 
		'\t', 'H', '\x4', 'I', '\t', 'I', '\x4', 'J', '\t', 'J', '\x4', 'K', '\t', 
		'K', '\x4', 'L', '\t', 'L', '\x4', 'M', '\t', 'M', '\x4', 'N', '\t', 'N', 
		'\x4', 'O', '\t', 'O', '\x4', 'P', '\t', 'P', '\x4', 'Q', '\t', 'Q', '\x4', 
		'R', '\t', 'R', '\x4', 'S', '\t', 'S', '\x4', 'T', '\t', 'T', '\x4', 'U', 
		'\t', 'U', '\x4', 'V', '\t', 'V', '\x4', 'W', '\t', 'W', '\x4', 'X', '\t', 
		'X', '\x4', 'Y', '\t', 'Y', '\x4', 'Z', '\t', 'Z', '\x4', '[', '\t', '[', 
		'\x4', '\\', '\t', '\\', '\x4', ']', '\t', ']', '\x4', '^', '\t', '^', 
		'\x4', '_', '\t', '_', '\x4', '`', '\t', '`', '\x4', '\x61', '\t', '\x61', 
		'\x4', '\x62', '\t', '\x62', '\x4', '\x63', '\t', '\x63', '\x4', '\x64', 
		'\t', '\x64', '\x4', '\x65', '\t', '\x65', '\x4', '\x66', '\t', '\x66', 
		'\x4', 'g', '\t', 'g', '\x4', 'h', '\t', 'h', '\x4', 'i', '\t', 'i', '\x3', 
		'\x2', '\x5', '\x2', '\xD4', '\n', '\x2', '\x3', '\x2', '\a', '\x2', '\xD7', 
		'\n', '\x2', '\f', '\x2', '\xE', '\x2', '\xDA', '\v', '\x2', '\x3', '\x2', 
		'\a', '\x2', '\xDD', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '\xE0', '\v', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\a', '\x3', '\xE5', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\xE8', '\v', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x5', '\x4', '\xF0', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', 
		'\x4', '\x5', '\x4', '\xF5', '\n', '\x4', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x5', '\a', '\x5', '\xFA', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 
		'\xFD', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', '\x103', '\n', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'\x106', '\n', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x5', '\x6', '\x10D', '\n', '\x6', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x5', '\a', '\x117', '\n', '\a', '\x3', '\b', '\x3', 
		'\b', '\x5', '\b', '\x11B', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '\x120', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x5', 
		'\t', '\x124', '\n', '\t', '\x3', '\t', '\x3', '\t', '\x5', '\t', '\x128', 
		'\n', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\a', '\n', '\x130', '\n', '\n', '\f', '\n', '\xE', 
		'\n', '\x133', '\v', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', '\a', 
		'\v', '\x138', '\n', '\v', '\f', '\v', '\xE', '\v', '\x13B', '\v', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x140', '\n', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\a', '\f', '\x145', '\n', '\f', 
		'\f', '\f', '\xE', '\f', '\x148', '\v', '\f', '\x3', '\r', '\x3', '\r', 
		'\x3', '\r', '\x3', '\r', '\x5', '\r', '\x14E', '\n', '\r', '\x3', '\r', 
		'\x3', '\r', '\x5', '\r', '\x152', '\n', '\r', '\x3', '\r', '\x5', '\r', 
		'\x155', '\n', '\r', '\x3', '\r', '\x5', '\r', '\x158', '\n', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\a', '\xE', 
		'\x15F', '\n', '\xE', '\f', '\xE', '\xE', '\xE', '\x162', '\v', '\xE', 
		'\x3', '\xF', '\a', '\xF', '\x165', '\n', '\xF', '\f', '\xF', '\xE', '\xF', 
		'\x168', '\v', '\xF', '\x3', '\xF', '\x3', '\xF', '\x5', '\xF', '\x16C', 
		'\n', '\xF', '\x3', '\xF', '\x5', '\xF', '\x16F', '\n', '\xF', '\x3', 
		'\x10', '\x3', '\x10', '\a', '\x10', '\x173', '\n', '\x10', '\f', '\x10', 
		'\xE', '\x10', '\x176', '\v', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x5', '\x11', '\x17B', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x5', '\x11', '\x17F', '\n', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x12', '\x3', '\x12', '\a', '\x12', '\x185', '\n', '\x12', '\f', '\x12', 
		'\xE', '\x12', '\x188', '\v', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', 
		'\x13', '\x3', '\x13', '\a', '\x13', '\x18E', '\n', '\x13', '\f', '\x13', 
		'\xE', '\x13', '\x191', '\v', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', 
		'\x14', '\x3', '\x14', '\x5', '\x14', '\x197', '\n', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\a', '\x14', '\x19B', '\n', '\x14', '\f', '\x14', '\xE', 
		'\x14', '\x19E', '\v', '\x14', '\x3', '\x14', '\x5', '\x14', '\x1A1', 
		'\n', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x5', '\x15', '\x1AC', '\n', '\x15', '\x3', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\x1B3', '\n', '\x16', 
		'\f', '\x16', '\xE', '\x16', '\x1B6', '\v', '\x16', '\x3', '\x16', '\x3', 
		'\x16', '\x5', '\x16', '\x1BA', '\n', '\x16', '\x3', '\x16', '\x3', '\x16', 
		'\x3', '\x17', '\x3', '\x17', '\x5', '\x17', '\x1C0', '\n', '\x17', '\x3', 
		'\x18', '\x3', '\x18', '\x5', '\x18', '\x1C4', '\n', '\x18', '\x3', '\x19', 
		'\x3', '\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', 
		'\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x5', '\x1B', 
		'\x1D0', '\n', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1D', '\a', '\x1D', '\x1D9', 
		'\n', '\x1D', '\f', '\x1D', '\xE', '\x1D', '\x1DC', '\v', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x5', '\x1D', '\x1E0', '\n', '\x1D', '\x3', '\x1E', 
		'\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', 
		'\x3', '\x1E', '\x5', '\x1E', '\x1E9', '\n', '\x1E', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\a', '\x1F', '\x1EF', '\n', '\x1F', 
		'\f', '\x1F', '\xE', '\x1F', '\x1F2', '\v', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\a', ' ', '\x1F9', '\n', 
		' ', '\f', ' ', '\xE', ' ', '\x1FC', '\v', ' ', '\x3', ' ', '\x3', ' ', 
		'\x3', ' ', '\x3', '!', '\a', '!', '\x202', '\n', '!', '\f', '!', '\xE', 
		'!', '\x205', '\v', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\a', '!', 
		'\x20A', '\n', '!', '\f', '!', '\xE', '!', '\x20D', '\v', '!', '\x3', 
		'!', '\x3', '!', '\x5', '!', '\x211', '\n', '!', '\x3', '!', '\x3', '!', 
		'\x3', '!', '\x3', '!', '\a', '!', '\x217', '\n', '!', '\f', '!', '\xE', 
		'!', '\x21A', '\v', '!', '\x3', '!', '\x3', '!', '\x5', '!', '\x21E', 
		'\n', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', '\"', 
		'\x3', '\"', '\x3', '\"', '\x3', '\"', '\x5', '\"', '\x228', '\n', '\"', 
		'\x3', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', '$', 
		'\a', '$', '\x230', '\n', '$', '\f', '$', '\xE', '$', '\x233', '\v', '$', 
		'\x3', '%', '\x3', '%', '\x3', '%', '\x5', '%', '\x238', '\n', '%', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\a', '&', '\x23D', '\n', '&', '\f', '&', 
		'\xE', '&', '\x240', '\v', '&', '\x3', '\'', '\x3', '\'', '\x5', '\'', 
		'\x244', '\n', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', '\a', 
		'(', '\x24A', '\n', '(', '\f', '(', '\xE', '(', '\x24D', '\v', '(', '\x3', 
		'(', '\x5', '(', '\x250', '\n', '(', '\x5', '(', '\x252', '\n', '(', '\x3', 
		'(', '\x3', '(', '\x3', ')', '\x3', ')', '\x5', ')', '\x258', '\n', ')', 
		'\x3', ')', '\x3', ')', '\x3', ')', '\x5', ')', '\x25D', '\n', ')', '\a', 
		')', '\x25F', '\n', ')', '\f', ')', '\xE', ')', '\x262', '\v', ')', '\x3', 
		'*', '\x3', '*', '\x3', '*', '\x3', '*', '\x5', '*', '\x268', '\n', '*', 
		'\x5', '*', '\x26A', '\n', '*', '\x3', '+', '\x3', '+', '\x3', '+', '\a', 
		'+', '\x26F', '\n', '+', '\f', '+', '\xE', '+', '\x272', '\v', '+', '\x3', 
		',', '\x3', ',', '\x5', ',', '\x276', '\n', ',', '\x3', ',', '\x3', ',', 
		'\x3', '-', '\x3', '-', '\x3', '-', '\a', '-', '\x27D', '\n', '-', '\f', 
		'-', '\xE', '-', '\x280', '\v', '-', '\x3', '-', '\x3', '-', '\x5', '-', 
		'\x284', '\n', '-', '\x3', '-', '\x5', '-', '\x287', '\n', '-', '\x3', 
		'.', '\a', '.', '\x28A', '\n', '.', '\f', '.', '\xE', '.', '\x28D', '\v', 
		'.', '\x3', '.', '\x3', '.', '\x3', '.', '\x3', '/', '\a', '/', '\x293', 
		'\n', '/', '\f', '/', '\xE', '/', '\x296', '\v', '/', '\x3', '/', '\x3', 
		'/', '\x3', '/', '\x3', '/', '\x3', '\x30', '\x3', '\x30', '\x3', '\x30', 
		'\a', '\x30', '\x29F', '\n', '\x30', '\f', '\x30', '\xE', '\x30', '\x2A2', 
		'\v', '\x30', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\x5', '\x31', '\x2AA', '\n', '\x31', '\x3', 
		'\x32', '\x3', '\x32', '\x3', '\x33', '\x3', '\x33', '\x3', '\x34', '\x3', 
		'\x34', '\x3', '\x34', '\x3', '\x34', '\x3', '\x34', '\x5', '\x34', '\x2B5', 
		'\n', '\x34', '\x3', '\x34', '\x5', '\x34', '\x2B8', '\n', '\x34', '\x3', 
		'\x35', '\x3', '\x35', '\x3', '\x35', '\a', '\x35', '\x2BD', '\n', '\x35', 
		'\f', '\x35', '\xE', '\x35', '\x2C0', '\v', '\x35', '\x3', '\x36', '\x3', 
		'\x36', '\x3', '\x36', '\x3', '\x36', '\x3', '\x37', '\x3', '\x37', '\x3', 
		'\x37', '\x5', '\x37', '\x2C9', '\n', '\x37', '\x3', '\x38', '\x3', '\x38', 
		'\x3', '\x38', '\x3', '\x38', '\a', '\x38', '\x2CF', '\n', '\x38', '\f', 
		'\x38', '\xE', '\x38', '\x2D2', '\v', '\x38', '\x5', '\x38', '\x2D4', 
		'\n', '\x38', '\x3', '\x38', '\x5', '\x38', '\x2D7', '\n', '\x38', '\x3', 
		'\x38', '\x3', '\x38', '\x3', '\x39', '\x3', '\x39', '\x3', '\x39', '\x3', 
		'\x39', '\x3', '\x39', '\x3', ':', '\x3', ':', '\a', ':', '\x2E2', '\n', 
		':', '\f', ':', '\xE', ':', '\x2E5', '\v', ':', '\x3', ':', '\x3', ':', 
		'\x3', ';', '\a', ';', '\x2EA', '\n', ';', '\f', ';', '\xE', ';', '\x2ED', 
		'\v', ';', '\x3', ';', '\x3', ';', '\x5', ';', '\x2F1', '\n', ';', '\x3', 
		'<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x3', '<', '\x5', 
		'<', '\x2F9', '\n', '<', '\x3', '<', '\x3', '<', '\x5', '<', '\x2FD', 
		'\n', '<', '\x3', '<', '\x3', '<', '\x5', '<', '\x301', '\n', '<', '\x3', 
		'<', '\x3', '<', '\x5', '<', '\x305', '\n', '<', '\x5', '<', '\x307', 
		'\n', '<', '\x3', '=', '\x3', '=', '\x5', '=', '\x30B', '\n', '=', '\x3', 
		'>', '\x3', '>', '\x3', '>', '\x3', '>', '\x5', '>', '\x311', '\n', '>', 
		'\x3', '?', '\x3', '?', '\x3', '@', '\x3', '@', '\x3', '@', '\x3', '\x41', 
		'\x3', '\x41', '\a', '\x41', '\x31A', '\n', '\x41', '\f', '\x41', '\xE', 
		'\x41', '\x31D', '\v', '\x41', '\x3', '\x41', '\x3', '\x41', '\x3', '\x42', 
		'\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x3', '\x42', '\x5', '\x42', 
		'\x326', '\n', '\x42', '\x3', '\x43', '\a', '\x43', '\x329', '\n', '\x43', 
		'\f', '\x43', '\xE', '\x43', '\x32C', '\v', '\x43', '\x3', '\x43', '\x3', 
		'\x43', '\x3', '\x43', '\x3', '\x44', '\a', '\x44', '\x332', '\n', '\x44', 
		'\f', '\x44', '\xE', '\x44', '\x335', '\v', '\x44', '\x3', '\x44', '\x3', 
		'\x44', '\x5', '\x44', '\x339', '\n', '\x44', '\x3', '\x44', '\x5', '\x44', 
		'\x33C', '\n', '\x44', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x5', '\x45', '\x343', '\n', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x5', '\x45', '\x34C', '\n', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x6', '\x45', '\x361', '\n', '\x45', 
		'\r', '\x45', '\xE', '\x45', '\x362', '\x3', '\x45', '\x5', '\x45', '\x366', 
		'\n', '\x45', '\x3', '\x45', '\x5', '\x45', '\x369', '\n', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\a', '\x45', '\x36F', 
		'\n', '\x45', '\f', '\x45', '\xE', '\x45', '\x372', '\v', '\x45', '\x3', 
		'\x45', '\x5', '\x45', '\x375', '\n', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\a', '\x45', '\x37B', '\n', '\x45', '\f', 
		'\x45', '\xE', '\x45', '\x37E', '\v', '\x45', '\x3', '\x45', '\a', '\x45', 
		'\x381', '\n', '\x45', '\f', '\x45', '\xE', '\x45', '\x384', '\v', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x38E', '\n', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x397', '\n', '\x45', 
		'\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x39C', '\n', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x3', 
		'\x45', '\x3', '\x45', '\x3', '\x45', '\x3', '\x45', '\x5', '\x45', '\x3A6', 
		'\n', '\x45', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\a', '\x46', 
		'\x3AB', '\n', '\x46', '\f', '\x46', '\xE', '\x46', '\x3AE', '\v', '\x46', 
		'\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', '\x3', '\x46', 
		'\x3', 'G', '\x3', 'G', '\x3', 'G', '\a', 'G', '\x3B8', '\n', 'G', '\f', 
		'G', '\xE', 'G', '\x3BB', '\v', 'G', '\x3', 'H', '\x3', 'H', '\x3', 'H', 
		'\x3', 'I', '\x3', 'I', '\x3', 'I', '\x5', 'I', '\x3C3', '\n', 'I', '\x3', 
		'I', '\x3', 'I', '\x3', 'J', '\x3', 'J', '\x3', 'J', '\a', 'J', '\x3CA', 
		'\n', 'J', '\f', 'J', '\xE', 'J', '\x3CD', '\v', 'J', '\x3', 'K', '\a', 
		'K', '\x3D0', '\n', 'K', '\f', 'K', '\xE', 'K', '\x3D3', '\v', 'K', '\x3', 
		'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'K', '\x3', 'L', '\x6', 
		'L', '\x3DB', '\n', 'L', '\r', 'L', '\xE', 'L', '\x3DC', '\x3', 'L', '\x6', 
		'L', '\x3E0', '\n', 'L', '\r', 'L', '\xE', 'L', '\x3E1', '\x3', 'M', '\x3', 
		'M', '\x3', 'M', '\x5', 'M', '\x3E7', '\n', 'M', '\x3', 'M', '\x3', 'M', 
		'\x3', 'M', '\x5', 'M', '\x3EC', '\n', 'M', '\x3', 'N', '\x3', 'N', '\x5', 
		'N', '\x3F0', '\n', 'N', '\x3', 'N', '\x3', 'N', '\x5', 'N', '\x3F4', 
		'\n', 'N', '\x3', 'N', '\x3', 'N', '\x5', 'N', '\x3F8', '\n', 'N', '\x5', 
		'N', '\x3FA', '\n', 'N', '\x3', 'O', '\x3', 'O', '\x5', 'O', '\x3FE', 
		'\n', 'O', '\x3', 'P', '\a', 'P', '\x401', '\n', 'P', '\f', 'P', '\xE', 
		'P', '\x404', '\v', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'P', '\x3', 'P', 
		'\x3', 'P', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'Q', '\x3', 'R', 
		'\x3', 'R', '\x3', 'R', '\a', 'R', '\x412', '\n', 'R', '\f', 'R', '\xE', 
		'R', '\x415', '\v', 'R', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x5', 'S', 
		'\x41A', '\n', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x5', 
		'S', '\x420', '\n', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', '\x3', 'S', 
		'\x5', 'S', '\x426', '\n', 'S', '\x3', 'S', '\x5', 'S', '\x429', '\n', 
		'S', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 
		'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 
		'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 
		'T', '\x5', 'T', '\x43D', '\n', 'T', '\x3', 'T', '\x3', 'T', '\x5', 'T', 
		'\x441', '\n', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x5', 'T', '\x446', 
		'\n', 'T', '\x3', 'T', '\x3', 'T', '\x5', 'T', '\x44A', '\n', 'T', '\x3', 
		'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 
		'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 
		'T', '\x3', 'T', '\x5', 'T', '\x45A', '\n', 'T', '\x3', 'T', '\x3', 'T', 
		'\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', 
		'\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', 
		'\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', 
		'\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', 
		'\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', 
		'\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', 
		'\x5', 'T', '\x482', '\n', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 
		'T', '\x5', 'T', '\x488', '\n', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', 
		'\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', 
		'\x3', 'T', '\x3', 'T', '\x3', 'T', '\x3', 'T', '\x5', 'T', '\x497', '\n', 
		'T', '\x3', 'T', '\a', 'T', '\x49A', '\n', 'T', '\f', 'T', '\xE', 'T', 
		'\x49D', '\v', 'T', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 'U', '\x3', 
		'V', '\x3', 'V', '\x3', 'V', '\x5', 'V', '\x4A6', '\n', 'V', '\x3', 'V', 
		'\x3', 'V', '\x3', 'V', '\x3', 'V', '\x3', 'V', '\a', 'V', '\x4AD', '\n', 
		'V', '\f', 'V', '\xE', 'V', '\x4B0', '\v', 'V', '\x3', 'V', '\x5', 'V', 
		'\x4B3', '\n', 'V', '\x3', 'W', '\x3', 'W', '\x5', 'W', '\x4B7', '\n', 
		'W', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 
		'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x3', 'X', '\x5', 'X', '\x4C9', 
		'\n', 'X', '\x5', 'X', '\x4CB', '\n', 'X', '\x3', 'Y', '\x3', 'Y', '\x3', 
		'Y', '\x5', 'Y', '\x4D0', '\n', 'Y', '\x3', 'Y', '\a', 'Y', '\x4D3', '\n', 
		'Y', '\f', 'Y', '\xE', 'Y', '\x4D6', '\v', 'Y', '\x3', 'Y', '\x3', 'Y', 
		'\x5', 'Y', '\x4DA', '\n', 'Y', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 
		'Z', '\x3', 'Z', '\x3', 'Z', '\x3', 'Z', '\x5', 'Z', '\x4E3', '\n', 'Z', 
		'\x5', 'Z', '\x4E5', '\n', 'Z', '\x3', '[', '\x3', '[', '\x5', '[', '\x4E9', 
		'\n', '[', '\x3', '[', '\x3', '[', '\x3', '[', '\x5', '[', '\x4EE', '\n', 
		'[', '\a', '[', '\x4F0', '\n', '[', '\f', '[', '\xE', '[', '\x4F3', '\v', 
		'[', '\x3', '[', '\x5', '[', '\x4F6', '\n', '[', '\x3', '\\', '\x3', '\\', 
		'\x5', '\\', '\x4FA', '\n', '\\', '\x3', '\\', '\x3', '\\', '\x3', ']', 
		'\x3', ']', '\x3', ']', '\x3', ']', '\a', ']', '\x502', '\n', ']', '\f', 
		']', '\xE', ']', '\x505', '\v', ']', '\x3', ']', '\x3', ']', '\x3', ']', 
		'\x3', ']', '\x3', ']', '\x3', ']', '\x3', ']', '\a', ']', '\x50E', '\n', 
		']', '\f', ']', '\xE', ']', '\x511', '\v', ']', '\x3', ']', '\x3', ']', 
		'\a', ']', '\x515', '\n', ']', '\f', ']', '\xE', ']', '\x518', '\v', ']', 
		'\x5', ']', '\x51A', '\n', ']', '\x3', '^', '\x3', '^', '\x5', '^', '\x51E', 
		'\n', '^', '\x3', '_', '\x3', '_', '\x3', '_', '\x3', '`', '\x3', '`', 
		'\x3', '`', '\x5', '`', '\x526', '\n', '`', '\x3', '\x61', '\x3', '\x61', 
		'\x3', '\x61', '\x5', '\x61', '\x52B', '\n', '\x61', '\x3', '\x62', '\x3', 
		'\x62', '\x3', '\x62', '\x3', '\x62', '\x3', '\x63', '\x3', '\x63', '\x3', 
		'\x63', '\a', '\x63', '\x534', '\n', '\x63', '\f', '\x63', '\xE', '\x63', 
		'\x537', '\v', '\x63', '\x3', '\x64', '\x5', '\x64', '\x53A', '\n', '\x64', 
		'\x3', '\x64', '\x3', '\x64', '\x5', '\x64', '\x53E', '\n', '\x64', '\x3', 
		'\x64', '\x3', '\x64', '\a', '\x64', '\x542', '\n', '\x64', '\f', '\x64', 
		'\xE', '\x64', '\x545', '\v', '\x64', '\x3', '\x65', '\x3', '\x65', '\x3', 
		'\x66', '\x3', '\x66', '\x3', '\x66', '\x3', '\x66', '\a', '\x66', '\x54D', 
		'\n', '\x66', '\f', '\x66', '\xE', '\x66', '\x550', '\v', '\x66', '\x3', 
		'\x66', '\x3', '\x66', '\x3', 'g', '\x3', 'g', '\x3', 'g', '\x3', 'g', 
		'\x5', 'g', '\x558', '\n', 'g', '\x5', 'g', '\x55A', '\n', 'g', '\x3', 
		'h', '\x3', 'h', '\x3', 'h', '\x3', 'h', '\x5', 'h', '\x560', '\n', 'h', 
		'\x3', 'i', '\x3', 'i', '\x5', 'i', '\x564', '\n', 'i', '\x3', 'i', '\x3', 
		'i', '\x3', 'i', '\x2', '\x3', '\xA6', 'j', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', 
		'\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 
		'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x64', 
		'\x66', 'h', 'j', 'l', 'n', 'p', 'r', 't', 'v', 'x', 'z', '|', '~', '\x80', 
		'\x82', '\x84', '\x86', '\x88', '\x8A', '\x8C', '\x8E', '\x90', '\x92', 
		'\x94', '\x96', '\x98', '\x9A', '\x9C', '\x9E', '\xA0', '\xA2', '\xA4', 
		'\xA6', '\xA8', '\xAA', '\xAC', '\xAE', '\xB0', '\xB2', '\xB4', '\xB6', 
		'\xB8', '\xBA', '\xBC', '\xBE', '\xC0', '\xC2', '\xC4', '\xC6', '\xC8', 
		'\xCA', '\xCC', '\xCE', '\xD0', '\x2', '\xE', '\x4', '\x2', '\x13', '\x13', 
		'*', '*', '\x3', '\x2', '\x35', '\x38', '\x3', '\x2', '\x39', ':', '\x3', 
		'\x2', 'U', 'X', '\x3', '\x2', 'K', 'L', '\x4', '\x2', 'Y', 'Z', '^', 
		'^', '\x3', '\x2', 'W', 'X', '\x4', '\x2', 'I', 'J', 'P', 'Q', '\x4', 
		'\x2', 'O', 'O', 'R', 'R', '\x4', '\x2', 'H', 'H', '_', 'i', '\x3', '\x2', 
		'U', 'V', '\n', '\x2', '\x5', '\x5', '\a', '\a', '\n', '\n', '\x10', '\x10', 
		'\x16', '\x16', '\x1D', '\x1D', '\x1F', '\x1F', '\'', '\'', '\x2', '\x601', 
		'\x2', '\xD3', '\x3', '\x2', '\x2', '\x2', '\x4', '\xE6', '\x3', '\x2', 
		'\x2', '\x2', '\x6', '\xED', '\x3', '\x2', '\x2', '\x2', '\b', '\x105', 
		'\x3', '\x2', '\x2', '\x2', '\n', '\x10C', '\x3', '\x2', '\x2', '\x2', 
		'\f', '\x116', '\x3', '\x2', '\x2', '\x2', '\xE', '\x11A', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x11C', '\x3', '\x2', '\x2', '\x2', '\x12', '\x12B', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x139', '\x3', '\x2', '\x2', '\x2', 
		'\x16', '\x141', '\x3', '\x2', '\x2', '\x2', '\x18', '\x149', '\x3', '\x2', 
		'\x2', '\x2', '\x1A', '\x15B', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x166', 
		'\x3', '\x2', '\x2', '\x2', '\x1E', '\x170', '\x3', '\x2', '\x2', '\x2', 
		' ', '\x177', '\x3', '\x2', '\x2', '\x2', '\"', '\x182', '\x3', '\x2', 
		'\x2', '\x2', '$', '\x18B', '\x3', '\x2', '\x2', '\x2', '&', '\x1A0', 
		'\x3', '\x2', '\x2', '\x2', '(', '\x1AB', '\x3', '\x2', '\x2', '\x2', 
		'*', '\x1AD', '\x3', '\x2', '\x2', '\x2', ',', '\x1BF', '\x3', '\x2', 
		'\x2', '\x2', '.', '\x1C3', '\x3', '\x2', '\x2', '\x2', '\x30', '\x1C5', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\x1C8', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\x1CB', '\x3', '\x2', '\x2', '\x2', '\x36', '\x1D3', '\x3', '\x2', 
		'\x2', '\x2', '\x38', '\x1DF', '\x3', '\x2', '\x2', '\x2', ':', '\x1E8', 
		'\x3', '\x2', '\x2', '\x2', '<', '\x1EA', '\x3', '\x2', '\x2', '\x2', 
		'>', '\x1F5', '\x3', '\x2', '\x2', '\x2', '@', '\x203', '\x3', '\x2', 
		'\x2', '\x2', '\x42', '\x227', '\x3', '\x2', '\x2', '\x2', '\x44', '\x229', 
		'\x3', '\x2', '\x2', '\x2', '\x46', '\x22C', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x234', '\x3', '\x2', '\x2', '\x2', 'J', '\x239', '\x3', '\x2', 
		'\x2', '\x2', 'L', '\x243', '\x3', '\x2', '\x2', '\x2', 'N', '\x245', 
		'\x3', '\x2', '\x2', '\x2', 'P', '\x255', '\x3', '\x2', '\x2', '\x2', 
		'R', '\x269', '\x3', '\x2', '\x2', '\x2', 'T', '\x26B', '\x3', '\x2', 
		'\x2', '\x2', 'V', '\x273', '\x3', '\x2', '\x2', '\x2', 'X', '\x286', 
		'\x3', '\x2', '\x2', '\x2', 'Z', '\x28B', '\x3', '\x2', '\x2', '\x2', 
		'\\', '\x294', '\x3', '\x2', '\x2', '\x2', '^', '\x29B', '\x3', '\x2', 
		'\x2', '\x2', '`', '\x2A9', '\x3', '\x2', '\x2', '\x2', '\x62', '\x2AB', 
		'\x3', '\x2', '\x2', '\x2', '\x64', '\x2AD', '\x3', '\x2', '\x2', '\x2', 
		'\x66', '\x2AF', '\x3', '\x2', '\x2', '\x2', 'h', '\x2B9', '\x3', '\x2', 
		'\x2', '\x2', 'j', '\x2C1', '\x3', '\x2', '\x2', '\x2', 'l', '\x2C8', 
		'\x3', '\x2', '\x2', '\x2', 'n', '\x2CA', '\x3', '\x2', '\x2', '\x2', 
		'p', '\x2DA', '\x3', '\x2', '\x2', '\x2', 'r', '\x2DF', '\x3', '\x2', 
		'\x2', '\x2', 't', '\x2F0', '\x3', '\x2', '\x2', '\x2', 'v', '\x306', 
		'\x3', '\x2', '\x2', '\x2', 'x', '\x30A', '\x3', '\x2', '\x2', '\x2', 
		'z', '\x30C', '\x3', '\x2', '\x2', '\x2', '|', '\x312', '\x3', '\x2', 
		'\x2', '\x2', '~', '\x314', '\x3', '\x2', '\x2', '\x2', '\x80', '\x317', 
		'\x3', '\x2', '\x2', '\x2', '\x82', '\x325', '\x3', '\x2', '\x2', '\x2', 
		'\x84', '\x32A', '\x3', '\x2', '\x2', '\x2', '\x86', '\x33B', '\x3', '\x2', 
		'\x2', '\x2', '\x88', '\x3A5', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x3A7', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x3B4', '\x3', '\x2', '\x2', '\x2', 
		'\x8E', '\x3BC', '\x3', '\x2', '\x2', '\x2', '\x90', '\x3BF', '\x3', '\x2', 
		'\x2', '\x2', '\x92', '\x3C6', '\x3', '\x2', '\x2', '\x2', '\x94', '\x3D1', 
		'\x3', '\x2', '\x2', '\x2', '\x96', '\x3DA', '\x3', '\x2', '\x2', '\x2', 
		'\x98', '\x3EB', '\x3', '\x2', '\x2', '\x2', '\x9A', '\x3F9', '\x3', '\x2', 
		'\x2', '\x2', '\x9C', '\x3FD', '\x3', '\x2', '\x2', '\x2', '\x9E', '\x402', 
		'\x3', '\x2', '\x2', '\x2', '\xA0', '\x40A', '\x3', '\x2', '\x2', '\x2', 
		'\xA2', '\x40E', '\x3', '\x2', '\x2', '\x2', '\xA4', '\x428', '\x3', '\x2', 
		'\x2', '\x2', '\xA6', '\x449', '\x3', '\x2', '\x2', '\x2', '\xA8', '\x49E', 
		'\x3', '\x2', '\x2', '\x2', '\xAA', '\x4B2', '\x3', '\x2', '\x2', '\x2', 
		'\xAC', '\x4B6', '\x3', '\x2', '\x2', '\x2', '\xAE', '\x4CA', '\x3', '\x2', 
		'\x2', '\x2', '\xB0', '\x4CF', '\x3', '\x2', '\x2', '\x2', '\xB2', '\x4E4', 
		'\x3', '\x2', '\x2', '\x2', '\xB4', '\x4F5', '\x3', '\x2', '\x2', '\x2', 
		'\xB6', '\x4F7', '\x3', '\x2', '\x2', '\x2', '\xB8', '\x4FD', '\x3', '\x2', 
		'\x2', '\x2', '\xBA', '\x51B', '\x3', '\x2', '\x2', '\x2', '\xBC', '\x51F', 
		'\x3', '\x2', '\x2', '\x2', '\xBE', '\x525', '\x3', '\x2', '\x2', '\x2', 
		'\xC0', '\x52A', '\x3', '\x2', '\x2', '\x2', '\xC2', '\x52C', '\x3', '\x2', 
		'\x2', '\x2', '\xC4', '\x530', '\x3', '\x2', '\x2', '\x2', '\xC6', '\x539', 
		'\x3', '\x2', '\x2', '\x2', '\xC8', '\x546', '\x3', '\x2', '\x2', '\x2', 
		'\xCA', '\x548', '\x3', '\x2', '\x2', '\x2', '\xCC', '\x559', '\x3', '\x2', 
		'\x2', '\x2', '\xCE', '\x55F', '\x3', '\x2', '\x2', '\x2', '\xD0', '\x561', 
		'\x3', '\x2', '\x2', '\x2', '\xD2', '\xD4', '\x5', '\x4', '\x3', '\x2', 
		'\xD3', '\xD2', '\x3', '\x2', '\x2', '\x2', '\xD3', '\xD4', '\x3', '\x2', 
		'\x2', '\x2', '\xD4', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xD5', '\xD7', 
		'\x5', '\x6', '\x4', '\x2', '\xD6', '\xD5', '\x3', '\x2', '\x2', '\x2', 
		'\xD7', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xD6', '\x3', '\x2', 
		'\x2', '\x2', '\xD8', '\xD9', '\x3', '\x2', '\x2', '\x2', '\xD9', '\xDE', 
		'\x3', '\x2', '\x2', '\x2', '\xDA', '\xD8', '\x3', '\x2', '\x2', '\x2', 
		'\xDB', '\xDD', '\x5', '\b', '\x5', '\x2', '\xDC', '\xDB', '\x3', '\x2', 
		'\x2', '\x2', '\xDD', '\xE0', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xDC', 
		'\x3', '\x2', '\x2', '\x2', '\xDE', '\xDF', '\x3', '\x2', '\x2', '\x2', 
		'\xDF', '\xE1', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xDE', '\x3', '\x2', 
		'\x2', '\x2', '\xE1', '\xE2', '\a', '\x2', '\x2', '\x3', '\xE2', '\x3', 
		'\x3', '\x2', '\x2', '\x2', '\xE3', '\xE5', '\x5', '\x66', '\x34', '\x2', 
		'\xE4', '\xE3', '\x3', '\x2', '\x2', '\x2', '\xE5', '\xE8', '\x3', '\x2', 
		'\x2', '\x2', '\xE6', '\xE4', '\x3', '\x2', '\x2', '\x2', '\xE6', '\xE7', 
		'\x3', '\x2', '\x2', '\x2', '\xE7', '\xE9', '\x3', '\x2', '\x2', '\x2', 
		'\xE8', '\xE6', '\x3', '\x2', '\x2', '\x2', '\xE9', '\xEA', '\a', '\"', 
		'\x2', '\x2', '\xEA', '\xEB', '\x5', '^', '\x30', '\x2', '\xEB', '\xEC', 
		'\a', '\x45', '\x2', '\x2', '\xEC', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'\xED', '\xEF', '\a', '\x1B', '\x2', '\x2', '\xEE', '\xF0', '\a', '(', 
		'\x2', '\x2', '\xEF', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xEF', '\xF0', 
		'\x3', '\x2', '\x2', '\x2', '\xF0', '\xF1', '\x3', '\x2', '\x2', '\x2', 
		'\xF1', '\xF4', '\x5', '^', '\x30', '\x2', '\xF2', '\xF3', '\a', 'G', 
		'\x2', '\x2', '\xF3', '\xF5', '\a', 'Y', '\x2', '\x2', '\xF4', '\xF2', 
		'\x3', '\x2', '\x2', '\x2', '\xF4', '\xF5', '\x3', '\x2', '\x2', '\x2', 
		'\xF5', '\xF6', '\x3', '\x2', '\x2', '\x2', '\xF6', '\xF7', '\a', '\x45', 
		'\x2', '\x2', '\xF7', '\a', '\x3', '\x2', '\x2', '\x2', '\xF8', '\xFA', 
		'\x5', '\f', '\a', '\x2', '\xF9', '\xF8', '\x3', '\x2', '\x2', '\x2', 
		'\xFA', '\xFD', '\x3', '\x2', '\x2', '\x2', '\xFB', '\xF9', '\x3', '\x2', 
		'\x2', '\x2', '\xFB', '\xFC', '\x3', '\x2', '\x2', '\x2', '\xFC', '\x102', 
		'\x3', '\x2', '\x2', '\x2', '\xFD', '\xFB', '\x3', '\x2', '\x2', '\x2', 
		'\xFE', '\x103', '\x5', '\x10', '\t', '\x2', '\xFF', '\x103', '\x5', '\x18', 
		'\r', '\x2', '\x100', '\x103', '\x5', ' ', '\x11', '\x2', '\x101', '\x103', 
		'\x5', 'p', '\x39', '\x2', '\x102', '\xFE', '\x3', '\x2', '\x2', '\x2', 
		'\x102', '\xFF', '\x3', '\x2', '\x2', '\x2', '\x102', '\x100', '\x3', 
		'\x2', '\x2', '\x2', '\x102', '\x101', '\x3', '\x2', '\x2', '\x2', '\x103', 
		'\x106', '\x3', '\x2', '\x2', '\x2', '\x104', '\x106', '\a', '\x45', '\x2', 
		'\x2', '\x105', '\xFB', '\x3', '\x2', '\x2', '\x2', '\x105', '\x104', 
		'\x3', '\x2', '\x2', '\x2', '\x106', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x107', '\x10D', '\x5', '\f', '\a', '\x2', '\x108', '\x10D', '\a', ' ', 
		'\x2', '\x2', '\x109', '\x10D', '\a', ',', '\x2', '\x2', '\x10A', '\x10D', 
		'\a', '\x30', '\x2', '\x2', '\x10B', '\x10D', '\a', '\x33', '\x2', '\x2', 
		'\x10C', '\x107', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x108', '\x3', 
		'\x2', '\x2', '\x2', '\x10C', '\x109', '\x3', '\x2', '\x2', '\x2', '\x10C', 
		'\x10A', '\x3', '\x2', '\x2', '\x2', '\x10C', '\x10B', '\x3', '\x2', '\x2', 
		'\x2', '\x10D', '\v', '\x3', '\x2', '\x2', '\x2', '\x10E', '\x117', '\x5', 
		'\x66', '\x34', '\x2', '\x10F', '\x117', '\a', '%', '\x2', '\x2', '\x110', 
		'\x117', '\a', '$', '\x2', '\x2', '\x111', '\x117', '\a', '#', '\x2', 
		'\x2', '\x112', '\x117', '\a', '(', '\x2', '\x2', '\x113', '\x117', '\a', 
		'\x3', '\x2', '\x2', '\x114', '\x117', '\a', '\x14', '\x2', '\x2', '\x115', 
		'\x117', '\a', ')', '\x2', '\x2', '\x116', '\x10E', '\x3', '\x2', '\x2', 
		'\x2', '\x116', '\x10F', '\x3', '\x2', '\x2', '\x2', '\x116', '\x110', 
		'\x3', '\x2', '\x2', '\x2', '\x116', '\x111', '\x3', '\x2', '\x2', '\x2', 
		'\x116', '\x112', '\x3', '\x2', '\x2', '\x2', '\x116', '\x113', '\x3', 
		'\x2', '\x2', '\x2', '\x116', '\x114', '\x3', '\x2', '\x2', '\x2', '\x116', 
		'\x115', '\x3', '\x2', '\x2', '\x2', '\x117', '\r', '\x3', '\x2', '\x2', 
		'\x2', '\x118', '\x11B', '\a', '\x14', '\x2', '\x2', '\x119', '\x11B', 
		'\x5', '\x66', '\x34', '\x2', '\x11A', '\x118', '\x3', '\x2', '\x2', '\x2', 
		'\x11A', '\x119', '\x3', '\x2', '\x2', '\x2', '\x11B', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x11C', '\x11D', '\a', '\v', '\x2', '\x2', '\x11D', '\x11F', 
		'\a', 'q', '\x2', '\x2', '\x11E', '\x120', '\x5', '\x12', '\n', '\x2', 
		'\x11F', '\x11E', '\x3', '\x2', '\x2', '\x2', '\x11F', '\x120', '\x3', 
		'\x2', '\x2', '\x2', '\x120', '\x123', '\x3', '\x2', '\x2', '\x2', '\x121', 
		'\x122', '\a', '\x13', '\x2', '\x2', '\x122', '\x124', '\x5', '\xC6', 
		'\x64', '\x2', '\x123', '\x121', '\x3', '\x2', '\x2', '\x2', '\x123', 
		'\x124', '\x3', '\x2', '\x2', '\x2', '\x124', '\x127', '\x3', '\x2', '\x2', 
		'\x2', '\x125', '\x126', '\a', '\x1A', '\x2', '\x2', '\x126', '\x128', 
		'\x5', '\xC4', '\x63', '\x2', '\x127', '\x125', '\x3', '\x2', '\x2', '\x2', 
		'\x127', '\x128', '\x3', '\x2', '\x2', '\x2', '\x128', '\x129', '\x3', 
		'\x2', '\x2', '\x2', '\x129', '\x12A', '\x5', '\"', '\x12', '\x2', '\x12A', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x12B', '\x12C', '\a', 'J', '\x2', 
		'\x2', '\x12C', '\x131', '\x5', '\x14', '\v', '\x2', '\x12D', '\x12E', 
		'\a', '\x46', '\x2', '\x2', '\x12E', '\x130', '\x5', '\x14', '\v', '\x2', 
		'\x12F', '\x12D', '\x3', '\x2', '\x2', '\x2', '\x130', '\x133', '\x3', 
		'\x2', '\x2', '\x2', '\x131', '\x12F', '\x3', '\x2', '\x2', '\x2', '\x131', 
		'\x132', '\x3', '\x2', '\x2', '\x2', '\x132', '\x134', '\x3', '\x2', '\x2', 
		'\x2', '\x133', '\x131', '\x3', '\x2', '\x2', '\x2', '\x134', '\x135', 
		'\a', 'I', '\x2', '\x2', '\x135', '\x13', '\x3', '\x2', '\x2', '\x2', 
		'\x136', '\x138', '\x5', '\x66', '\x34', '\x2', '\x137', '\x136', '\x3', 
		'\x2', '\x2', '\x2', '\x138', '\x13B', '\x3', '\x2', '\x2', '\x2', '\x139', 
		'\x137', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', '\x3', '\x2', '\x2', 
		'\x2', '\x13A', '\x13C', '\x3', '\x2', '\x2', '\x2', '\x13B', '\x139', 
		'\x3', '\x2', '\x2', '\x2', '\x13C', '\x13F', '\a', 'q', '\x2', '\x2', 
		'\x13D', '\x13E', '\a', '\x13', '\x2', '\x2', '\x13E', '\x140', '\x5', 
		'\x16', '\f', '\x2', '\x13F', '\x13D', '\x3', '\x2', '\x2', '\x2', '\x13F', 
		'\x140', '\x3', '\x2', '\x2', '\x2', '\x140', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x141', '\x146', '\x5', '\xC6', '\x64', '\x2', '\x142', '\x143', 
		'\a', '[', '\x2', '\x2', '\x143', '\x145', '\x5', '\xC6', '\x64', '\x2', 
		'\x144', '\x142', '\x3', '\x2', '\x2', '\x2', '\x145', '\x148', '\x3', 
		'\x2', '\x2', '\x2', '\x146', '\x144', '\x3', '\x2', '\x2', '\x2', '\x146', 
		'\x147', '\x3', '\x2', '\x2', '\x2', '\x147', '\x17', '\x3', '\x2', '\x2', 
		'\x2', '\x148', '\x146', '\x3', '\x2', '\x2', '\x2', '\x149', '\x14A', 
		'\a', '\x12', '\x2', '\x2', '\x14A', '\x14D', '\a', 'q', '\x2', '\x2', 
		'\x14B', '\x14C', '\a', '\x1A', '\x2', '\x2', '\x14C', '\x14E', '\x5', 
		'\xC4', '\x63', '\x2', '\x14D', '\x14B', '\x3', '\x2', '\x2', '\x2', '\x14D', 
		'\x14E', '\x3', '\x2', '\x2', '\x2', '\x14E', '\x14F', '\x3', '\x2', '\x2', 
		'\x2', '\x14F', '\x151', '\a', '\x41', '\x2', '\x2', '\x150', '\x152', 
		'\x5', '\x1A', '\xE', '\x2', '\x151', '\x150', '\x3', '\x2', '\x2', '\x2', 
		'\x151', '\x152', '\x3', '\x2', '\x2', '\x2', '\x152', '\x154', '\x3', 
		'\x2', '\x2', '\x2', '\x153', '\x155', '\a', '\x46', '\x2', '\x2', '\x154', 
		'\x153', '\x3', '\x2', '\x2', '\x2', '\x154', '\x155', '\x3', '\x2', '\x2', 
		'\x2', '\x155', '\x157', '\x3', '\x2', '\x2', '\x2', '\x156', '\x158', 
		'\x5', '\x1E', '\x10', '\x2', '\x157', '\x156', '\x3', '\x2', '\x2', '\x2', 
		'\x157', '\x158', '\x3', '\x2', '\x2', '\x2', '\x158', '\x159', '\x3', 
		'\x2', '\x2', '\x2', '\x159', '\x15A', '\a', '\x42', '\x2', '\x2', '\x15A', 
		'\x19', '\x3', '\x2', '\x2', '\x2', '\x15B', '\x160', '\x5', '\x1C', '\xF', 
		'\x2', '\x15C', '\x15D', '\a', '\x46', '\x2', '\x2', '\x15D', '\x15F', 
		'\x5', '\x1C', '\xF', '\x2', '\x15E', '\x15C', '\x3', '\x2', '\x2', '\x2', 
		'\x15F', '\x162', '\x3', '\x2', '\x2', '\x2', '\x160', '\x15E', '\x3', 
		'\x2', '\x2', '\x2', '\x160', '\x161', '\x3', '\x2', '\x2', '\x2', '\x161', 
		'\x1B', '\x3', '\x2', '\x2', '\x2', '\x162', '\x160', '\x3', '\x2', '\x2', 
		'\x2', '\x163', '\x165', '\x5', '\x66', '\x34', '\x2', '\x164', '\x163', 
		'\x3', '\x2', '\x2', '\x2', '\x165', '\x168', '\x3', '\x2', '\x2', '\x2', 
		'\x166', '\x164', '\x3', '\x2', '\x2', '\x2', '\x166', '\x167', '\x3', 
		'\x2', '\x2', '\x2', '\x167', '\x169', '\x3', '\x2', '\x2', '\x2', '\x168', 
		'\x166', '\x3', '\x2', '\x2', '\x2', '\x169', '\x16B', '\a', 'q', '\x2', 
		'\x2', '\x16A', '\x16C', '\x5', '\xD0', 'i', '\x2', '\x16B', '\x16A', 
		'\x3', '\x2', '\x2', '\x2', '\x16B', '\x16C', '\x3', '\x2', '\x2', '\x2', 
		'\x16C', '\x16E', '\x3', '\x2', '\x2', '\x2', '\x16D', '\x16F', '\x5', 
		'\"', '\x12', '\x2', '\x16E', '\x16D', '\x3', '\x2', '\x2', '\x2', '\x16E', 
		'\x16F', '\x3', '\x2', '\x2', '\x2', '\x16F', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x170', '\x174', '\a', '\x45', '\x2', '\x2', '\x171', '\x173', 
		'\x5', '&', '\x14', '\x2', '\x172', '\x171', '\x3', '\x2', '\x2', '\x2', 
		'\x173', '\x176', '\x3', '\x2', '\x2', '\x2', '\x174', '\x172', '\x3', 
		'\x2', '\x2', '\x2', '\x174', '\x175', '\x3', '\x2', '\x2', '\x2', '\x175', 
		'\x1F', '\x3', '\x2', '\x2', '\x2', '\x176', '\x174', '\x3', '\x2', '\x2', 
		'\x2', '\x177', '\x178', '\a', '\x1E', '\x2', '\x2', '\x178', '\x17A', 
		'\a', 'q', '\x2', '\x2', '\x179', '\x17B', '\x5', '\x12', '\n', '\x2', 
		'\x17A', '\x179', '\x3', '\x2', '\x2', '\x2', '\x17A', '\x17B', '\x3', 
		'\x2', '\x2', '\x2', '\x17B', '\x17E', '\x3', '\x2', '\x2', '\x2', '\x17C', 
		'\x17D', '\a', '\x13', '\x2', '\x2', '\x17D', '\x17F', '\x5', '\xC4', 
		'\x63', '\x2', '\x17E', '\x17C', '\x3', '\x2', '\x2', '\x2', '\x17E', 
		'\x17F', '\x3', '\x2', '\x2', '\x2', '\x17F', '\x180', '\x3', '\x2', '\x2', 
		'\x2', '\x180', '\x181', '\x5', '$', '\x13', '\x2', '\x181', '!', '\x3', 
		'\x2', '\x2', '\x2', '\x182', '\x186', '\a', '\x41', '\x2', '\x2', '\x183', 
		'\x185', '\x5', '&', '\x14', '\x2', '\x184', '\x183', '\x3', '\x2', '\x2', 
		'\x2', '\x185', '\x188', '\x3', '\x2', '\x2', '\x2', '\x186', '\x184', 
		'\x3', '\x2', '\x2', '\x2', '\x186', '\x187', '\x3', '\x2', '\x2', '\x2', 
		'\x187', '\x189', '\x3', '\x2', '\x2', '\x2', '\x188', '\x186', '\x3', 
		'\x2', '\x2', '\x2', '\x189', '\x18A', '\a', '\x42', '\x2', '\x2', '\x18A', 
		'#', '\x3', '\x2', '\x2', '\x2', '\x18B', '\x18F', '\a', '\x41', '\x2', 
		'\x2', '\x18C', '\x18E', '\x5', '\x38', '\x1D', '\x2', '\x18D', '\x18C', 
		'\x3', '\x2', '\x2', '\x2', '\x18E', '\x191', '\x3', '\x2', '\x2', '\x2', 
		'\x18F', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x190', '\x3', 
		'\x2', '\x2', '\x2', '\x190', '\x192', '\x3', '\x2', '\x2', '\x2', '\x191', 
		'\x18F', '\x3', '\x2', '\x2', '\x2', '\x192', '\x193', '\a', '\x42', '\x2', 
		'\x2', '\x193', '%', '\x3', '\x2', '\x2', '\x2', '\x194', '\x1A1', '\a', 
		'\x45', '\x2', '\x2', '\x195', '\x197', '\a', '(', '\x2', '\x2', '\x196', 
		'\x195', '\x3', '\x2', '\x2', '\x2', '\x196', '\x197', '\x3', '\x2', '\x2', 
		'\x2', '\x197', '\x198', '\x3', '\x2', '\x2', '\x2', '\x198', '\x1A1', 
		'\x5', '\x80', '\x41', '\x2', '\x199', '\x19B', '\x5', '\n', '\x6', '\x2', 
		'\x19A', '\x199', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x19E', '\x3', 
		'\x2', '\x2', '\x2', '\x19C', '\x19A', '\x3', '\x2', '\x2', '\x2', '\x19C', 
		'\x19D', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19F', '\x3', '\x2', '\x2', 
		'\x2', '\x19E', '\x19C', '\x3', '\x2', '\x2', '\x2', '\x19F', '\x1A1', 
		'\x5', '(', '\x15', '\x2', '\x1A0', '\x194', '\x3', '\x2', '\x2', '\x2', 
		'\x1A0', '\x196', '\x3', '\x2', '\x2', '\x2', '\x1A0', '\x19C', '\x3', 
		'\x2', '\x2', '\x2', '\x1A1', '\'', '\x3', '\x2', '\x2', '\x2', '\x1A2', 
		'\x1AC', '\x5', '*', '\x16', '\x2', '\x1A3', '\x1AC', '\x5', '\x30', '\x19', 
		'\x2', '\x1A4', '\x1AC', '\x5', '\x36', '\x1C', '\x2', '\x1A5', '\x1AC', 
		'\x5', '\x34', '\x1B', '\x2', '\x1A6', '\x1AC', '\x5', '\x32', '\x1A', 
		'\x2', '\x1A7', '\x1AC', '\x5', ' ', '\x11', '\x2', '\x1A8', '\x1AC', 
		'\x5', 'p', '\x39', '\x2', '\x1A9', '\x1AC', '\x5', '\x10', '\t', '\x2', 
		'\x1AA', '\x1AC', '\x5', '\x18', '\r', '\x2', '\x1AB', '\x1A2', '\x3', 
		'\x2', '\x2', '\x2', '\x1AB', '\x1A3', '\x3', '\x2', '\x2', '\x2', '\x1AB', 
		'\x1A4', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1A5', '\x3', '\x2', '\x2', 
		'\x2', '\x1AB', '\x1A6', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1A7', 
		'\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1A8', '\x3', '\x2', '\x2', '\x2', 
		'\x1AB', '\x1A9', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1AA', '\x3', 
		'\x2', '\x2', '\x2', '\x1AC', ')', '\x3', '\x2', '\x2', '\x2', '\x1AD', 
		'\x1AE', '\x5', '.', '\x18', '\x2', '\x1AE', '\x1AF', '\a', 'q', '\x2', 
		'\x2', '\x1AF', '\x1B4', '\x5', 'V', ',', '\x2', '\x1B0', '\x1B1', '\a', 
		'\x43', '\x2', '\x2', '\x1B1', '\x1B3', '\a', '\x44', '\x2', '\x2', '\x1B2', 
		'\x1B0', '\x3', '\x2', '\x2', '\x2', '\x1B3', '\x1B6', '\x3', '\x2', '\x2', 
		'\x2', '\x1B4', '\x1B2', '\x3', '\x2', '\x2', '\x2', '\x1B4', '\x1B5', 
		'\x3', '\x2', '\x2', '\x2', '\x1B5', '\x1B9', '\x3', '\x2', '\x2', '\x2', 
		'\x1B6', '\x1B4', '\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B8', '\a', 
		'/', '\x2', '\x2', '\x1B8', '\x1BA', '\x5', 'T', '+', '\x2', '\x1B9', 
		'\x1B7', '\x3', '\x2', '\x2', '\x2', '\x1B9', '\x1BA', '\x3', '\x2', '\x2', 
		'\x2', '\x1BA', '\x1BB', '\x3', '\x2', '\x2', '\x2', '\x1BB', '\x1BC', 
		'\x5', ',', '\x17', '\x2', '\x1BC', '+', '\x3', '\x2', '\x2', '\x2', '\x1BD', 
		'\x1C0', '\x5', '\x80', '\x41', '\x2', '\x1BE', '\x1C0', '\a', '\x45', 
		'\x2', '\x2', '\x1BF', '\x1BD', '\x3', '\x2', '\x2', '\x2', '\x1BF', '\x1BE', 
		'\x3', '\x2', '\x2', '\x2', '\x1C0', '-', '\x3', '\x2', '\x2', '\x2', 
		'\x1C1', '\x1C4', '\x5', '\xC6', '\x64', '\x2', '\x1C2', '\x1C4', '\a', 
		'\x32', '\x2', '\x2', '\x1C3', '\x1C1', '\x3', '\x2', '\x2', '\x2', '\x1C3', 
		'\x1C2', '\x3', '\x2', '\x2', '\x2', '\x1C4', '/', '\x3', '\x2', '\x2', 
		'\x2', '\x1C5', '\x1C6', '\x5', '\x12', '\n', '\x2', '\x1C6', '\x1C7', 
		'\x5', '*', '\x16', '\x2', '\x1C7', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\x1C8', '\x1C9', '\x5', '\x12', '\n', '\x2', '\x1C9', '\x1CA', '\x5', 
		'\x34', '\x1B', '\x2', '\x1CA', '\x33', '\x3', '\x2', '\x2', '\x2', '\x1CB', 
		'\x1CC', '\a', 'q', '\x2', '\x2', '\x1CC', '\x1CF', '\x5', 'V', ',', '\x2', 
		'\x1CD', '\x1CE', '\a', '/', '\x2', '\x2', '\x1CE', '\x1D0', '\x5', 'T', 
		'+', '\x2', '\x1CF', '\x1CD', '\x3', '\x2', '\x2', '\x2', '\x1CF', '\x1D0', 
		'\x3', '\x2', '\x2', '\x2', '\x1D0', '\x1D1', '\x3', '\x2', '\x2', '\x2', 
		'\x1D1', '\x1D2', '\x5', '\x80', '\x41', '\x2', '\x1D2', '\x35', '\x3', 
		'\x2', '\x2', '\x2', '\x1D3', '\x1D4', '\x5', '\xC6', '\x64', '\x2', '\x1D4', 
		'\x1D5', '\x5', '\x46', '$', '\x2', '\x1D5', '\x1D6', '\a', '\x45', '\x2', 
		'\x2', '\x1D6', '\x37', '\x3', '\x2', '\x2', '\x2', '\x1D7', '\x1D9', 
		'\x5', '\n', '\x6', '\x2', '\x1D8', '\x1D7', '\x3', '\x2', '\x2', '\x2', 
		'\x1D9', '\x1DC', '\x3', '\x2', '\x2', '\x2', '\x1DA', '\x1D8', '\x3', 
		'\x2', '\x2', '\x2', '\x1DA', '\x1DB', '\x3', '\x2', '\x2', '\x2', '\x1DB', 
		'\x1DD', '\x3', '\x2', '\x2', '\x2', '\x1DC', '\x1DA', '\x3', '\x2', '\x2', 
		'\x2', '\x1DD', '\x1E0', '\x5', ':', '\x1E', '\x2', '\x1DE', '\x1E0', 
		'\a', '\x45', '\x2', '\x2', '\x1DF', '\x1DA', '\x3', '\x2', '\x2', '\x2', 
		'\x1DF', '\x1DE', '\x3', '\x2', '\x2', '\x2', '\x1E0', '\x39', '\x3', 
		'\x2', '\x2', '\x2', '\x1E1', '\x1E9', '\x5', '<', '\x1F', '\x2', '\x1E2', 
		'\x1E9', '\x5', '@', '!', '\x2', '\x1E3', '\x1E9', '\x5', '\x44', '#', 
		'\x2', '\x1E4', '\x1E9', '\x5', ' ', '\x11', '\x2', '\x1E5', '\x1E9', 
		'\x5', 'p', '\x39', '\x2', '\x1E6', '\x1E9', '\x5', '\x10', '\t', '\x2', 
		'\x1E7', '\x1E9', '\x5', '\x18', '\r', '\x2', '\x1E8', '\x1E1', '\x3', 
		'\x2', '\x2', '\x2', '\x1E8', '\x1E2', '\x3', '\x2', '\x2', '\x2', '\x1E8', 
		'\x1E3', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E4', '\x3', '\x2', '\x2', 
		'\x2', '\x1E8', '\x1E5', '\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E6', 
		'\x3', '\x2', '\x2', '\x2', '\x1E8', '\x1E7', '\x3', '\x2', '\x2', '\x2', 
		'\x1E9', ';', '\x3', '\x2', '\x2', '\x2', '\x1EA', '\x1EB', '\x5', '\xC6', 
		'\x64', '\x2', '\x1EB', '\x1F0', '\x5', '>', ' ', '\x2', '\x1EC', '\x1ED', 
		'\a', '\x46', '\x2', '\x2', '\x1ED', '\x1EF', '\x5', '>', ' ', '\x2', 
		'\x1EE', '\x1EC', '\x3', '\x2', '\x2', '\x2', '\x1EF', '\x1F2', '\x3', 
		'\x2', '\x2', '\x2', '\x1F0', '\x1EE', '\x3', '\x2', '\x2', '\x2', '\x1F0', 
		'\x1F1', '\x3', '\x2', '\x2', '\x2', '\x1F1', '\x1F3', '\x3', '\x2', '\x2', 
		'\x2', '\x1F2', '\x1F0', '\x3', '\x2', '\x2', '\x2', '\x1F3', '\x1F4', 
		'\a', '\x45', '\x2', '\x2', '\x1F4', '=', '\x3', '\x2', '\x2', '\x2', 
		'\x1F5', '\x1FA', '\a', 'q', '\x2', '\x2', '\x1F6', '\x1F7', '\a', '\x43', 
		'\x2', '\x2', '\x1F7', '\x1F9', '\a', '\x44', '\x2', '\x2', '\x1F8', '\x1F6', 
		'\x3', '\x2', '\x2', '\x2', '\x1F9', '\x1FC', '\x3', '\x2', '\x2', '\x2', 
		'\x1FA', '\x1F8', '\x3', '\x2', '\x2', '\x2', '\x1FA', '\x1FB', '\x3', 
		'\x2', '\x2', '\x2', '\x1FB', '\x1FD', '\x3', '\x2', '\x2', '\x2', '\x1FC', 
		'\x1FA', '\x3', '\x2', '\x2', '\x2', '\x1FD', '\x1FE', '\a', 'H', '\x2', 
		'\x2', '\x1FE', '\x1FF', '\x5', 'L', '\'', '\x2', '\x1FF', '?', '\x3', 
		'\x2', '\x2', '\x2', '\x200', '\x202', '\x5', '\x42', '\"', '\x2', '\x201', 
		'\x200', '\x3', '\x2', '\x2', '\x2', '\x202', '\x205', '\x3', '\x2', '\x2', 
		'\x2', '\x203', '\x201', '\x3', '\x2', '\x2', '\x2', '\x203', '\x204', 
		'\x3', '\x2', '\x2', '\x2', '\x204', '\x210', '\x3', '\x2', '\x2', '\x2', 
		'\x205', '\x203', '\x3', '\x2', '\x2', '\x2', '\x206', '\x211', '\x5', 
		'.', '\x18', '\x2', '\x207', '\x20B', '\x5', '\x12', '\n', '\x2', '\x208', 
		'\x20A', '\x5', '\x66', '\x34', '\x2', '\x209', '\x208', '\x3', '\x2', 
		'\x2', '\x2', '\x20A', '\x20D', '\x3', '\x2', '\x2', '\x2', '\x20B', '\x209', 
		'\x3', '\x2', '\x2', '\x2', '\x20B', '\x20C', '\x3', '\x2', '\x2', '\x2', 
		'\x20C', '\x20E', '\x3', '\x2', '\x2', '\x2', '\x20D', '\x20B', '\x3', 
		'\x2', '\x2', '\x2', '\x20E', '\x20F', '\x5', '.', '\x18', '\x2', '\x20F', 
		'\x211', '\x3', '\x2', '\x2', '\x2', '\x210', '\x206', '\x3', '\x2', '\x2', 
		'\x2', '\x210', '\x207', '\x3', '\x2', '\x2', '\x2', '\x211', '\x212', 
		'\x3', '\x2', '\x2', '\x2', '\x212', '\x213', '\a', 'q', '\x2', '\x2', 
		'\x213', '\x218', '\x5', 'V', ',', '\x2', '\x214', '\x215', '\a', '\x43', 
		'\x2', '\x2', '\x215', '\x217', '\a', '\x44', '\x2', '\x2', '\x216', '\x214', 
		'\x3', '\x2', '\x2', '\x2', '\x217', '\x21A', '\x3', '\x2', '\x2', '\x2', 
		'\x218', '\x216', '\x3', '\x2', '\x2', '\x2', '\x218', '\x219', '\x3', 
		'\x2', '\x2', '\x2', '\x219', '\x21D', '\x3', '\x2', '\x2', '\x2', '\x21A', 
		'\x218', '\x3', '\x2', '\x2', '\x2', '\x21B', '\x21C', '\a', '/', '\x2', 
		'\x2', '\x21C', '\x21E', '\x5', 'T', '+', '\x2', '\x21D', '\x21B', '\x3', 
		'\x2', '\x2', '\x2', '\x21D', '\x21E', '\x3', '\x2', '\x2', '\x2', '\x21E', 
		'\x21F', '\x3', '\x2', '\x2', '\x2', '\x21F', '\x220', '\x5', ',', '\x17', 
		'\x2', '\x220', '\x41', '\x3', '\x2', '\x2', '\x2', '\x221', '\x228', 
		'\x5', '\x66', '\x34', '\x2', '\x222', '\x228', '\a', '%', '\x2', '\x2', 
		'\x223', '\x228', '\a', '\x3', '\x2', '\x2', '\x224', '\x228', '\a', '\xE', 
		'\x2', '\x2', '\x225', '\x228', '\a', '(', '\x2', '\x2', '\x226', '\x228', 
		'\a', ')', '\x2', '\x2', '\x227', '\x221', '\x3', '\x2', '\x2', '\x2', 
		'\x227', '\x222', '\x3', '\x2', '\x2', '\x2', '\x227', '\x223', '\x3', 
		'\x2', '\x2', '\x2', '\x227', '\x224', '\x3', '\x2', '\x2', '\x2', '\x227', 
		'\x225', '\x3', '\x2', '\x2', '\x2', '\x227', '\x226', '\x3', '\x2', '\x2', 
		'\x2', '\x228', '\x43', '\x3', '\x2', '\x2', '\x2', '\x229', '\x22A', 
		'\x5', '\x12', '\n', '\x2', '\x22A', '\x22B', '\x5', '@', '!', '\x2', 
		'\x22B', '\x45', '\x3', '\x2', '\x2', '\x2', '\x22C', '\x231', '\x5', 
		'H', '%', '\x2', '\x22D', '\x22E', '\a', '\x46', '\x2', '\x2', '\x22E', 
		'\x230', '\x5', 'H', '%', '\x2', '\x22F', '\x22D', '\x3', '\x2', '\x2', 
		'\x2', '\x230', '\x233', '\x3', '\x2', '\x2', '\x2', '\x231', '\x22F', 
		'\x3', '\x2', '\x2', '\x2', '\x231', '\x232', '\x3', '\x2', '\x2', '\x2', 
		'\x232', 'G', '\x3', '\x2', '\x2', '\x2', '\x233', '\x231', '\x3', '\x2', 
		'\x2', '\x2', '\x234', '\x237', '\x5', 'J', '&', '\x2', '\x235', '\x236', 
		'\a', 'H', '\x2', '\x2', '\x236', '\x238', '\x5', 'L', '\'', '\x2', '\x237', 
		'\x235', '\x3', '\x2', '\x2', '\x2', '\x237', '\x238', '\x3', '\x2', '\x2', 
		'\x2', '\x238', 'I', '\x3', '\x2', '\x2', '\x2', '\x239', '\x23E', '\a', 
		'q', '\x2', '\x2', '\x23A', '\x23B', '\a', '\x43', '\x2', '\x2', '\x23B', 
		'\x23D', '\a', '\x44', '\x2', '\x2', '\x23C', '\x23A', '\x3', '\x2', '\x2', 
		'\x2', '\x23D', '\x240', '\x3', '\x2', '\x2', '\x2', '\x23E', '\x23C', 
		'\x3', '\x2', '\x2', '\x2', '\x23E', '\x23F', '\x3', '\x2', '\x2', '\x2', 
		'\x23F', 'K', '\x3', '\x2', '\x2', '\x2', '\x240', '\x23E', '\x3', '\x2', 
		'\x2', '\x2', '\x241', '\x244', '\x5', 'N', '(', '\x2', '\x242', '\x244', 
		'\x5', '\xA6', 'T', '\x2', '\x243', '\x241', '\x3', '\x2', '\x2', '\x2', 
		'\x243', '\x242', '\x3', '\x2', '\x2', '\x2', '\x244', 'M', '\x3', '\x2', 
		'\x2', '\x2', '\x245', '\x251', '\a', '\x41', '\x2', '\x2', '\x246', '\x24B', 
		'\x5', 'L', '\'', '\x2', '\x247', '\x248', '\a', '\x46', '\x2', '\x2', 
		'\x248', '\x24A', '\x5', 'L', '\'', '\x2', '\x249', '\x247', '\x3', '\x2', 
		'\x2', '\x2', '\x24A', '\x24D', '\x3', '\x2', '\x2', '\x2', '\x24B', '\x249', 
		'\x3', '\x2', '\x2', '\x2', '\x24B', '\x24C', '\x3', '\x2', '\x2', '\x2', 
		'\x24C', '\x24F', '\x3', '\x2', '\x2', '\x2', '\x24D', '\x24B', '\x3', 
		'\x2', '\x2', '\x2', '\x24E', '\x250', '\a', '\x46', '\x2', '\x2', '\x24F', 
		'\x24E', '\x3', '\x2', '\x2', '\x2', '\x24F', '\x250', '\x3', '\x2', '\x2', 
		'\x2', '\x250', '\x252', '\x3', '\x2', '\x2', '\x2', '\x251', '\x246', 
		'\x3', '\x2', '\x2', '\x2', '\x251', '\x252', '\x3', '\x2', '\x2', '\x2', 
		'\x252', '\x253', '\x3', '\x2', '\x2', '\x2', '\x253', '\x254', '\a', 
		'\x42', '\x2', '\x2', '\x254', 'O', '\x3', '\x2', '\x2', '\x2', '\x255', 
		'\x257', '\a', 'q', '\x2', '\x2', '\x256', '\x258', '\x5', '\xCA', '\x66', 
		'\x2', '\x257', '\x256', '\x3', '\x2', '\x2', '\x2', '\x257', '\x258', 
		'\x3', '\x2', '\x2', '\x2', '\x258', '\x260', '\x3', '\x2', '\x2', '\x2', 
		'\x259', '\x25A', '\a', 'G', '\x2', '\x2', '\x25A', '\x25C', '\a', 'q', 
		'\x2', '\x2', '\x25B', '\x25D', '\x5', '\xCA', '\x66', '\x2', '\x25C', 
		'\x25B', '\x3', '\x2', '\x2', '\x2', '\x25C', '\x25D', '\x3', '\x2', '\x2', 
		'\x2', '\x25D', '\x25F', '\x3', '\x2', '\x2', '\x2', '\x25E', '\x259', 
		'\x3', '\x2', '\x2', '\x2', '\x25F', '\x262', '\x3', '\x2', '\x2', '\x2', 
		'\x260', '\x25E', '\x3', '\x2', '\x2', '\x2', '\x260', '\x261', '\x3', 
		'\x2', '\x2', '\x2', '\x261', 'Q', '\x3', '\x2', '\x2', '\x2', '\x262', 
		'\x260', '\x3', '\x2', '\x2', '\x2', '\x263', '\x26A', '\x5', '\xC6', 
		'\x64', '\x2', '\x264', '\x267', '\a', 'M', '\x2', '\x2', '\x265', '\x266', 
		'\t', '\x2', '\x2', '\x2', '\x266', '\x268', '\x5', '\xC6', '\x64', '\x2', 
		'\x267', '\x265', '\x3', '\x2', '\x2', '\x2', '\x267', '\x268', '\x3', 
		'\x2', '\x2', '\x2', '\x268', '\x26A', '\x3', '\x2', '\x2', '\x2', '\x269', 
		'\x263', '\x3', '\x2', '\x2', '\x2', '\x269', '\x264', '\x3', '\x2', '\x2', 
		'\x2', '\x26A', 'S', '\x3', '\x2', '\x2', '\x2', '\x26B', '\x270', '\x5', 
		'^', '\x30', '\x2', '\x26C', '\x26D', '\a', '\x46', '\x2', '\x2', '\x26D', 
		'\x26F', '\x5', '^', '\x30', '\x2', '\x26E', '\x26C', '\x3', '\x2', '\x2', 
		'\x2', '\x26F', '\x272', '\x3', '\x2', '\x2', '\x2', '\x270', '\x26E', 
		'\x3', '\x2', '\x2', '\x2', '\x270', '\x271', '\x3', '\x2', '\x2', '\x2', 
		'\x271', 'U', '\x3', '\x2', '\x2', '\x2', '\x272', '\x270', '\x3', '\x2', 
		'\x2', '\x2', '\x273', '\x275', '\a', '?', '\x2', '\x2', '\x274', '\x276', 
		'\x5', 'X', '-', '\x2', '\x275', '\x274', '\x3', '\x2', '\x2', '\x2', 
		'\x275', '\x276', '\x3', '\x2', '\x2', '\x2', '\x276', '\x277', '\x3', 
		'\x2', '\x2', '\x2', '\x277', '\x278', '\a', '@', '\x2', '\x2', '\x278', 
		'W', '\x3', '\x2', '\x2', '\x2', '\x279', '\x27E', '\x5', 'Z', '.', '\x2', 
		'\x27A', '\x27B', '\a', '\x46', '\x2', '\x2', '\x27B', '\x27D', '\x5', 
		'Z', '.', '\x2', '\x27C', '\x27A', '\x3', '\x2', '\x2', '\x2', '\x27D', 
		'\x280', '\x3', '\x2', '\x2', '\x2', '\x27E', '\x27C', '\x3', '\x2', '\x2', 
		'\x2', '\x27E', '\x27F', '\x3', '\x2', '\x2', '\x2', '\x27F', '\x283', 
		'\x3', '\x2', '\x2', '\x2', '\x280', '\x27E', '\x3', '\x2', '\x2', '\x2', 
		'\x281', '\x282', '\a', '\x46', '\x2', '\x2', '\x282', '\x284', '\x5', 
		'\\', '/', '\x2', '\x283', '\x281', '\x3', '\x2', '\x2', '\x2', '\x283', 
		'\x284', '\x3', '\x2', '\x2', '\x2', '\x284', '\x287', '\x3', '\x2', '\x2', 
		'\x2', '\x285', '\x287', '\x5', '\\', '/', '\x2', '\x286', '\x279', '\x3', 
		'\x2', '\x2', '\x2', '\x286', '\x285', '\x3', '\x2', '\x2', '\x2', '\x287', 
		'Y', '\x3', '\x2', '\x2', '\x2', '\x288', '\x28A', '\x5', '\xE', '\b', 
		'\x2', '\x289', '\x288', '\x3', '\x2', '\x2', '\x2', '\x28A', '\x28D', 
		'\x3', '\x2', '\x2', '\x2', '\x28B', '\x289', '\x3', '\x2', '\x2', '\x2', 
		'\x28B', '\x28C', '\x3', '\x2', '\x2', '\x2', '\x28C', '\x28E', '\x3', 
		'\x2', '\x2', '\x2', '\x28D', '\x28B', '\x3', '\x2', '\x2', '\x2', '\x28E', 
		'\x28F', '\x5', '\xC6', '\x64', '\x2', '\x28F', '\x290', '\x5', 'J', '&', 
		'\x2', '\x290', '[', '\x3', '\x2', '\x2', '\x2', '\x291', '\x293', '\x5', 
		'\xE', '\b', '\x2', '\x292', '\x291', '\x3', '\x2', '\x2', '\x2', '\x293', 
		'\x296', '\x3', '\x2', '\x2', '\x2', '\x294', '\x292', '\x3', '\x2', '\x2', 
		'\x2', '\x294', '\x295', '\x3', '\x2', '\x2', '\x2', '\x295', '\x297', 
		'\x3', '\x2', '\x2', '\x2', '\x296', '\x294', '\x3', '\x2', '\x2', '\x2', 
		'\x297', '\x298', '\x5', '\xC6', '\x64', '\x2', '\x298', '\x299', '\a', 
		'm', '\x2', '\x2', '\x299', '\x29A', '\x5', 'J', '&', '\x2', '\x29A', 
		']', '\x3', '\x2', '\x2', '\x2', '\x29B', '\x2A0', '\a', 'q', '\x2', '\x2', 
		'\x29C', '\x29D', '\a', 'G', '\x2', '\x2', '\x29D', '\x29F', '\a', 'q', 
		'\x2', '\x2', '\x29E', '\x29C', '\x3', '\x2', '\x2', '\x2', '\x29F', '\x2A2', 
		'\x3', '\x2', '\x2', '\x2', '\x2A0', '\x29E', '\x3', '\x2', '\x2', '\x2', 
		'\x2A0', '\x2A1', '\x3', '\x2', '\x2', '\x2', '\x2A1', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x2A2', '\x2A0', '\x3', '\x2', '\x2', '\x2', '\x2A3', '\x2AA', 
		'\x5', '\x62', '\x32', '\x2', '\x2A4', '\x2AA', '\x5', '\x64', '\x33', 
		'\x2', '\x2A5', '\x2AA', '\a', '<', '\x2', '\x2', '\x2A6', '\x2AA', '\a', 
		'=', '\x2', '\x2', '\x2A7', '\x2AA', '\a', ';', '\x2', '\x2', '\x2A8', 
		'\x2AA', '\a', '>', '\x2', '\x2', '\x2A9', '\x2A3', '\x3', '\x2', '\x2', 
		'\x2', '\x2A9', '\x2A4', '\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2A5', 
		'\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2A6', '\x3', '\x2', '\x2', '\x2', 
		'\x2A9', '\x2A7', '\x3', '\x2', '\x2', '\x2', '\x2A9', '\x2A8', '\x3', 
		'\x2', '\x2', '\x2', '\x2AA', '\x61', '\x3', '\x2', '\x2', '\x2', '\x2AB', 
		'\x2AC', '\t', '\x3', '\x2', '\x2', '\x2AC', '\x63', '\x3', '\x2', '\x2', 
		'\x2', '\x2AD', '\x2AE', '\t', '\x4', '\x2', '\x2', '\x2AE', '\x65', '\x3', 
		'\x2', '\x2', '\x2', '\x2AF', '\x2B0', '\a', 'l', '\x2', '\x2', '\x2B0', 
		'\x2B7', '\x5', '^', '\x30', '\x2', '\x2B1', '\x2B4', '\a', '?', '\x2', 
		'\x2', '\x2B2', '\x2B5', '\x5', 'h', '\x35', '\x2', '\x2B3', '\x2B5', 
		'\x5', 'l', '\x37', '\x2', '\x2B4', '\x2B2', '\x3', '\x2', '\x2', '\x2', 
		'\x2B4', '\x2B3', '\x3', '\x2', '\x2', '\x2', '\x2B4', '\x2B5', '\x3', 
		'\x2', '\x2', '\x2', '\x2B5', '\x2B6', '\x3', '\x2', '\x2', '\x2', '\x2B6', 
		'\x2B8', '\a', '@', '\x2', '\x2', '\x2B7', '\x2B1', '\x3', '\x2', '\x2', 
		'\x2', '\x2B7', '\x2B8', '\x3', '\x2', '\x2', '\x2', '\x2B8', 'g', '\x3', 
		'\x2', '\x2', '\x2', '\x2B9', '\x2BE', '\x5', 'j', '\x36', '\x2', '\x2BA', 
		'\x2BB', '\a', '\x46', '\x2', '\x2', '\x2BB', '\x2BD', '\x5', 'j', '\x36', 
		'\x2', '\x2BC', '\x2BA', '\x3', '\x2', '\x2', '\x2', '\x2BD', '\x2C0', 
		'\x3', '\x2', '\x2', '\x2', '\x2BE', '\x2BC', '\x3', '\x2', '\x2', '\x2', 
		'\x2BE', '\x2BF', '\x3', '\x2', '\x2', '\x2', '\x2BF', 'i', '\x3', '\x2', 
		'\x2', '\x2', '\x2C0', '\x2BE', '\x3', '\x2', '\x2', '\x2', '\x2C1', '\x2C2', 
		'\a', 'q', '\x2', '\x2', '\x2C2', '\x2C3', '\a', 'H', '\x2', '\x2', '\x2C3', 
		'\x2C4', '\x5', 'l', '\x37', '\x2', '\x2C4', 'k', '\x3', '\x2', '\x2', 
		'\x2', '\x2C5', '\x2C9', '\x5', '\xA6', 'T', '\x2', '\x2C6', '\x2C9', 
		'\x5', '\x66', '\x34', '\x2', '\x2C7', '\x2C9', '\x5', 'n', '\x38', '\x2', 
		'\x2C8', '\x2C5', '\x3', '\x2', '\x2', '\x2', '\x2C8', '\x2C6', '\x3', 
		'\x2', '\x2', '\x2', '\x2C8', '\x2C7', '\x3', '\x2', '\x2', '\x2', '\x2C9', 
		'm', '\x3', '\x2', '\x2', '\x2', '\x2CA', '\x2D3', '\a', '\x41', '\x2', 
		'\x2', '\x2CB', '\x2D0', '\x5', 'l', '\x37', '\x2', '\x2CC', '\x2CD', 
		'\a', '\x46', '\x2', '\x2', '\x2CD', '\x2CF', '\x5', 'l', '\x37', '\x2', 
		'\x2CE', '\x2CC', '\x3', '\x2', '\x2', '\x2', '\x2CF', '\x2D2', '\x3', 
		'\x2', '\x2', '\x2', '\x2D0', '\x2CE', '\x3', '\x2', '\x2', '\x2', '\x2D0', 
		'\x2D1', '\x3', '\x2', '\x2', '\x2', '\x2D1', '\x2D4', '\x3', '\x2', '\x2', 
		'\x2', '\x2D2', '\x2D0', '\x3', '\x2', '\x2', '\x2', '\x2D3', '\x2CB', 
		'\x3', '\x2', '\x2', '\x2', '\x2D3', '\x2D4', '\x3', '\x2', '\x2', '\x2', 
		'\x2D4', '\x2D6', '\x3', '\x2', '\x2', '\x2', '\x2D5', '\x2D7', '\a', 
		'\x46', '\x2', '\x2', '\x2D6', '\x2D5', '\x3', '\x2', '\x2', '\x2', '\x2D6', 
		'\x2D7', '\x3', '\x2', '\x2', '\x2', '\x2D7', '\x2D8', '\x3', '\x2', '\x2', 
		'\x2', '\x2D8', '\x2D9', '\a', '\x42', '\x2', '\x2', '\x2D9', 'o', '\x3', 
		'\x2', '\x2', '\x2', '\x2DA', '\x2DB', '\a', 'l', '\x2', '\x2', '\x2DB', 
		'\x2DC', '\a', '\x1E', '\x2', '\x2', '\x2DC', '\x2DD', '\a', 'q', '\x2', 
		'\x2', '\x2DD', '\x2DE', '\x5', 'r', ':', '\x2', '\x2DE', 'q', '\x3', 
		'\x2', '\x2', '\x2', '\x2DF', '\x2E3', '\a', '\x41', '\x2', '\x2', '\x2E0', 
		'\x2E2', '\x5', 't', ';', '\x2', '\x2E1', '\x2E0', '\x3', '\x2', '\x2', 
		'\x2', '\x2E2', '\x2E5', '\x3', '\x2', '\x2', '\x2', '\x2E3', '\x2E1', 
		'\x3', '\x2', '\x2', '\x2', '\x2E3', '\x2E4', '\x3', '\x2', '\x2', '\x2', 
		'\x2E4', '\x2E6', '\x3', '\x2', '\x2', '\x2', '\x2E5', '\x2E3', '\x3', 
		'\x2', '\x2', '\x2', '\x2E6', '\x2E7', '\a', '\x42', '\x2', '\x2', '\x2E7', 
		's', '\x3', '\x2', '\x2', '\x2', '\x2E8', '\x2EA', '\x5', '\n', '\x6', 
		'\x2', '\x2E9', '\x2E8', '\x3', '\x2', '\x2', '\x2', '\x2EA', '\x2ED', 
		'\x3', '\x2', '\x2', '\x2', '\x2EB', '\x2E9', '\x3', '\x2', '\x2', '\x2', 
		'\x2EB', '\x2EC', '\x3', '\x2', '\x2', '\x2', '\x2EC', '\x2EE', '\x3', 
		'\x2', '\x2', '\x2', '\x2ED', '\x2EB', '\x3', '\x2', '\x2', '\x2', '\x2EE', 
		'\x2F1', '\x5', 'v', '<', '\x2', '\x2EF', '\x2F1', '\a', '\x45', '\x2', 
		'\x2', '\x2F0', '\x2EB', '\x3', '\x2', '\x2', '\x2', '\x2F0', '\x2EF', 
		'\x3', '\x2', '\x2', '\x2', '\x2F1', 'u', '\x3', '\x2', '\x2', '\x2', 
		'\x2F2', '\x2F3', '\x5', '\xC6', '\x64', '\x2', '\x2F3', '\x2F4', '\x5', 
		'x', '=', '\x2', '\x2F4', '\x2F5', '\a', '\x45', '\x2', '\x2', '\x2F5', 
		'\x307', '\x3', '\x2', '\x2', '\x2', '\x2F6', '\x2F8', '\x5', '\x10', 
		'\t', '\x2', '\x2F7', '\x2F9', '\a', '\x45', '\x2', '\x2', '\x2F8', '\x2F7', 
		'\x3', '\x2', '\x2', '\x2', '\x2F8', '\x2F9', '\x3', '\x2', '\x2', '\x2', 
		'\x2F9', '\x307', '\x3', '\x2', '\x2', '\x2', '\x2FA', '\x2FC', '\x5', 
		' ', '\x11', '\x2', '\x2FB', '\x2FD', '\a', '\x45', '\x2', '\x2', '\x2FC', 
		'\x2FB', '\x3', '\x2', '\x2', '\x2', '\x2FC', '\x2FD', '\x3', '\x2', '\x2', 
		'\x2', '\x2FD', '\x307', '\x3', '\x2', '\x2', '\x2', '\x2FE', '\x300', 
		'\x5', '\x18', '\r', '\x2', '\x2FF', '\x301', '\a', '\x45', '\x2', '\x2', 
		'\x300', '\x2FF', '\x3', '\x2', '\x2', '\x2', '\x300', '\x301', '\x3', 
		'\x2', '\x2', '\x2', '\x301', '\x307', '\x3', '\x2', '\x2', '\x2', '\x302', 
		'\x304', '\x5', 'p', '\x39', '\x2', '\x303', '\x305', '\a', '\x45', '\x2', 
		'\x2', '\x304', '\x303', '\x3', '\x2', '\x2', '\x2', '\x304', '\x305', 
		'\x3', '\x2', '\x2', '\x2', '\x305', '\x307', '\x3', '\x2', '\x2', '\x2', 
		'\x306', '\x2F2', '\x3', '\x2', '\x2', '\x2', '\x306', '\x2F6', '\x3', 
		'\x2', '\x2', '\x2', '\x306', '\x2FA', '\x3', '\x2', '\x2', '\x2', '\x306', 
		'\x2FE', '\x3', '\x2', '\x2', '\x2', '\x306', '\x302', '\x3', '\x2', '\x2', 
		'\x2', '\x307', 'w', '\x3', '\x2', '\x2', '\x2', '\x308', '\x30B', '\x5', 
		'z', '>', '\x2', '\x309', '\x30B', '\x5', '|', '?', '\x2', '\x30A', '\x308', 
		'\x3', '\x2', '\x2', '\x2', '\x30A', '\x309', '\x3', '\x2', '\x2', '\x2', 
		'\x30B', 'y', '\x3', '\x2', '\x2', '\x2', '\x30C', '\x30D', '\a', 'q', 
		'\x2', '\x2', '\x30D', '\x30E', '\a', '?', '\x2', '\x2', '\x30E', '\x310', 
		'\a', '@', '\x2', '\x2', '\x30F', '\x311', '\x5', '~', '@', '\x2', '\x310', 
		'\x30F', '\x3', '\x2', '\x2', '\x2', '\x310', '\x311', '\x3', '\x2', '\x2', 
		'\x2', '\x311', '{', '\x3', '\x2', '\x2', '\x2', '\x312', '\x313', '\x5', 
		'\x46', '$', '\x2', '\x313', '}', '\x3', '\x2', '\x2', '\x2', '\x314', 
		'\x315', '\a', '\xE', '\x2', '\x2', '\x315', '\x316', '\x5', 'l', '\x37', 
		'\x2', '\x316', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x317', '\x31B', 
		'\a', '\x41', '\x2', '\x2', '\x318', '\x31A', '\x5', '\x82', '\x42', '\x2', 
		'\x319', '\x318', '\x3', '\x2', '\x2', '\x2', '\x31A', '\x31D', '\x3', 
		'\x2', '\x2', '\x2', '\x31B', '\x319', '\x3', '\x2', '\x2', '\x2', '\x31B', 
		'\x31C', '\x3', '\x2', '\x2', '\x2', '\x31C', '\x31E', '\x3', '\x2', '\x2', 
		'\x2', '\x31D', '\x31B', '\x3', '\x2', '\x2', '\x2', '\x31E', '\x31F', 
		'\a', '\x42', '\x2', '\x2', '\x31F', '\x81', '\x3', '\x2', '\x2', '\x2', 
		'\x320', '\x321', '\x5', '\x84', '\x43', '\x2', '\x321', '\x322', '\a', 
		'\x45', '\x2', '\x2', '\x322', '\x326', '\x3', '\x2', '\x2', '\x2', '\x323', 
		'\x326', '\x5', '\x88', '\x45', '\x2', '\x324', '\x326', '\x5', '\x86', 
		'\x44', '\x2', '\x325', '\x320', '\x3', '\x2', '\x2', '\x2', '\x325', 
		'\x323', '\x3', '\x2', '\x2', '\x2', '\x325', '\x324', '\x3', '\x2', '\x2', 
		'\x2', '\x326', '\x83', '\x3', '\x2', '\x2', '\x2', '\x327', '\x329', 
		'\x5', '\xE', '\b', '\x2', '\x328', '\x327', '\x3', '\x2', '\x2', '\x2', 
		'\x329', '\x32C', '\x3', '\x2', '\x2', '\x2', '\x32A', '\x328', '\x3', 
		'\x2', '\x2', '\x2', '\x32A', '\x32B', '\x3', '\x2', '\x2', '\x2', '\x32B', 
		'\x32D', '\x3', '\x2', '\x2', '\x2', '\x32C', '\x32A', '\x3', '\x2', '\x2', 
		'\x2', '\x32D', '\x32E', '\x5', '\xC6', '\x64', '\x2', '\x32E', '\x32F', 
		'\x5', '\x46', '$', '\x2', '\x32F', '\x85', '\x3', '\x2', '\x2', '\x2', 
		'\x330', '\x332', '\x5', '\f', '\a', '\x2', '\x331', '\x330', '\x3', '\x2', 
		'\x2', '\x2', '\x332', '\x335', '\x3', '\x2', '\x2', '\x2', '\x333', '\x331', 
		'\x3', '\x2', '\x2', '\x2', '\x333', '\x334', '\x3', '\x2', '\x2', '\x2', 
		'\x334', '\x338', '\x3', '\x2', '\x2', '\x2', '\x335', '\x333', '\x3', 
		'\x2', '\x2', '\x2', '\x336', '\x339', '\x5', '\x10', '\t', '\x2', '\x337', 
		'\x339', '\x5', ' ', '\x11', '\x2', '\x338', '\x336', '\x3', '\x2', '\x2', 
		'\x2', '\x338', '\x337', '\x3', '\x2', '\x2', '\x2', '\x339', '\x33C', 
		'\x3', '\x2', '\x2', '\x2', '\x33A', '\x33C', '\a', '\x45', '\x2', '\x2', 
		'\x33B', '\x333', '\x3', '\x2', '\x2', '\x2', '\x33B', '\x33A', '\x3', 
		'\x2', '\x2', '\x2', '\x33C', '\x87', '\x3', '\x2', '\x2', '\x2', '\x33D', 
		'\x3A6', '\x5', '\x80', '\x41', '\x2', '\x33E', '\x33F', '\a', '\x4', 
		'\x2', '\x2', '\x33F', '\x342', '\x5', '\xA6', 'T', '\x2', '\x340', '\x341', 
		'\a', 'N', '\x2', '\x2', '\x341', '\x343', '\x5', '\xA6', 'T', '\x2', 
		'\x342', '\x340', '\x3', '\x2', '\x2', '\x2', '\x342', '\x343', '\x3', 
		'\x2', '\x2', '\x2', '\x343', '\x344', '\x3', '\x2', '\x2', '\x2', '\x344', 
		'\x345', '\a', '\x45', '\x2', '\x2', '\x345', '\x3A6', '\x3', '\x2', '\x2', 
		'\x2', '\x346', '\x347', '\a', '\x18', '\x2', '\x2', '\x347', '\x348', 
		'\x5', '\xA0', 'Q', '\x2', '\x348', '\x34B', '\x5', '\x88', '\x45', '\x2', 
		'\x349', '\x34A', '\a', '\x11', '\x2', '\x2', '\x34A', '\x34C', '\x5', 
		'\x88', '\x45', '\x2', '\x34B', '\x349', '\x3', '\x2', '\x2', '\x2', '\x34B', 
		'\x34C', '\x3', '\x2', '\x2', '\x2', '\x34C', '\x3A6', '\x3', '\x2', '\x2', 
		'\x2', '\x34D', '\x34E', '\a', '\x17', '\x2', '\x2', '\x34E', '\x34F', 
		'\a', '?', '\x2', '\x2', '\x34F', '\x350', '\x5', '\x9A', 'N', '\x2', 
		'\x350', '\x351', '\a', '@', '\x2', '\x2', '\x351', '\x352', '\x5', '\x88', 
		'\x45', '\x2', '\x352', '\x3A6', '\x3', '\x2', '\x2', '\x2', '\x353', 
		'\x354', '\a', '\x34', '\x2', '\x2', '\x354', '\x355', '\x5', '\xA0', 
		'Q', '\x2', '\x355', '\x356', '\x5', '\x88', '\x45', '\x2', '\x356', '\x3A6', 
		'\x3', '\x2', '\x2', '\x2', '\x357', '\x358', '\a', '\xF', '\x2', '\x2', 
		'\x358', '\x359', '\x5', '\x88', '\x45', '\x2', '\x359', '\x35A', '\a', 
		'\x34', '\x2', '\x2', '\x35A', '\x35B', '\x5', '\xA0', 'Q', '\x2', '\x35B', 
		'\x35C', '\a', '\x45', '\x2', '\x2', '\x35C', '\x3A6', '\x3', '\x2', '\x2', 
		'\x2', '\x35D', '\x35E', '\a', '\x31', '\x2', '\x2', '\x35E', '\x368', 
		'\x5', '\x80', '\x41', '\x2', '\x35F', '\x361', '\x5', '\x8A', '\x46', 
		'\x2', '\x360', '\x35F', '\x3', '\x2', '\x2', '\x2', '\x361', '\x362', 
		'\x3', '\x2', '\x2', '\x2', '\x362', '\x360', '\x3', '\x2', '\x2', '\x2', 
		'\x362', '\x363', '\x3', '\x2', '\x2', '\x2', '\x363', '\x365', '\x3', 
		'\x2', '\x2', '\x2', '\x364', '\x366', '\x5', '\x8E', 'H', '\x2', '\x365', 
		'\x364', '\x3', '\x2', '\x2', '\x2', '\x365', '\x366', '\x3', '\x2', '\x2', 
		'\x2', '\x366', '\x369', '\x3', '\x2', '\x2', '\x2', '\x367', '\x369', 
		'\x5', '\x8E', 'H', '\x2', '\x368', '\x360', '\x3', '\x2', '\x2', '\x2', 
		'\x368', '\x367', '\x3', '\x2', '\x2', '\x2', '\x369', '\x3A6', '\x3', 
		'\x2', '\x2', '\x2', '\x36A', '\x36B', '\a', '\x31', '\x2', '\x2', '\x36B', 
		'\x36C', '\x5', '\x90', 'I', '\x2', '\x36C', '\x370', '\x5', '\x80', '\x41', 
		'\x2', '\x36D', '\x36F', '\x5', '\x8A', '\x46', '\x2', '\x36E', '\x36D', 
		'\x3', '\x2', '\x2', '\x2', '\x36F', '\x372', '\x3', '\x2', '\x2', '\x2', 
		'\x370', '\x36E', '\x3', '\x2', '\x2', '\x2', '\x370', '\x371', '\x3', 
		'\x2', '\x2', '\x2', '\x371', '\x374', '\x3', '\x2', '\x2', '\x2', '\x372', 
		'\x370', '\x3', '\x2', '\x2', '\x2', '\x373', '\x375', '\x5', '\x8E', 
		'H', '\x2', '\x374', '\x373', '\x3', '\x2', '\x2', '\x2', '\x374', '\x375', 
		'\x3', '\x2', '\x2', '\x2', '\x375', '\x3A6', '\x3', '\x2', '\x2', '\x2', 
		'\x376', '\x377', '\a', '+', '\x2', '\x2', '\x377', '\x378', '\x5', '\xA0', 
		'Q', '\x2', '\x378', '\x37C', '\a', '\x41', '\x2', '\x2', '\x379', '\x37B', 
		'\x5', '\x96', 'L', '\x2', '\x37A', '\x379', '\x3', '\x2', '\x2', '\x2', 
		'\x37B', '\x37E', '\x3', '\x2', '\x2', '\x2', '\x37C', '\x37A', '\x3', 
		'\x2', '\x2', '\x2', '\x37C', '\x37D', '\x3', '\x2', '\x2', '\x2', '\x37D', 
		'\x382', '\x3', '\x2', '\x2', '\x2', '\x37E', '\x37C', '\x3', '\x2', '\x2', 
		'\x2', '\x37F', '\x381', '\x5', '\x98', 'M', '\x2', '\x380', '\x37F', 
		'\x3', '\x2', '\x2', '\x2', '\x381', '\x384', '\x3', '\x2', '\x2', '\x2', 
		'\x382', '\x380', '\x3', '\x2', '\x2', '\x2', '\x382', '\x383', '\x3', 
		'\x2', '\x2', '\x2', '\x383', '\x385', '\x3', '\x2', '\x2', '\x2', '\x384', 
		'\x382', '\x3', '\x2', '\x2', '\x2', '\x385', '\x386', '\a', '\x42', '\x2', 
		'\x2', '\x386', '\x3A6', '\x3', '\x2', '\x2', '\x2', '\x387', '\x388', 
		'\a', ',', '\x2', '\x2', '\x388', '\x389', '\x5', '\xA0', 'Q', '\x2', 
		'\x389', '\x38A', '\x5', '\x80', '\x41', '\x2', '\x38A', '\x3A6', '\x3', 
		'\x2', '\x2', '\x2', '\x38B', '\x38D', '\a', '&', '\x2', '\x2', '\x38C', 
		'\x38E', '\x5', '\xA6', 'T', '\x2', '\x38D', '\x38C', '\x3', '\x2', '\x2', 
		'\x2', '\x38D', '\x38E', '\x3', '\x2', '\x2', '\x2', '\x38E', '\x38F', 
		'\x3', '\x2', '\x2', '\x2', '\x38F', '\x3A6', '\a', '\x45', '\x2', '\x2', 
		'\x390', '\x391', '\a', '.', '\x2', '\x2', '\x391', '\x392', '\x5', '\xA6', 
		'T', '\x2', '\x392', '\x393', '\a', '\x45', '\x2', '\x2', '\x393', '\x3A6', 
		'\x3', '\x2', '\x2', '\x2', '\x394', '\x396', '\a', '\x6', '\x2', '\x2', 
		'\x395', '\x397', '\a', 'q', '\x2', '\x2', '\x396', '\x395', '\x3', '\x2', 
		'\x2', '\x2', '\x396', '\x397', '\x3', '\x2', '\x2', '\x2', '\x397', '\x398', 
		'\x3', '\x2', '\x2', '\x2', '\x398', '\x3A6', '\a', '\x45', '\x2', '\x2', 
		'\x399', '\x39B', '\a', '\r', '\x2', '\x2', '\x39A', '\x39C', '\a', 'q', 
		'\x2', '\x2', '\x39B', '\x39A', '\x3', '\x2', '\x2', '\x2', '\x39B', '\x39C', 
		'\x3', '\x2', '\x2', '\x2', '\x39C', '\x39D', '\x3', '\x2', '\x2', '\x2', 
		'\x39D', '\x3A6', '\a', '\x45', '\x2', '\x2', '\x39E', '\x3A6', '\a', 
		'\x45', '\x2', '\x2', '\x39F', '\x3A0', '\x5', '\xA6', 'T', '\x2', '\x3A0', 
		'\x3A1', '\a', '\x45', '\x2', '\x2', '\x3A1', '\x3A6', '\x3', '\x2', '\x2', 
		'\x2', '\x3A2', '\x3A3', '\a', 'q', '\x2', '\x2', '\x3A3', '\x3A4', '\a', 
		'N', '\x2', '\x2', '\x3A4', '\x3A6', '\x5', '\x88', '\x45', '\x2', '\x3A5', 
		'\x33D', '\x3', '\x2', '\x2', '\x2', '\x3A5', '\x33E', '\x3', '\x2', '\x2', 
		'\x2', '\x3A5', '\x346', '\x3', '\x2', '\x2', '\x2', '\x3A5', '\x34D', 
		'\x3', '\x2', '\x2', '\x2', '\x3A5', '\x353', '\x3', '\x2', '\x2', '\x2', 
		'\x3A5', '\x357', '\x3', '\x2', '\x2', '\x2', '\x3A5', '\x35D', '\x3', 
		'\x2', '\x2', '\x2', '\x3A5', '\x36A', '\x3', '\x2', '\x2', '\x2', '\x3A5', 
		'\x376', '\x3', '\x2', '\x2', '\x2', '\x3A5', '\x387', '\x3', '\x2', '\x2', 
		'\x2', '\x3A5', '\x38B', '\x3', '\x2', '\x2', '\x2', '\x3A5', '\x390', 
		'\x3', '\x2', '\x2', '\x2', '\x3A5', '\x394', '\x3', '\x2', '\x2', '\x2', 
		'\x3A5', '\x399', '\x3', '\x2', '\x2', '\x2', '\x3A5', '\x39E', '\x3', 
		'\x2', '\x2', '\x2', '\x3A5', '\x39F', '\x3', '\x2', '\x2', '\x2', '\x3A5', 
		'\x3A2', '\x3', '\x2', '\x2', '\x2', '\x3A6', '\x89', '\x3', '\x2', '\x2', 
		'\x2', '\x3A7', '\x3A8', '\a', '\t', '\x2', '\x2', '\x3A8', '\x3AC', '\a', 
		'?', '\x2', '\x2', '\x3A9', '\x3AB', '\x5', '\xE', '\b', '\x2', '\x3AA', 
		'\x3A9', '\x3', '\x2', '\x2', '\x2', '\x3AB', '\x3AE', '\x3', '\x2', '\x2', 
		'\x2', '\x3AC', '\x3AA', '\x3', '\x2', '\x2', '\x2', '\x3AC', '\x3AD', 
		'\x3', '\x2', '\x2', '\x2', '\x3AD', '\x3AF', '\x3', '\x2', '\x2', '\x2', 
		'\x3AE', '\x3AC', '\x3', '\x2', '\x2', '\x2', '\x3AF', '\x3B0', '\x5', 
		'\x8C', 'G', '\x2', '\x3B0', '\x3B1', '\a', 'q', '\x2', '\x2', '\x3B1', 
		'\x3B2', '\a', '@', '\x2', '\x2', '\x3B2', '\x3B3', '\x5', '\x80', '\x41', 
		'\x2', '\x3B3', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x3B4', '\x3B9', 
		'\x5', '^', '\x30', '\x2', '\x3B5', '\x3B6', '\a', '\\', '\x2', '\x2', 
		'\x3B6', '\x3B8', '\x5', '^', '\x30', '\x2', '\x3B7', '\x3B5', '\x3', 
		'\x2', '\x2', '\x2', '\x3B8', '\x3BB', '\x3', '\x2', '\x2', '\x2', '\x3B9', 
		'\x3B7', '\x3', '\x2', '\x2', '\x2', '\x3B9', '\x3BA', '\x3', '\x2', '\x2', 
		'\x2', '\x3BA', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x3BB', '\x3B9', 
		'\x3', '\x2', '\x2', '\x2', '\x3BC', '\x3BD', '\a', '\x15', '\x2', '\x2', 
		'\x3BD', '\x3BE', '\x5', '\x80', '\x41', '\x2', '\x3BE', '\x8F', '\x3', 
		'\x2', '\x2', '\x2', '\x3BF', '\x3C0', '\a', '?', '\x2', '\x2', '\x3C0', 
		'\x3C2', '\x5', '\x92', 'J', '\x2', '\x3C1', '\x3C3', '\a', '\x45', '\x2', 
		'\x2', '\x3C2', '\x3C1', '\x3', '\x2', '\x2', '\x2', '\x3C2', '\x3C3', 
		'\x3', '\x2', '\x2', '\x2', '\x3C3', '\x3C4', '\x3', '\x2', '\x2', '\x2', 
		'\x3C4', '\x3C5', '\a', '@', '\x2', '\x2', '\x3C5', '\x91', '\x3', '\x2', 
		'\x2', '\x2', '\x3C6', '\x3CB', '\x5', '\x94', 'K', '\x2', '\x3C7', '\x3C8', 
		'\a', '\x45', '\x2', '\x2', '\x3C8', '\x3CA', '\x5', '\x94', 'K', '\x2', 
		'\x3C9', '\x3C7', '\x3', '\x2', '\x2', '\x2', '\x3CA', '\x3CD', '\x3', 
		'\x2', '\x2', '\x2', '\x3CB', '\x3C9', '\x3', '\x2', '\x2', '\x2', '\x3CB', 
		'\x3CC', '\x3', '\x2', '\x2', '\x2', '\x3CC', '\x93', '\x3', '\x2', '\x2', 
		'\x2', '\x3CD', '\x3CB', '\x3', '\x2', '\x2', '\x2', '\x3CE', '\x3D0', 
		'\x5', '\xE', '\b', '\x2', '\x3CF', '\x3CE', '\x3', '\x2', '\x2', '\x2', 
		'\x3D0', '\x3D3', '\x3', '\x2', '\x2', '\x2', '\x3D1', '\x3CF', '\x3', 
		'\x2', '\x2', '\x2', '\x3D1', '\x3D2', '\x3', '\x2', '\x2', '\x2', '\x3D2', 
		'\x3D4', '\x3', '\x2', '\x2', '\x2', '\x3D3', '\x3D1', '\x3', '\x2', '\x2', 
		'\x2', '\x3D4', '\x3D5', '\x5', 'P', ')', '\x2', '\x3D5', '\x3D6', '\x5', 
		'J', '&', '\x2', '\x3D6', '\x3D7', '\a', 'H', '\x2', '\x2', '\x3D7', '\x3D8', 
		'\x5', '\xA6', 'T', '\x2', '\x3D8', '\x95', '\x3', '\x2', '\x2', '\x2', 
		'\x3D9', '\x3DB', '\x5', '\x98', 'M', '\x2', '\x3DA', '\x3D9', '\x3', 
		'\x2', '\x2', '\x2', '\x3DB', '\x3DC', '\x3', '\x2', '\x2', '\x2', '\x3DC', 
		'\x3DA', '\x3', '\x2', '\x2', '\x2', '\x3DC', '\x3DD', '\x3', '\x2', '\x2', 
		'\x2', '\x3DD', '\x3DF', '\x3', '\x2', '\x2', '\x2', '\x3DE', '\x3E0', 
		'\x5', '\x82', '\x42', '\x2', '\x3DF', '\x3DE', '\x3', '\x2', '\x2', '\x2', 
		'\x3E0', '\x3E1', '\x3', '\x2', '\x2', '\x2', '\x3E1', '\x3DF', '\x3', 
		'\x2', '\x2', '\x2', '\x3E1', '\x3E2', '\x3', '\x2', '\x2', '\x2', '\x3E2', 
		'\x97', '\x3', '\x2', '\x2', '\x2', '\x3E3', '\x3E6', '\a', '\b', '\x2', 
		'\x2', '\x3E4', '\x3E7', '\x5', '\xA6', 'T', '\x2', '\x3E5', '\x3E7', 
		'\a', 'q', '\x2', '\x2', '\x3E6', '\x3E4', '\x3', '\x2', '\x2', '\x2', 
		'\x3E6', '\x3E5', '\x3', '\x2', '\x2', '\x2', '\x3E7', '\x3E8', '\x3', 
		'\x2', '\x2', '\x2', '\x3E8', '\x3EC', '\a', 'N', '\x2', '\x2', '\x3E9', 
		'\x3EA', '\a', '\xE', '\x2', '\x2', '\x3EA', '\x3EC', '\a', 'N', '\x2', 
		'\x2', '\x3EB', '\x3E3', '\x3', '\x2', '\x2', '\x2', '\x3EB', '\x3E9', 
		'\x3', '\x2', '\x2', '\x2', '\x3EC', '\x99', '\x3', '\x2', '\x2', '\x2', 
		'\x3ED', '\x3FA', '\x5', '\x9E', 'P', '\x2', '\x3EE', '\x3F0', '\x5', 
		'\x9C', 'O', '\x2', '\x3EF', '\x3EE', '\x3', '\x2', '\x2', '\x2', '\x3EF', 
		'\x3F0', '\x3', '\x2', '\x2', '\x2', '\x3F0', '\x3F1', '\x3', '\x2', '\x2', 
		'\x2', '\x3F1', '\x3F3', '\a', '\x45', '\x2', '\x2', '\x3F2', '\x3F4', 
		'\x5', '\xA6', 'T', '\x2', '\x3F3', '\x3F2', '\x3', '\x2', '\x2', '\x2', 
		'\x3F3', '\x3F4', '\x3', '\x2', '\x2', '\x2', '\x3F4', '\x3F5', '\x3', 
		'\x2', '\x2', '\x2', '\x3F5', '\x3F7', '\a', '\x45', '\x2', '\x2', '\x3F6', 
		'\x3F8', '\x5', '\xA2', 'R', '\x2', '\x3F7', '\x3F6', '\x3', '\x2', '\x2', 
		'\x2', '\x3F7', '\x3F8', '\x3', '\x2', '\x2', '\x2', '\x3F8', '\x3FA', 
		'\x3', '\x2', '\x2', '\x2', '\x3F9', '\x3ED', '\x3', '\x2', '\x2', '\x2', 
		'\x3F9', '\x3EF', '\x3', '\x2', '\x2', '\x2', '\x3FA', '\x9B', '\x3', 
		'\x2', '\x2', '\x2', '\x3FB', '\x3FE', '\x5', '\x84', '\x43', '\x2', '\x3FC', 
		'\x3FE', '\x5', '\xA2', 'R', '\x2', '\x3FD', '\x3FB', '\x3', '\x2', '\x2', 
		'\x2', '\x3FD', '\x3FC', '\x3', '\x2', '\x2', '\x2', '\x3FE', '\x9D', 
		'\x3', '\x2', '\x2', '\x2', '\x3FF', '\x401', '\x5', '\xE', '\b', '\x2', 
		'\x400', '\x3FF', '\x3', '\x2', '\x2', '\x2', '\x401', '\x404', '\x3', 
		'\x2', '\x2', '\x2', '\x402', '\x400', '\x3', '\x2', '\x2', '\x2', '\x402', 
		'\x403', '\x3', '\x2', '\x2', '\x2', '\x403', '\x405', '\x3', '\x2', '\x2', 
		'\x2', '\x404', '\x402', '\x3', '\x2', '\x2', '\x2', '\x405', '\x406', 
		'\x5', '\xC6', '\x64', '\x2', '\x406', '\x407', '\x5', 'J', '&', '\x2', 
		'\x407', '\x408', '\a', 'N', '\x2', '\x2', '\x408', '\x409', '\x5', '\xA6', 
		'T', '\x2', '\x409', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x40A', '\x40B', 
		'\a', '?', '\x2', '\x2', '\x40B', '\x40C', '\x5', '\xA6', 'T', '\x2', 
		'\x40C', '\x40D', '\a', '@', '\x2', '\x2', '\x40D', '\xA1', '\x3', '\x2', 
		'\x2', '\x2', '\x40E', '\x413', '\x5', '\xA6', 'T', '\x2', '\x40F', '\x410', 
		'\a', '\x46', '\x2', '\x2', '\x410', '\x412', '\x5', '\xA6', 'T', '\x2', 
		'\x411', '\x40F', '\x3', '\x2', '\x2', '\x2', '\x412', '\x415', '\x3', 
		'\x2', '\x2', '\x2', '\x413', '\x411', '\x3', '\x2', '\x2', '\x2', '\x413', 
		'\x414', '\x3', '\x2', '\x2', '\x2', '\x414', '\xA3', '\x3', '\x2', '\x2', 
		'\x2', '\x415', '\x413', '\x3', '\x2', '\x2', '\x2', '\x416', '\x417', 
		'\a', 'q', '\x2', '\x2', '\x417', '\x419', '\a', '?', '\x2', '\x2', '\x418', 
		'\x41A', '\x5', '\xA2', 'R', '\x2', '\x419', '\x418', '\x3', '\x2', '\x2', 
		'\x2', '\x419', '\x41A', '\x3', '\x2', '\x2', '\x2', '\x41A', '\x41B', 
		'\x3', '\x2', '\x2', '\x2', '\x41B', '\x429', '\a', '@', '\x2', '\x2', 
		'\x41C', '\x41D', '\a', '-', '\x2', '\x2', '\x41D', '\x41F', '\a', '?', 
		'\x2', '\x2', '\x41E', '\x420', '\x5', '\xA2', 'R', '\x2', '\x41F', '\x41E', 
		'\x3', '\x2', '\x2', '\x2', '\x41F', '\x420', '\x3', '\x2', '\x2', '\x2', 
		'\x420', '\x421', '\x3', '\x2', '\x2', '\x2', '\x421', '\x429', '\a', 
		'@', '\x2', '\x2', '\x422', '\x423', '\a', '*', '\x2', '\x2', '\x423', 
		'\x425', '\a', '?', '\x2', '\x2', '\x424', '\x426', '\x5', '\xA2', 'R', 
		'\x2', '\x425', '\x424', '\x3', '\x2', '\x2', '\x2', '\x425', '\x426', 
		'\x3', '\x2', '\x2', '\x2', '\x426', '\x427', '\x3', '\x2', '\x2', '\x2', 
		'\x427', '\x429', '\a', '@', '\x2', '\x2', '\x428', '\x416', '\x3', '\x2', 
		'\x2', '\x2', '\x428', '\x41C', '\x3', '\x2', '\x2', '\x2', '\x428', '\x422', 
		'\x3', '\x2', '\x2', '\x2', '\x429', '\xA5', '\x3', '\x2', '\x2', '\x2', 
		'\x42A', '\x42B', '\b', 'T', '\x1', '\x2', '\x42B', '\x44A', '\x5', '\xAE', 
		'X', '\x2', '\x42C', '\x44A', '\x5', '\xA4', 'S', '\x2', '\x42D', '\x42E', 
		'\a', '!', '\x2', '\x2', '\x42E', '\x44A', '\x5', '\xB2', 'Z', '\x2', 
		'\x42F', '\x430', '\a', '?', '\x2', '\x2', '\x430', '\x431', '\x5', '\xC6', 
		'\x64', '\x2', '\x431', '\x432', '\a', '@', '\x2', '\x2', '\x432', '\x433', 
		'\x5', '\xA6', 'T', '\x17', '\x433', '\x44A', '\x3', '\x2', '\x2', '\x2', 
		'\x434', '\x435', '\t', '\x5', '\x2', '\x2', '\x435', '\x44A', '\x5', 
		'\xA6', 'T', '\x15', '\x436', '\x437', '\t', '\x6', '\x2', '\x2', '\x437', 
		'\x44A', '\x5', '\xA6', 'T', '\x14', '\x438', '\x44A', '\x5', '\xA8', 
		'U', '\x2', '\x439', '\x43A', '\x5', '\xC6', '\x64', '\x2', '\x43A', '\x440', 
		'\a', 'k', '\x2', '\x2', '\x43B', '\x43D', '\x5', '\xCA', '\x66', '\x2', 
		'\x43C', '\x43B', '\x3', '\x2', '\x2', '\x2', '\x43C', '\x43D', '\x3', 
		'\x2', '\x2', '\x2', '\x43D', '\x43E', '\x3', '\x2', '\x2', '\x2', '\x43E', 
		'\x441', '\a', 'q', '\x2', '\x2', '\x43F', '\x441', '\a', '!', '\x2', 
		'\x2', '\x440', '\x43C', '\x3', '\x2', '\x2', '\x2', '\x440', '\x43F', 
		'\x3', '\x2', '\x2', '\x2', '\x441', '\x44A', '\x3', '\x2', '\x2', '\x2', 
		'\x442', '\x443', '\x5', '\xB0', 'Y', '\x2', '\x443', '\x445', '\a', 'k', 
		'\x2', '\x2', '\x444', '\x446', '\x5', '\xCA', '\x66', '\x2', '\x445', 
		'\x444', '\x3', '\x2', '\x2', '\x2', '\x445', '\x446', '\x3', '\x2', '\x2', 
		'\x2', '\x446', '\x447', '\x3', '\x2', '\x2', '\x2', '\x447', '\x448', 
		'\a', '!', '\x2', '\x2', '\x448', '\x44A', '\x3', '\x2', '\x2', '\x2', 
		'\x449', '\x42A', '\x3', '\x2', '\x2', '\x2', '\x449', '\x42C', '\x3', 
		'\x2', '\x2', '\x2', '\x449', '\x42D', '\x3', '\x2', '\x2', '\x2', '\x449', 
		'\x42F', '\x3', '\x2', '\x2', '\x2', '\x449', '\x434', '\x3', '\x2', '\x2', 
		'\x2', '\x449', '\x436', '\x3', '\x2', '\x2', '\x2', '\x449', '\x438', 
		'\x3', '\x2', '\x2', '\x2', '\x449', '\x439', '\x3', '\x2', '\x2', '\x2', 
		'\x449', '\x442', '\x3', '\x2', '\x2', '\x2', '\x44A', '\x49B', '\x3', 
		'\x2', '\x2', '\x2', '\x44B', '\x44C', '\f', '\x13', '\x2', '\x2', '\x44C', 
		'\x44D', '\t', '\a', '\x2', '\x2', '\x44D', '\x49A', '\x5', '\xA6', 'T', 
		'\x14', '\x44E', '\x44F', '\f', '\x12', '\x2', '\x2', '\x44F', '\x450', 
		'\t', '\b', '\x2', '\x2', '\x450', '\x49A', '\x5', '\xA6', 'T', '\x13', 
		'\x451', '\x459', '\f', '\x11', '\x2', '\x2', '\x452', '\x453', '\a', 
		'J', '\x2', '\x2', '\x453', '\x45A', '\a', 'J', '\x2', '\x2', '\x454', 
		'\x455', '\a', 'I', '\x2', '\x2', '\x455', '\x456', '\a', 'I', '\x2', 
		'\x2', '\x456', '\x45A', '\a', 'I', '\x2', '\x2', '\x457', '\x458', '\a', 
		'I', '\x2', '\x2', '\x458', '\x45A', '\a', 'I', '\x2', '\x2', '\x459', 
		'\x452', '\x3', '\x2', '\x2', '\x2', '\x459', '\x454', '\x3', '\x2', '\x2', 
		'\x2', '\x459', '\x457', '\x3', '\x2', '\x2', '\x2', '\x45A', '\x45B', 
		'\x3', '\x2', '\x2', '\x2', '\x45B', '\x49A', '\x5', '\xA6', 'T', '\x12', 
		'\x45C', '\x45D', '\f', '\x10', '\x2', '\x2', '\x45D', '\x45E', '\t', 
		'\t', '\x2', '\x2', '\x45E', '\x49A', '\x5', '\xA6', 'T', '\x11', '\x45F', 
		'\x460', '\f', '\xE', '\x2', '\x2', '\x460', '\x461', '\t', '\n', '\x2', 
		'\x2', '\x461', '\x49A', '\x5', '\xA6', 'T', '\xF', '\x462', '\x463', 
		'\f', '\r', '\x2', '\x2', '\x463', '\x464', '\a', '[', '\x2', '\x2', '\x464', 
		'\x49A', '\x5', '\xA6', 'T', '\xE', '\x465', '\x466', '\f', '\f', '\x2', 
		'\x2', '\x466', '\x467', '\a', ']', '\x2', '\x2', '\x467', '\x49A', '\x5', 
		'\xA6', 'T', '\r', '\x468', '\x469', '\f', '\v', '\x2', '\x2', '\x469', 
		'\x46A', '\a', '\\', '\x2', '\x2', '\x46A', '\x49A', '\x5', '\xA6', 'T', 
		'\f', '\x46B', '\x46C', '\f', '\n', '\x2', '\x2', '\x46C', '\x46D', '\a', 
		'S', '\x2', '\x2', '\x46D', '\x49A', '\x5', '\xA6', 'T', '\v', '\x46E', 
		'\x46F', '\f', '\t', '\x2', '\x2', '\x46F', '\x470', '\a', 'T', '\x2', 
		'\x2', '\x470', '\x49A', '\x5', '\xA6', 'T', '\n', '\x471', '\x472', '\f', 
		'\b', '\x2', '\x2', '\x472', '\x473', '\a', 'M', '\x2', '\x2', '\x473', 
		'\x474', '\x5', '\xA6', 'T', '\x2', '\x474', '\x475', '\a', 'N', '\x2', 
		'\x2', '\x475', '\x476', '\x5', '\xA6', 'T', '\t', '\x476', '\x49A', '\x3', 
		'\x2', '\x2', '\x2', '\x477', '\x478', '\f', '\a', '\x2', '\x2', '\x478', 
		'\x479', '\t', '\v', '\x2', '\x2', '\x479', '\x49A', '\x5', '\xA6', 'T', 
		'\a', '\x47A', '\x47B', '\f', '\x1B', '\x2', '\x2', '\x47B', '\x487', 
		'\a', 'G', '\x2', '\x2', '\x47C', '\x488', '\a', 'q', '\x2', '\x2', '\x47D', 
		'\x488', '\x5', '\xA4', 'S', '\x2', '\x47E', '\x488', '\a', '-', '\x2', 
		'\x2', '\x47F', '\x481', '\a', '!', '\x2', '\x2', '\x480', '\x482', '\x5', 
		'\xC2', '\x62', '\x2', '\x481', '\x480', '\x3', '\x2', '\x2', '\x2', '\x481', 
		'\x482', '\x3', '\x2', '\x2', '\x2', '\x482', '\x483', '\x3', '\x2', '\x2', 
		'\x2', '\x483', '\x488', '\x5', '\xB6', '\\', '\x2', '\x484', '\x485', 
		'\a', '*', '\x2', '\x2', '\x485', '\x488', '\x5', '\xCC', 'g', '\x2', 
		'\x486', '\x488', '\x5', '\xBC', '_', '\x2', '\x487', '\x47C', '\x3', 
		'\x2', '\x2', '\x2', '\x487', '\x47D', '\x3', '\x2', '\x2', '\x2', '\x487', 
		'\x47E', '\x3', '\x2', '\x2', '\x2', '\x487', '\x47F', '\x3', '\x2', '\x2', 
		'\x2', '\x487', '\x484', '\x3', '\x2', '\x2', '\x2', '\x487', '\x486', 
		'\x3', '\x2', '\x2', '\x2', '\x488', '\x49A', '\x3', '\x2', '\x2', '\x2', 
		'\x489', '\x48A', '\f', '\x1A', '\x2', '\x2', '\x48A', '\x48B', '\a', 
		'\x43', '\x2', '\x2', '\x48B', '\x48C', '\x5', '\xA6', 'T', '\x2', '\x48C', 
		'\x48D', '\a', '\x44', '\x2', '\x2', '\x48D', '\x49A', '\x3', '\x2', '\x2', 
		'\x2', '\x48E', '\x48F', '\f', '\x16', '\x2', '\x2', '\x48F', '\x49A', 
		'\t', '\f', '\x2', '\x2', '\x490', '\x491', '\f', '\xF', '\x2', '\x2', 
		'\x491', '\x492', '\a', '\x1C', '\x2', '\x2', '\x492', '\x49A', '\x5', 
		'\xC6', '\x64', '\x2', '\x493', '\x494', '\f', '\x5', '\x2', '\x2', '\x494', 
		'\x496', '\a', 'k', '\x2', '\x2', '\x495', '\x497', '\x5', '\xCA', '\x66', 
		'\x2', '\x496', '\x495', '\x3', '\x2', '\x2', '\x2', '\x496', '\x497', 
		'\x3', '\x2', '\x2', '\x2', '\x497', '\x498', '\x3', '\x2', '\x2', '\x2', 
		'\x498', '\x49A', '\a', 'q', '\x2', '\x2', '\x499', '\x44B', '\x3', '\x2', 
		'\x2', '\x2', '\x499', '\x44E', '\x3', '\x2', '\x2', '\x2', '\x499', '\x451', 
		'\x3', '\x2', '\x2', '\x2', '\x499', '\x45C', '\x3', '\x2', '\x2', '\x2', 
		'\x499', '\x45F', '\x3', '\x2', '\x2', '\x2', '\x499', '\x462', '\x3', 
		'\x2', '\x2', '\x2', '\x499', '\x465', '\x3', '\x2', '\x2', '\x2', '\x499', 
		'\x468', '\x3', '\x2', '\x2', '\x2', '\x499', '\x46B', '\x3', '\x2', '\x2', 
		'\x2', '\x499', '\x46E', '\x3', '\x2', '\x2', '\x2', '\x499', '\x471', 
		'\x3', '\x2', '\x2', '\x2', '\x499', '\x477', '\x3', '\x2', '\x2', '\x2', 
		'\x499', '\x47A', '\x3', '\x2', '\x2', '\x2', '\x499', '\x489', '\x3', 
		'\x2', '\x2', '\x2', '\x499', '\x48E', '\x3', '\x2', '\x2', '\x2', '\x499', 
		'\x490', '\x3', '\x2', '\x2', '\x2', '\x499', '\x493', '\x3', '\x2', '\x2', 
		'\x2', '\x49A', '\x49D', '\x3', '\x2', '\x2', '\x2', '\x49B', '\x499', 
		'\x3', '\x2', '\x2', '\x2', '\x49B', '\x49C', '\x3', '\x2', '\x2', '\x2', 
		'\x49C', '\xA7', '\x3', '\x2', '\x2', '\x2', '\x49D', '\x49B', '\x3', 
		'\x2', '\x2', '\x2', '\x49E', '\x49F', '\x5', '\xAA', 'V', '\x2', '\x49F', 
		'\x4A0', '\a', 'j', '\x2', '\x2', '\x4A0', '\x4A1', '\x5', '\xAC', 'W', 
		'\x2', '\x4A1', '\xA9', '\x3', '\x2', '\x2', '\x2', '\x4A2', '\x4B3', 
		'\a', 'q', '\x2', '\x2', '\x4A3', '\x4A5', '\a', '?', '\x2', '\x2', '\x4A4', 
		'\x4A6', '\x5', 'X', '-', '\x2', '\x4A5', '\x4A4', '\x3', '\x2', '\x2', 
		'\x2', '\x4A5', '\x4A6', '\x3', '\x2', '\x2', '\x2', '\x4A6', '\x4A7', 
		'\x3', '\x2', '\x2', '\x2', '\x4A7', '\x4B3', '\a', '@', '\x2', '\x2', 
		'\x4A8', '\x4A9', '\a', '?', '\x2', '\x2', '\x4A9', '\x4AE', '\a', 'q', 
		'\x2', '\x2', '\x4AA', '\x4AB', '\a', '\x46', '\x2', '\x2', '\x4AB', '\x4AD', 
		'\a', 'q', '\x2', '\x2', '\x4AC', '\x4AA', '\x3', '\x2', '\x2', '\x2', 
		'\x4AD', '\x4B0', '\x3', '\x2', '\x2', '\x2', '\x4AE', '\x4AC', '\x3', 
		'\x2', '\x2', '\x2', '\x4AE', '\x4AF', '\x3', '\x2', '\x2', '\x2', '\x4AF', 
		'\x4B1', '\x3', '\x2', '\x2', '\x2', '\x4B0', '\x4AE', '\x3', '\x2', '\x2', 
		'\x2', '\x4B1', '\x4B3', '\a', '@', '\x2', '\x2', '\x4B2', '\x4A2', '\x3', 
		'\x2', '\x2', '\x2', '\x4B2', '\x4A3', '\x3', '\x2', '\x2', '\x2', '\x4B2', 
		'\x4A8', '\x3', '\x2', '\x2', '\x2', '\x4B3', '\xAB', '\x3', '\x2', '\x2', 
		'\x2', '\x4B4', '\x4B7', '\x5', '\xA6', 'T', '\x2', '\x4B5', '\x4B7', 
		'\x5', '\x80', '\x41', '\x2', '\x4B6', '\x4B4', '\x3', '\x2', '\x2', '\x2', 
		'\x4B6', '\x4B5', '\x3', '\x2', '\x2', '\x2', '\x4B7', '\xAD', '\x3', 
		'\x2', '\x2', '\x2', '\x4B8', '\x4B9', '\a', '?', '\x2', '\x2', '\x4B9', 
		'\x4BA', '\x5', '\xA6', 'T', '\x2', '\x4BA', '\x4BB', '\a', '@', '\x2', 
		'\x2', '\x4BB', '\x4CB', '\x3', '\x2', '\x2', '\x2', '\x4BC', '\x4CB', 
		'\a', '-', '\x2', '\x2', '\x4BD', '\x4CB', '\a', '*', '\x2', '\x2', '\x4BE', 
		'\x4CB', '\x5', '`', '\x31', '\x2', '\x4BF', '\x4CB', '\a', 'q', '\x2', 
		'\x2', '\x4C0', '\x4C1', '\x5', '.', '\x18', '\x2', '\x4C1', '\x4C2', 
		'\a', 'G', '\x2', '\x2', '\x4C2', '\x4C3', '\a', '\v', '\x2', '\x2', '\x4C3', 
		'\x4CB', '\x3', '\x2', '\x2', '\x2', '\x4C4', '\x4C8', '\x5', '\xC2', 
		'\x62', '\x2', '\x4C5', '\x4C9', '\x5', '\xCE', 'h', '\x2', '\x4C6', '\x4C7', 
		'\a', '-', '\x2', '\x2', '\x4C7', '\x4C9', '\x5', '\xD0', 'i', '\x2', 
		'\x4C8', '\x4C5', '\x3', '\x2', '\x2', '\x2', '\x4C8', '\x4C6', '\x3', 
		'\x2', '\x2', '\x2', '\x4C9', '\x4CB', '\x3', '\x2', '\x2', '\x2', '\x4CA', 
		'\x4B8', '\x3', '\x2', '\x2', '\x2', '\x4CA', '\x4BC', '\x3', '\x2', '\x2', 
		'\x2', '\x4CA', '\x4BD', '\x3', '\x2', '\x2', '\x2', '\x4CA', '\x4BE', 
		'\x3', '\x2', '\x2', '\x2', '\x4CA', '\x4BF', '\x3', '\x2', '\x2', '\x2', 
		'\x4CA', '\x4C0', '\x3', '\x2', '\x2', '\x2', '\x4CA', '\x4C4', '\x3', 
		'\x2', '\x2', '\x2', '\x4CB', '\xAF', '\x3', '\x2', '\x2', '\x2', '\x4CC', 
		'\x4CD', '\x5', 'P', ')', '\x2', '\x4CD', '\x4CE', '\a', 'G', '\x2', '\x2', 
		'\x4CE', '\x4D0', '\x3', '\x2', '\x2', '\x2', '\x4CF', '\x4CC', '\x3', 
		'\x2', '\x2', '\x2', '\x4CF', '\x4D0', '\x3', '\x2', '\x2', '\x2', '\x4D0', 
		'\x4D4', '\x3', '\x2', '\x2', '\x2', '\x4D1', '\x4D3', '\x5', '\x66', 
		'\x34', '\x2', '\x4D2', '\x4D1', '\x3', '\x2', '\x2', '\x2', '\x4D3', 
		'\x4D6', '\x3', '\x2', '\x2', '\x2', '\x4D4', '\x4D2', '\x3', '\x2', '\x2', 
		'\x2', '\x4D4', '\x4D5', '\x3', '\x2', '\x2', '\x2', '\x4D5', '\x4D7', 
		'\x3', '\x2', '\x2', '\x2', '\x4D6', '\x4D4', '\x3', '\x2', '\x2', '\x2', 
		'\x4D7', '\x4D9', '\a', 'q', '\x2', '\x2', '\x4D8', '\x4DA', '\x5', '\xCA', 
		'\x66', '\x2', '\x4D9', '\x4D8', '\x3', '\x2', '\x2', '\x2', '\x4D9', 
		'\x4DA', '\x3', '\x2', '\x2', '\x2', '\x4DA', '\xB1', '\x3', '\x2', '\x2', 
		'\x2', '\x4DB', '\x4DC', '\x5', '\xC2', '\x62', '\x2', '\x4DC', '\x4DD', 
		'\x5', '\xB4', '[', '\x2', '\x4DD', '\x4DE', '\x5', '\xBA', '^', '\x2', 
		'\x4DE', '\x4E5', '\x3', '\x2', '\x2', '\x2', '\x4DF', '\x4E2', '\x5', 
		'\xB4', '[', '\x2', '\x4E0', '\x4E3', '\x5', '\xB8', ']', '\x2', '\x4E1', 
		'\x4E3', '\x5', '\xBA', '^', '\x2', '\x4E2', '\x4E0', '\x3', '\x2', '\x2', 
		'\x2', '\x4E2', '\x4E1', '\x3', '\x2', '\x2', '\x2', '\x4E3', '\x4E5', 
		'\x3', '\x2', '\x2', '\x2', '\x4E4', '\x4DB', '\x3', '\x2', '\x2', '\x2', 
		'\x4E4', '\x4DF', '\x3', '\x2', '\x2', '\x2', '\x4E5', '\xB3', '\x3', 
		'\x2', '\x2', '\x2', '\x4E6', '\x4E8', '\a', 'q', '\x2', '\x2', '\x4E7', 
		'\x4E9', '\x5', '\xBE', '`', '\x2', '\x4E8', '\x4E7', '\x3', '\x2', '\x2', 
		'\x2', '\x4E8', '\x4E9', '\x3', '\x2', '\x2', '\x2', '\x4E9', '\x4F1', 
		'\x3', '\x2', '\x2', '\x2', '\x4EA', '\x4EB', '\a', 'G', '\x2', '\x2', 
		'\x4EB', '\x4ED', '\a', 'q', '\x2', '\x2', '\x4EC', '\x4EE', '\x5', '\xBE', 
		'`', '\x2', '\x4ED', '\x4EC', '\x3', '\x2', '\x2', '\x2', '\x4ED', '\x4EE', 
		'\x3', '\x2', '\x2', '\x2', '\x4EE', '\x4F0', '\x3', '\x2', '\x2', '\x2', 
		'\x4EF', '\x4EA', '\x3', '\x2', '\x2', '\x2', '\x4F0', '\x4F3', '\x3', 
		'\x2', '\x2', '\x2', '\x4F1', '\x4EF', '\x3', '\x2', '\x2', '\x2', '\x4F1', 
		'\x4F2', '\x3', '\x2', '\x2', '\x2', '\x4F2', '\x4F6', '\x3', '\x2', '\x2', 
		'\x2', '\x4F3', '\x4F1', '\x3', '\x2', '\x2', '\x2', '\x4F4', '\x4F6', 
		'\x5', '\xC8', '\x65', '\x2', '\x4F5', '\x4E6', '\x3', '\x2', '\x2', '\x2', 
		'\x4F5', '\x4F4', '\x3', '\x2', '\x2', '\x2', '\x4F6', '\xB5', '\x3', 
		'\x2', '\x2', '\x2', '\x4F7', '\x4F9', '\a', 'q', '\x2', '\x2', '\x4F8', 
		'\x4FA', '\x5', '\xC0', '\x61', '\x2', '\x4F9', '\x4F8', '\x3', '\x2', 
		'\x2', '\x2', '\x4F9', '\x4FA', '\x3', '\x2', '\x2', '\x2', '\x4FA', '\x4FB', 
		'\x3', '\x2', '\x2', '\x2', '\x4FB', '\x4FC', '\x5', '\xBA', '^', '\x2', 
		'\x4FC', '\xB7', '\x3', '\x2', '\x2', '\x2', '\x4FD', '\x519', '\a', '\x43', 
		'\x2', '\x2', '\x4FE', '\x503', '\a', '\x44', '\x2', '\x2', '\x4FF', '\x500', 
		'\a', '\x43', '\x2', '\x2', '\x500', '\x502', '\a', '\x44', '\x2', '\x2', 
		'\x501', '\x4FF', '\x3', '\x2', '\x2', '\x2', '\x502', '\x505', '\x3', 
		'\x2', '\x2', '\x2', '\x503', '\x501', '\x3', '\x2', '\x2', '\x2', '\x503', 
		'\x504', '\x3', '\x2', '\x2', '\x2', '\x504', '\x506', '\x3', '\x2', '\x2', 
		'\x2', '\x505', '\x503', '\x3', '\x2', '\x2', '\x2', '\x506', '\x51A', 
		'\x5', 'N', '(', '\x2', '\x507', '\x508', '\x5', '\xA6', 'T', '\x2', '\x508', 
		'\x50F', '\a', '\x44', '\x2', '\x2', '\x509', '\x50A', '\a', '\x43', '\x2', 
		'\x2', '\x50A', '\x50B', '\x5', '\xA6', 'T', '\x2', '\x50B', '\x50C', 
		'\a', '\x44', '\x2', '\x2', '\x50C', '\x50E', '\x3', '\x2', '\x2', '\x2', 
		'\x50D', '\x509', '\x3', '\x2', '\x2', '\x2', '\x50E', '\x511', '\x3', 
		'\x2', '\x2', '\x2', '\x50F', '\x50D', '\x3', '\x2', '\x2', '\x2', '\x50F', 
		'\x510', '\x3', '\x2', '\x2', '\x2', '\x510', '\x516', '\x3', '\x2', '\x2', 
		'\x2', '\x511', '\x50F', '\x3', '\x2', '\x2', '\x2', '\x512', '\x513', 
		'\a', '\x43', '\x2', '\x2', '\x513', '\x515', '\a', '\x44', '\x2', '\x2', 
		'\x514', '\x512', '\x3', '\x2', '\x2', '\x2', '\x515', '\x518', '\x3', 
		'\x2', '\x2', '\x2', '\x516', '\x514', '\x3', '\x2', '\x2', '\x2', '\x516', 
		'\x517', '\x3', '\x2', '\x2', '\x2', '\x517', '\x51A', '\x3', '\x2', '\x2', 
		'\x2', '\x518', '\x516', '\x3', '\x2', '\x2', '\x2', '\x519', '\x4FE', 
		'\x3', '\x2', '\x2', '\x2', '\x519', '\x507', '\x3', '\x2', '\x2', '\x2', 
		'\x51A', '\xB9', '\x3', '\x2', '\x2', '\x2', '\x51B', '\x51D', '\x5', 
		'\xD0', 'i', '\x2', '\x51C', '\x51E', '\x5', '\"', '\x12', '\x2', '\x51D', 
		'\x51C', '\x3', '\x2', '\x2', '\x2', '\x51D', '\x51E', '\x3', '\x2', '\x2', 
		'\x2', '\x51E', '\xBB', '\x3', '\x2', '\x2', '\x2', '\x51F', '\x520', 
		'\x5', '\xC2', '\x62', '\x2', '\x520', '\x521', '\x5', '\xCE', 'h', '\x2', 
		'\x521', '\xBD', '\x3', '\x2', '\x2', '\x2', '\x522', '\x523', '\a', 'J', 
		'\x2', '\x2', '\x523', '\x526', '\a', 'I', '\x2', '\x2', '\x524', '\x526', 
		'\x5', '\xCA', '\x66', '\x2', '\x525', '\x522', '\x3', '\x2', '\x2', '\x2', 
		'\x525', '\x524', '\x3', '\x2', '\x2', '\x2', '\x526', '\xBF', '\x3', 
		'\x2', '\x2', '\x2', '\x527', '\x528', '\a', 'J', '\x2', '\x2', '\x528', 
		'\x52B', '\a', 'I', '\x2', '\x2', '\x529', '\x52B', '\x5', '\xC2', '\x62', 
		'\x2', '\x52A', '\x527', '\x3', '\x2', '\x2', '\x2', '\x52A', '\x529', 
		'\x3', '\x2', '\x2', '\x2', '\x52B', '\xC1', '\x3', '\x2', '\x2', '\x2', 
		'\x52C', '\x52D', '\a', 'J', '\x2', '\x2', '\x52D', '\x52E', '\x5', '\xC4', 
		'\x63', '\x2', '\x52E', '\x52F', '\a', 'I', '\x2', '\x2', '\x52F', '\xC3', 
		'\x3', '\x2', '\x2', '\x2', '\x530', '\x535', '\x5', '\xC6', '\x64', '\x2', 
		'\x531', '\x532', '\a', '\x46', '\x2', '\x2', '\x532', '\x534', '\x5', 
		'\xC6', '\x64', '\x2', '\x533', '\x531', '\x3', '\x2', '\x2', '\x2', '\x534', 
		'\x537', '\x3', '\x2', '\x2', '\x2', '\x535', '\x533', '\x3', '\x2', '\x2', 
		'\x2', '\x535', '\x536', '\x3', '\x2', '\x2', '\x2', '\x536', '\xC5', 
		'\x3', '\x2', '\x2', '\x2', '\x537', '\x535', '\x3', '\x2', '\x2', '\x2', 
		'\x538', '\x53A', '\x5', '\x66', '\x34', '\x2', '\x539', '\x538', '\x3', 
		'\x2', '\x2', '\x2', '\x539', '\x53A', '\x3', '\x2', '\x2', '\x2', '\x53A', 
		'\x53D', '\x3', '\x2', '\x2', '\x2', '\x53B', '\x53E', '\x5', 'P', ')', 
		'\x2', '\x53C', '\x53E', '\x5', '\xC8', '\x65', '\x2', '\x53D', '\x53B', 
		'\x3', '\x2', '\x2', '\x2', '\x53D', '\x53C', '\x3', '\x2', '\x2', '\x2', 
		'\x53E', '\x543', '\x3', '\x2', '\x2', '\x2', '\x53F', '\x540', '\a', 
		'\x43', '\x2', '\x2', '\x540', '\x542', '\a', '\x44', '\x2', '\x2', '\x541', 
		'\x53F', '\x3', '\x2', '\x2', '\x2', '\x542', '\x545', '\x3', '\x2', '\x2', 
		'\x2', '\x543', '\x541', '\x3', '\x2', '\x2', '\x2', '\x543', '\x544', 
		'\x3', '\x2', '\x2', '\x2', '\x544', '\xC7', '\x3', '\x2', '\x2', '\x2', 
		'\x545', '\x543', '\x3', '\x2', '\x2', '\x2', '\x546', '\x547', '\t', 
		'\r', '\x2', '\x2', '\x547', '\xC9', '\x3', '\x2', '\x2', '\x2', '\x548', 
		'\x549', '\a', 'J', '\x2', '\x2', '\x549', '\x54E', '\x5', 'R', '*', '\x2', 
		'\x54A', '\x54B', '\a', '\x46', '\x2', '\x2', '\x54B', '\x54D', '\x5', 
		'R', '*', '\x2', '\x54C', '\x54A', '\x3', '\x2', '\x2', '\x2', '\x54D', 
		'\x550', '\x3', '\x2', '\x2', '\x2', '\x54E', '\x54C', '\x3', '\x2', '\x2', 
		'\x2', '\x54E', '\x54F', '\x3', '\x2', '\x2', '\x2', '\x54F', '\x551', 
		'\x3', '\x2', '\x2', '\x2', '\x550', '\x54E', '\x3', '\x2', '\x2', '\x2', 
		'\x551', '\x552', '\a', 'I', '\x2', '\x2', '\x552', '\xCB', '\x3', '\x2', 
		'\x2', '\x2', '\x553', '\x55A', '\x5', '\xD0', 'i', '\x2', '\x554', '\x555', 
		'\a', 'G', '\x2', '\x2', '\x555', '\x557', '\a', 'q', '\x2', '\x2', '\x556', 
		'\x558', '\x5', '\xD0', 'i', '\x2', '\x557', '\x556', '\x3', '\x2', '\x2', 
		'\x2', '\x557', '\x558', '\x3', '\x2', '\x2', '\x2', '\x558', '\x55A', 
		'\x3', '\x2', '\x2', '\x2', '\x559', '\x553', '\x3', '\x2', '\x2', '\x2', 
		'\x559', '\x554', '\x3', '\x2', '\x2', '\x2', '\x55A', '\xCD', '\x3', 
		'\x2', '\x2', '\x2', '\x55B', '\x55C', '\a', '*', '\x2', '\x2', '\x55C', 
		'\x560', '\x5', '\xCC', 'g', '\x2', '\x55D', '\x55E', '\a', 'q', '\x2', 
		'\x2', '\x55E', '\x560', '\x5', '\xD0', 'i', '\x2', '\x55F', '\x55B', 
		'\x3', '\x2', '\x2', '\x2', '\x55F', '\x55D', '\x3', '\x2', '\x2', '\x2', 
		'\x560', '\xCF', '\x3', '\x2', '\x2', '\x2', '\x561', '\x563', '\a', '?', 
		'\x2', '\x2', '\x562', '\x564', '\x5', '\xA2', 'R', '\x2', '\x563', '\x562', 
		'\x3', '\x2', '\x2', '\x2', '\x563', '\x564', '\x3', '\x2', '\x2', '\x2', 
		'\x564', '\x565', '\x3', '\x2', '\x2', '\x2', '\x565', '\x566', '\a', 
		'@', '\x2', '\x2', '\x566', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xAD', 
		'\xD3', '\xD8', '\xDE', '\xE6', '\xEF', '\xF4', '\xFB', '\x102', '\x105', 
		'\x10C', '\x116', '\x11A', '\x11F', '\x123', '\x127', '\x131', '\x139', 
		'\x13F', '\x146', '\x14D', '\x151', '\x154', '\x157', '\x160', '\x166', 
		'\x16B', '\x16E', '\x174', '\x17A', '\x17E', '\x186', '\x18F', '\x196', 
		'\x19C', '\x1A0', '\x1AB', '\x1B4', '\x1B9', '\x1BF', '\x1C3', '\x1CF', 
		'\x1DA', '\x1DF', '\x1E8', '\x1F0', '\x1FA', '\x203', '\x20B', '\x210', 
		'\x218', '\x21D', '\x227', '\x231', '\x237', '\x23E', '\x243', '\x24B', 
		'\x24F', '\x251', '\x257', '\x25C', '\x260', '\x267', '\x269', '\x270', 
		'\x275', '\x27E', '\x283', '\x286', '\x28B', '\x294', '\x2A0', '\x2A9', 
		'\x2B4', '\x2B7', '\x2BE', '\x2C8', '\x2D0', '\x2D3', '\x2D6', '\x2E3', 
		'\x2EB', '\x2F0', '\x2F8', '\x2FC', '\x300', '\x304', '\x306', '\x30A', 
		'\x310', '\x31B', '\x325', '\x32A', '\x333', '\x338', '\x33B', '\x342', 
		'\x34B', '\x362', '\x365', '\x368', '\x370', '\x374', '\x37C', '\x382', 
		'\x38D', '\x396', '\x39B', '\x3A5', '\x3AC', '\x3B9', '\x3C2', '\x3CB', 
		'\x3D1', '\x3DC', '\x3E1', '\x3E6', '\x3EB', '\x3EF', '\x3F3', '\x3F7', 
		'\x3F9', '\x3FD', '\x402', '\x413', '\x419', '\x41F', '\x425', '\x428', 
		'\x43C', '\x440', '\x445', '\x449', '\x459', '\x481', '\x487', '\x496', 
		'\x499', '\x49B', '\x4A5', '\x4AE', '\x4B2', '\x4B6', '\x4C8', '\x4CA', 
		'\x4CF', '\x4D4', '\x4D9', '\x4E2', '\x4E4', '\x4E8', '\x4ED', '\x4F1', 
		'\x4F5', '\x4F9', '\x503', '\x50F', '\x516', '\x519', '\x51D', '\x525', 
		'\x52A', '\x535', '\x539', '\x53D', '\x543', '\x54E', '\x557', '\x559', 
		'\x55F', '\x563',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
